{Test vector set 1 generation for Salsa uses 20 rounds/128 bit key}
{reproduces first parts of submitted salsa verified.test-vectors}

program T_S20TV1;

{$i std.inc}

{$ifdef APPCONS}
  {$apptype console}
{$endif}

uses
  {$ifdef WINCRT}
    WinCRT,
  {$endif}
  salsa20, mem_util;

var
  key: array[0..15] of byte;
  iv : array[0..7] of byte;
  stream, zero: array[0..127] of longint;
  ctx: salsa_ctx;
  xordig: array[0..15] of longint;

const
  test: integer = 3;

{---------------------------------------------------------------------------}
procedure streamvector(tset, v: integer);
  {-print test vector v from set tset}
var
  i: integer;
begin
  writeln('Set ',tset,', vector#',v:3,':');
  writeln('key = ':31, HexStr(@key, sizeof(Key)));
  writeln(' IV = ':31, HexStr(@IV, sizeof(IV)));
  {use salsa_xkeysetup because 128 bit key sets rounds=12 default}
  salsa_xkeysetup(ctx,@key,128,20);

  fillchar(zero, sizeof(stream), 0);

  case test of
    1: begin
         salsa_ivsetup(ctx, @iv);
         salsa_keystream_blocks(ctx, @stream, 4);
         salsa_keystream_bytes(ctx, @stream[64], 256);
       end;
    2: begin
         salsa_ivsetup(ctx, @iv);
         salsa_encrypt_blocks(ctx, @zero, @stream, 4);
         salsa_encrypt_bytes(ctx, @zero[64], @stream[64],256);
       end;
    3: begin
         salsa_encrypt_packet(ctx, @iv, @zero, @stream, 512);
       end;
  end;

  fillchar(xordig, sizeof(xordig), 0);
  for i:=0 to 127 do begin
    xordig[i and 15] := xordig[i and 15] xor stream[i];
  end;

  writeln('stream[0..63] = ':31, HexStr(@stream[0],16));
  writeln('':31, HexStr(@stream[  4],16));
  writeln('':31, HexStr(@stream[  8],16));
  writeln('':31, HexStr(@stream[ 12],16));
  writeln('stream[192..255] = ':31, HexStr(@stream[48],16));
  writeln('':31, HexStr(@stream[ 52],16));
  writeln('':31, HexStr(@stream[ 56],16));
  writeln('':31, HexStr(@stream[ 60],16));
  writeln('stream[256..319] = ':31, HexStr(@stream[64],16));
  writeln('':31, HexStr(@stream[ 68],16));
  writeln('':31, HexStr(@stream[ 72],16));
  writeln('':31, HexStr(@stream[ 76],16));
  writeln('stream[448..511] = ':31, HexStr(@stream[112],16));
  writeln('':31, HexStr(@stream[116],16));
  writeln('':31, HexStr(@stream[120],16));
  writeln('':31, HexStr(@stream[124],16));
  writeln('xor-digest = ':31, HexStr(@xordig[0],16));
  writeln('':31, HexStr(@xordig[  4],16));
  writeln('':31, HexStr(@xordig[  8],16));
  writeln('':31, HexStr(@xordig[ 12],16));
  writeln;
end;

var
  v,ve: integer;
begin
  {Use upper case hex digits}
  HexUpper := true;

  {Only first vec for testing}
  if paramcount<>0 then ve:=0 else ve:=127;

  {print text vectors from first set}
  writeln;
  writeln('Test vectors -- set 1');
  writeln('=====================');
  writeln;
  case test of
    1: writeln('(stream is generated by salsa_keystream_blocks/bytes)');
    2: writeln('(stream is generated by salsa_encrypt_blocks/bytes)');
    3: writeln('(stream is generated by salsa_encrypt_packet)');
  end;
  writeln;
  fillchar(iv,sizeof(iv),0);
  v := 0;
  while v<=ve do begin
    fillchar(key, sizeof(key), 0);
    key[v shr 3] := 1 shl (7 - (v and 7));
    streamvector(1, v);
    inc(v,9);
  end;
end.
