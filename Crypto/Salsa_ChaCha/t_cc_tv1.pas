{Test vector set 1 generation for ChaCha   (c) 2010 W.Ehrhardt}
{reproduces first parts of test vectors compiled from Bernstein sources }

program T_CC_TV1;

{$i std.inc}

{$ifdef APPCONS}
  {$apptype console}
{$endif}

uses
  {$ifdef WINCRT}
    WinCRT,
  {$endif}
  salsa20, mem_util;

var
  key: array[0..31] of byte;
  iv : array[0..7] of byte;
  stream, zero: array[0..127] of longint;
  ctx: salsa_ctx;
  xordig: array[0..15] of longint;

const
  test : integer = 2;      {generation method}
  tvinc: integer = 1;      {increment normally 1 or 9}

{---------------------------------------------------------------------------}
procedure streamvector(v: integer; kbytes, r: word);
  {-print test vector v from set 1}
var
  i: integer;
  nb,bb: word;
begin
  writeln('Set 1, vector#',v:3,':');
  if kbytes>16 then begin
    writeln('key = ':31, HexStr(@key, 16));
    writeln('':31, HexStr(@key[16],sizeof(Key)-16));
  end
  else writeln('key = ':31, HexStr(@key, kbytes));
  writeln(' IV = ':31, HexStr(@IV, sizeof(IV)));

  chacha_xkeysetup(ctx,@key,kbytes*8,r);
  fillchar(zero, sizeof(stream), 0);

  nb := (512 div salsa_blocklength) div 2;
  bb := nb*salsa_blocklength;
  case test of
    1: begin
         chacha_ivsetup(ctx, @iv);
         chacha_keystream_blocks(ctx, @stream, nb);
         chacha_keystream_bytes(ctx, @stream[bb div 4], 512-bb);
       end;
    2: begin
         chacha_ivsetup(ctx, @iv);
         chacha_encrypt_blocks(ctx, @zero, @stream, nb);
         chacha_encrypt_bytes(ctx, @zero, @stream[bb div 4],512-bb);
       end;
    3: begin
         chacha_encrypt_packet(ctx, @iv, @zero, @stream, 512);
       end;
  end;

  fillchar(xordig, sizeof(xordig), 0);
  for i:=0 to 127 do begin
    xordig[i and 15] := xordig[i and 15] xor stream[i];
  end;

  writeln('stream[0..63] = ':31, HexStr(@stream[0],16));
  writeln('':31, HexStr(@stream[  4],16));
  writeln('':31, HexStr(@stream[  8],16));
  writeln('':31, HexStr(@stream[ 12],16));
  writeln('stream[192..255] = ':31, HexStr(@stream[48],16));
  writeln('':31, HexStr(@stream[ 52],16));
  writeln('':31, HexStr(@stream[ 56],16));
  writeln('':31, HexStr(@stream[ 60],16));
  writeln('stream[256..319] = ':31, HexStr(@stream[64],16));
  writeln('':31, HexStr(@stream[ 68],16));
  writeln('':31, HexStr(@stream[ 72],16));
  writeln('':31, HexStr(@stream[ 76],16));
  writeln('stream[448..511] = ':31, HexStr(@stream[112],16));
  writeln('':31, HexStr(@stream[116],16));
  writeln('':31, HexStr(@stream[120],16));
  writeln('':31, HexStr(@stream[124],16));
  writeln('xor-digest = ':31, HexStr(@xordig[0],16));
  writeln('':31, HexStr(@xordig[  4],16));
  writeln('':31, HexStr(@xordig[  8],16));
  writeln('':31, HexStr(@xordig[ 12],16));
  writeln;
end;

var
  v,ve: integer;
  ks, r: word;
begin

  ks := 32;  {keysize in bytes: 16 or 32}
  r  := 20;  {round numbes: 8, 12, 20}

  {Use upper case hex digits}
  HexUpper := true;

  {Only first vec for testing}
  if paramcount<>0 then ve:=0 else ve:=ks*8-1;

  {print test vectors from first set}
  writeln;
  writeln('Test vectors -- set 1');
  writeln('=====================');
  writeln;
  case test of
    1: writeln('(stream is generated by chacha_keystream_blocks/bytes)');
    2: writeln('(stream is generated by chacha_encrypt_blocks/bytes)');
    3: writeln('(stream is generated by chacha_encrypt_packet)');
  end;
  writeln;
  fillchar(iv,sizeof(iv),0);
  v := 0;
  while v<=ve do begin
    fillchar(key, sizeof(key), 0);
    key[v shr 3] := 1 shl (7 - (v and 7));
    streamvector(v,ks,r);
    inc(v,tvinc);
  end;
{$ifdef BIT32}
  writeln('ChaChaBasm32 = ', ChaChaBasm32);
{$endif}
end.
