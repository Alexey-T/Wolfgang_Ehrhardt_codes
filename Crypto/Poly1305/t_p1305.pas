{-Test prog for poly1305 unit, we Aug. 2015}

program t_p1305;

{$i std.inc}

{$ifdef APPCONS}
  {$apptype console}
{$endif}

uses
  {$ifdef WINCRT}
    wincrt,
  {$endif}
  BTypes, poly1305;



{---------------------------------------------------------------------------}
function HexByte(b: byte): BString;
  {-byte as hex string}
const
  nib: array[0..15] of char8 = '0123456789abcdef';
begin
  HexByte := nib[b div 16] + nib[b and 15];
end;


{---------------------------------------------------------------------------}
procedure rfc7539_test;
var
  mac: TPoly1305Mac;

{Test Vector #1:}
const
  key1: TPoly1305Key = (
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

  msg1: array[0..63] of byte = (
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

  mac1: TPoly1305Mac = (
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

{Test Vector #2:}
const
  key2: TPoly1305Key = (
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
          $36,$e5,$f6,$b5,$c5,$e0,$60,$70,$f0,$ef,$ca,$96,$22,$7a,$86,$3e);

  msg2: array[0..374] of byte = (
          $41,$6e,$79,$20,$73,$75,$62,$6d,$69,$73,$73,$69,$6f,$6e,$20,$74,
          $6f,$20,$74,$68,$65,$20,$49,$45,$54,$46,$20,$69,$6e,$74,$65,$6e,
          $64,$65,$64,$20,$62,$79,$20,$74,$68,$65,$20,$43,$6f,$6e,$74,$72,
          $69,$62,$75,$74,$6f,$72,$20,$66,$6f,$72,$20,$70,$75,$62,$6c,$69,
          $63,$61,$74,$69,$6f,$6e,$20,$61,$73,$20,$61,$6c,$6c,$20,$6f,$72,
          $20,$70,$61,$72,$74,$20,$6f,$66,$20,$61,$6e,$20,$49,$45,$54,$46,
          $20,$49,$6e,$74,$65,$72,$6e,$65,$74,$2d,$44,$72,$61,$66,$74,$20,
          $6f,$72,$20,$52,$46,$43,$20,$61,$6e,$64,$20,$61,$6e,$79,$20,$73,
          $74,$61,$74,$65,$6d,$65,$6e,$74,$20,$6d,$61,$64,$65,$20,$77,$69,
          $74,$68,$69,$6e,$20,$74,$68,$65,$20,$63,$6f,$6e,$74,$65,$78,$74,
          $20,$6f,$66,$20,$61,$6e,$20,$49,$45,$54,$46,$20,$61,$63,$74,$69,
          $76,$69,$74,$79,$20,$69,$73,$20,$63,$6f,$6e,$73,$69,$64,$65,$72,
          $65,$64,$20,$61,$6e,$20,$22,$49,$45,$54,$46,$20,$43,$6f,$6e,$74,
          $72,$69,$62,$75,$74,$69,$6f,$6e,$22,$2e,$20,$53,$75,$63,$68,$20,
          $73,$74,$61,$74,$65,$6d,$65,$6e,$74,$73,$20,$69,$6e,$63,$6c,$75,
          $64,$65,$20,$6f,$72,$61,$6c,$20,$73,$74,$61,$74,$65,$6d,$65,$6e,
          $74,$73,$20,$69,$6e,$20,$49,$45,$54,$46,$20,$73,$65,$73,$73,$69,
          $6f,$6e,$73,$2c,$20,$61,$73,$20,$77,$65,$6c,$6c,$20,$61,$73,$20,
          $77,$72,$69,$74,$74,$65,$6e,$20,$61,$6e,$64,$20,$65,$6c,$65,$63,
          $74,$72,$6f,$6e,$69,$63,$20,$63,$6f,$6d,$6d,$75,$6e,$69,$63,$61,
          $74,$69,$6f,$6e,$73,$20,$6d,$61,$64,$65,$20,$61,$74,$20,$61,$6e,
          $79,$20,$74,$69,$6d,$65,$20,$6f,$72,$20,$70,$6c,$61,$63,$65,$2c,
          $20,$77,$68,$69,$63,$68,$20,$61,$72,$65,$20,$61,$64,$64,$72,$65,
          $73,$73,$65,$64,$20,$74,$6f);

  mac2: TPoly1305Mac = (
          $36,$e5,$f6,$b5,$c5,$e0,$60,$70,$f0,$ef,$ca,$96,$22,$7a,$86,$3e);

{Test Vector #3}
const
  key3: TPoly1305Key = (
          $36,$e5,$f6,$b5,$c5,$e0,$60,$70,$f0,$ef,$ca,$96,$22,$7a,$86,$3e,
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

  mac3: TPoly1305Mac = (
          $f3,$47,$7e,$7c,$d9,$54,$17,$af,$89,$a6,$b8,$79,$4c,$31,$0c,$f0);

{Test Vector #4:}
const
  key4: TPoly1305Key = (
          $1c,$92,$40,$a5,$eb,$55,$d3,$8a,$f3,$33,$88,$86,$04,$f6,$b5,$f0,
          $47,$39,$17,$c1,$40,$2b,$80,$09,$9d,$ca,$5c,$bc,$20,$70,$75,$c0);

  msg4: array[0..126] of byte = (
          $27,$54,$77,$61,$73,$20,$62,$72,$69,$6c,$6c,$69,$67,$2c,$20,$61,
          $6e,$64,$20,$74,$68,$65,$20,$73,$6c,$69,$74,$68,$79,$20,$74,$6f,
          $76,$65,$73,$0a,$44,$69,$64,$20,$67,$79,$72,$65,$20,$61,$6e,$64,
          $20,$67,$69,$6d,$62,$6c,$65,$20,$69,$6e,$20,$74,$68,$65,$20,$77,
          $61,$62,$65,$3a,$0a,$41,$6c,$6c,$20,$6d,$69,$6d,$73,$79,$20,$77,
          $65,$72,$65,$20,$74,$68,$65,$20,$62,$6f,$72,$6f,$67,$6f,$76,$65,
          $73,$2c,$0a,$41,$6e,$64,$20,$74,$68,$65,$20,$6d,$6f,$6d,$65,$20,
          $72,$61,$74,$68,$73,$20,$6f,$75,$74,$67,$72,$61,$62,$65,$2e);

  mac4: TPoly1305Mac = (
          $45,$41,$66,$9a,$7e,$aa,$ee,$61,$e7,$08,$dc,$7c,$bc,$c5,$eb,$62);

{Test Vector #5}
{If one uses 130-bit partial reduction, does the code handle the case}
{where partially reduced final result is not fully reduced?}
const
  key5: TPoly1305Key = (
          $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

  msg5: array[0..15] of byte = (
          $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF);

  mac5: TPoly1305Mac = (
          $03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

{Test Vector #6}
{What happens if addition of s overflows modulo 2^128?}
const
  key6: TPoly1305Key = (
          $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
          $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF);

  msg6: array[0..15] of byte = (
          $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

  mac6: TPoly1305Mac = (
          $03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

{Test Vector #7}
{What happens if data limb is all ones and there is carry from lower limb?}
const
  key7: TPoly1305Key = (
          $01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

  msg7: array[0..47] of byte = (
          $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,
          $F0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,
          $11,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

  mac7: TPoly1305Mac = (
          $05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

{Test Vector #8}
{What happens if final result from polynomial part is exactly 2^130-5?}
const
  key8: TPoly1305Key = (
          $01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

  msg8: array[0..47] of byte = (
          $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,
          $FB,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE,
          $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01);

  mac8: TPoly1305Mac = (
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

{Test Vector #9}
{What happens if final result from polynomial part is exactly 2^130-6?}
const
  key9: TPoly1305Key = (
          $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

  msg9: array[0..15] of byte = (
          $FD,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF);

  mac9: TPoly1305Mac = (
          $FA,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF);

{Test Vector #10}
{What happens if 5*H+L-type reduction produces 131-bit intermediate result}
const
 key10: TPoly1305Key = (
          $01,$00,$00,$00,$00,$00,$00,$00,$04,$00,$00,$00,$00,$00,$00,$00,
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

 msg10: array[0..63] of byte = (
          $E3,$35,$94,$D7,$50,$5E,$43,$B9,$00,$00,$00,$00,$00,$00,$00,$00,
          $33,$94,$D7,$50,$5E,$43,$79,$CD,$01,$00,$00,$00,$00,$00,$00,$00,
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
          $01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

 mac10: TPoly1305Mac = (
          $14,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$00);

{Test Vector #11}
{What happens if 5*H+L-type reduction produces 131-bit final result?}
const
 key11: TPoly1305Key = (
          $01,$00,$00,$00,$00,$00,$00,$00,$04,$00,$00,$00,$00,$00,$00,$00,
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

 msg11: array[0..47] of byte = (
          $E3,$35,$94,$D7,$50,$5E,$43,$B9,$00,$00,$00,$00,$00,$00,$00,$00,
          $33,$94,$D7,$50,$5E,$43,$79,$CD,$01,$00,$00,$00,$00,$00,$00,$00,
          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

 mac11: TPoly1305Mac = (
          $13,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00);

begin
  writeln('Test vectors from RFC 7539');
  poly1305_auth(mac, @msg1, sizeof(msg1), key1);
  writeln('  Testvector  1: ', poly1305_verify(mac1, mac));
  poly1305_auth(mac, @msg2, sizeof(msg2), key2);
  writeln('  Testvector  2: ', poly1305_verify(mac2, mac));
  poly1305_auth(mac, @msg2, sizeof(msg2), key3);
  writeln('  Testvector  3: ', poly1305_verify(mac3, mac));
  poly1305_auth(mac, @msg4, sizeof(msg4), key4);
  writeln('  Testvector  4: ', poly1305_verify(mac4, mac));
  poly1305_auth(mac, @msg5, sizeof(msg5), key5);
  writeln('  Testvector  5: ', poly1305_verify(mac5, mac));
  poly1305_auth(mac, @msg6, sizeof(msg6), key6);
  writeln('  Testvector  6: ', poly1305_verify(mac6, mac));
  poly1305_auth(mac, @msg7, sizeof(msg7), key7);
  writeln('  Testvector  7: ', poly1305_verify(mac7, mac));
  poly1305_auth(mac, @msg8, sizeof(msg8), key8);
  writeln('  Testvector  8: ', poly1305_verify(mac8, mac));
  poly1305_auth(mac, @msg9, sizeof(msg9), key9);
  writeln('  Testvector  9: ', poly1305_verify(mac9, mac));
  poly1305_auth(mac, @msg10, sizeof(msg10), key10);
  writeln('  Testvector 10: ', poly1305_verify(mac10, mac));
  poly1305_auth(mac, @msg11, sizeof(msg11), key11);
  writeln('  Testvector 11: ', poly1305_verify(mac11, mac));
end;

var
  key: TPoly1305Key;
  mac: TPoly1305Mac;
  msg: array[0..72] of byte;
  i: integer;
  success: boolean;
const
  expected: TPoly1305Mac = ($dd,$b9,$da,$7d,$dd,$5e,$52,$79,
                            $27,$30,$ed,$5c,$da,$5f,$90,$a4);
begin
  success := poly1305_selftest;
  writeln('Poly1305 selftest: ',success);
  if success then begin
    for i:=0 to sizeof(key)-1 do key[i] := byte(i + 221);
    for i:=0 to sizeof(msg)-1 do msg[i] := byte(i + 121);
    poly1305_auth(mac, @msg, sizeof(msg), key);
    write('Poly1305-donna sample mac is ');
    for i:=0 to sizeof(mac)-1 do write(HexByte(mac[i]));
    writeln(': ',poly1305_verify(expected, mac));
    rfc7539_test;
  end;
end.
