{Sosemanuk include file for 32/64 bit code, W.Ehrhardt Apr.2009-2012}
{This code is based on sosemanukfast.java from the eSTREAM submission}


{---------------------------------------------------------------------------}
function sose_keysetup(var ctx: sose_ctx; key: pointer; keybits: word): integer;
  {-Sosemanuk key setup}
var
  r0, r1, r2, r3, r4, tt: longint;
  lkey: array[0..35] of byte;
  w: array[0..7] of longint absolute lkey;
  klen: word;
begin
  {$ifdef CHECK_KEY_BITS}
    if KeyBits<128 then begin
      sose_keysetup := -1;
      exit;
    end;
  {$endif}

  sose_keysetup := 0;
  klen := KeyBits div 8;

  {Use at most 256 bits}
  if klen>31 then move(key^,lkey,32)
  else begin
    fillchar(lkey, 32,0);
    move(key^,lkey,klen);
    lkey[klen] := 1;
  end;

  tt   := w[0] xor w[3] xor w[5] xor w[7] xor (longint($9E3779B9) xor (0));
  w[0] := (tt shl 11) or (tt shr 21);
  tt   := w[1] xor w[4] xor w[6] xor w[0] xor (longint($9E3779B9) xor (0 + 1));
  w[1] := (tt shl 11) or (tt shr 21);
  tt   := w[2] xor w[5] xor w[7] xor w[1] xor (longint($9E3779B9) xor (0 + 2));
  w[2] := (tt shl 11) or (tt shr 21);
  tt   := w[3] xor w[6] xor w[0] xor w[2] xor (longint($9E3779B9) xor (0 + 3));
  w[3] := (tt shl 11) or (tt shr 21);
  r0   := w[0];
  r1   := w[1];
  r2   := w[2];
  r3   := w[3];
  r4   := r0;
  r0   := r0  or r3;
  r3   := r3 xor r1;
  r1   := r1 and r4;
  r4   := r4 xor r2;
  r2   := r2 xor r3;
  r3   := r3 and r0;
  r4   := r4  or r1;
  r3   := r3 xor r4;
  r0   := r0 xor r1;
  r4   := r4 and r0;
  r1   := r1 xor r3;
  r4   := r4 xor r2;
  r1   := r1  or r0;
  r1   := r1 xor r2;
  r0   := r0 xor r3;
  r2   := r1;
  r1   := r1  or r3;
  r1   := r1 xor r0;
  ctx.RndKey[0] := r1;
  ctx.RndKey[1] := r2;
  ctx.RndKey[2] := r3;
  ctx.RndKey[3] := r4;

  tt   := w[4] xor w[7] xor w[1] xor w[3] xor (longint($9E3779B9) xor (4));
  w[4] := (tt shl 11) or (tt shr 21);
  tt   := w[5] xor w[0] xor w[2] xor w[4] xor (longint($9E3779B9) xor (4 + 1));
  w[5] := (tt shl 11) or (tt shr 21);
  tt   := w[6] xor w[1] xor w[3] xor w[5] xor (longint($9E3779B9) xor (4 + 2));
  w[6] := (tt shl 11) or (tt shr 21);
  tt   := w[7] xor w[2] xor w[4] xor w[6] xor (longint($9E3779B9) xor (4 + 3));
  w[7] := (tt shl 11) or (tt shr 21);
  r0   := w[4];
  r1   := w[5];
  r2   := w[6];
  r3   := w[7];
  r4   := r0;
  r0   := r0 and  r2;
  r0   := r0 xor r3;
  r2   := r2 xor r1;
  r2   := r2 xor r0;
  r3   := r3  or r4;
  r3   := r3 xor r1;
  r4   := r4 xor r2;
  r1   := r3;
  r3   := r3  or r4;
  r3   := r3 xor r0;
  r0   := r0 and  r1;
  r4   := r4 xor r0;
  r1   := r1 xor r3;
  r1   := r1 xor r4;
  r4   := not r4;
  ctx.RndKey[4] := r2;
  ctx.RndKey[5] := r3;
  ctx.RndKey[6] := r1;
  ctx.RndKey[7] := r4;

  tt   := w[0] xor w[3] xor w[5] xor w[7] xor (longint($9E3779B9) xor (8));
  w[0] := (tt shl 11) or (tt shr 21);
  tt   := w[1] xor w[4] xor w[6] xor w[0] xor (longint($9E3779B9) xor (8 + 1));
  w[1] := (tt shl 11) or (tt shr 21);
  tt   := w[2] xor w[5] xor w[7] xor w[1] xor (longint($9E3779B9) xor (8 + 2));
  w[2] := (tt shl 11) or (tt shr 21);
  tt   := w[3] xor w[6] xor w[0] xor w[2] xor (longint($9E3779B9) xor (8 + 3));
  w[3] := (tt shl 11) or (tt shr 21);
  r0   := w[0];
  r1   := w[1];
  r2   := w[2];
  r3   := w[3];
  r0   := not r0;
  r2   := not r2;
  r4   := r0;
  r0   := r0 and  r1;
  r2   := r2 xor r0;
  r0   := r0  or r3;
  r3   := r3 xor r2;
  r1   := r1 xor r0;
  r0   := r0 xor r4;
  r4   := r4  or r1;
  r1   := r1 xor r3;
  r2   := r2  or r0;
  r2   := r2 and r4;
  r0   := r0 xor r1;
  r1   := r1 and r2;
  r1   := r1 xor r0;
  r0   := r0 and  r2;
  r0   := r0 xor r4;
  ctx.RndKey[8] := r2;
  ctx.RndKey[9] := r0;
  ctx.RndKey[10] := r3;
  ctx.RndKey[11] := r1;

  tt   := w[4] xor w[7] xor w[1] xor w[3] xor (longint($9E3779B9) xor (12));
  w[4] := (tt shl 11) or (tt shr 21);
  tt   := w[5] xor w[0] xor w[2] xor w[4] xor (longint($9E3779B9) xor (12 + 1));
  w[5] := (tt shl 11) or (tt shr 21);
  tt   := w[6] xor w[1] xor w[3] xor w[5] xor (longint($9E3779B9) xor (12 + 2));
  w[6] := (tt shl 11) or (tt shr 21);
  tt   := w[7] xor w[2] xor w[4] xor w[6] xor (longint($9E3779B9) xor (12 + 3));
  w[7] := (tt shl 11) or (tt shr 21);
  r0   := w[4];
  r1   := w[5];
  r2   := w[6];
  r3   := w[7];
  r3   := r3 xor r0;
  r4   := r1;
  r1   := r1 and r3;
  r4   := r4 xor r2;
  r1   := r1 xor r0;
  r0   := r0  or r3;
  r0   := r0 xor r4;
  r4   := r4 xor r3;
  r3   := r3 xor r2;
  r2   := r2  or r1;
  r2   := r2 xor r4;
  r4   := not r4;
  r4   := r4  or r1;
  r1   := r1 xor r3;
  r1   := r1 xor r4;
  r3   := r3  or r0;
  r1   := r1 xor r3;
  r4   := r4 xor r3;
  ctx.RndKey[12] := r1;
  ctx.RndKey[13] := r4;
  ctx.RndKey[14] := r2;
  ctx.RndKey[15] := r0;

  tt   := w[0] xor w[3] xor w[5] xor w[7] xor (longint($9E3779B9) xor (16));
  w[0] := (tt shl 11) or (tt shr 21);
  tt   := w[1] xor w[4] xor w[6] xor w[0] xor (longint($9E3779B9) xor (16 + 1));
  w[1] := (tt shl 11) or (tt shr 21);
  tt   := w[2] xor w[5] xor w[7] xor w[1] xor (longint($9E3779B9) xor (16 + 2));
  w[2] := (tt shl 11) or (tt shr 21);
  tt   := w[3] xor w[6] xor w[0] xor w[2] xor (longint($9E3779B9) xor (16 + 3));
  w[3] := (tt shl 11) or (tt shr 21);
  r0   := w[0];
  r1   := w[1];
  r2   := w[2];
  r3   := w[3];
  r4   := r1;
  r1   := r1  or r2;
  r1   := r1 xor r3;
  r4   := r4 xor r2;
  r2   := r2 xor r1;
  r3   := r3  or r4;
  r3   := r3 and r0;
  r4   := r4 xor r2;
  r3   := r3 xor r1;
  r1   := r1  or r4;
  r1   := r1 xor r0;
  r0   := r0  or r4;
  r0   := r0 xor r2;
  r1   := r1 xor r4;
  r2   := r2 xor r1;
  r1   := r1 and r0;
  r1   := r1 xor r4;
  r2   := not r2;
  r2   := r2  or r0;
  r4   := r4 xor r2;
  ctx.RndKey[16] := r4;
  ctx.RndKey[17] := r3;
  ctx.RndKey[18] := r1;
  ctx.RndKey[19] := r0;

  tt   := w[4] xor w[7] xor w[1] xor w[3] xor (longint($9E3779B9) xor (20));
  w[4] := (tt shl 11) or (tt shr 21);
  tt   := w[5] xor w[0] xor w[2] xor w[4] xor (longint($9E3779B9) xor (20 + 1));
  w[5] := (tt shl 11) or (tt shr 21);
  tt   := w[6] xor w[1] xor w[3] xor w[5] xor (longint($9E3779B9) xor (20 + 2));
  w[6] := (tt shl 11) or (tt shr 21);
  tt   := w[7] xor w[2] xor w[4] xor w[6] xor (longint($9E3779B9) xor (20 + 3));
  w[7] := (tt shl 11) or (tt shr 21);
  r0   := w[4];
  r1   := w[5];
  r2   := w[6];
  r3   := w[7];
  r2   := not r2;
  r4   := r3;
  r3   := r3 and r0;
  r0   := r0 xor r4;
  r3   := r3 xor r2;
  r2   := r2  or r4;
  r1   := r1 xor r3;
  r2   := r2 xor r0;
  r0   := r0  or r1;
  r2   := r2 xor r1;
  r4   := r4 xor r0;
  r0   := r0  or r3;
  r0   := r0 xor r2;
  r4   := r4 xor r3;
  r4   := r4 xor r0;
  r3   := not r3;
  r2   := r2 and r4;
  r2   := r2 xor r3;
  ctx.RndKey[20] := r0;
  ctx.RndKey[21] := r1;
  ctx.RndKey[22] := r4;
  ctx.RndKey[23] := r2;

  tt   := w[0] xor w[3] xor w[5] xor w[7] xor (longint($9E3779B9) xor (24));
  w[0] := (tt shl 11) or (tt shr 21);
  tt   := w[1] xor w[4] xor w[6] xor w[0] xor (longint($9E3779B9) xor (24 + 1));
  w[1] := (tt shl 11) or (tt shr 21);
  tt   := w[2] xor w[5] xor w[7] xor w[1] xor (longint($9E3779B9) xor (24 + 2));
  w[2] := (tt shl 11) or (tt shr 21);
  tt   := w[3] xor w[6] xor w[0] xor w[2] xor (longint($9E3779B9) xor (24 + 3));
  w[3] := (tt shl 11) or (tt shr 21);
  r0   := w[0];
  r1   := w[1];
  r2   := w[2];
  r3   := w[3];
  r0   := r0 xor r1;
  r1   := r1 xor r3;
  r3   := not r3;
  r4   := r1;
  r1   := r1 and r0;
  r2   := r2 xor r3;
  r1   := r1 xor r2;
  r2   := r2  or r4;
  r4   := r4 xor r3;
  r3   := r3 and r1;
  r3   := r3 xor r0;
  r4   := r4 xor r1;
  r4   := r4 xor r2;
  r2   := r2 xor r0;
  r0   := r0 and  r3;
  r2   := not r2;
  r0   := r0 xor r4;
  r4   := r4  or r3;
  r2   := r2 xor r4;
  ctx.RndKey[24] := r1;
  ctx.RndKey[25] := r3;
  ctx.RndKey[26] := r0;
  ctx.RndKey[27] := r2;

  tt   := w[4] xor w[7] xor w[1] xor w[3] xor (longint($9E3779B9) xor (28));
  w[4] := (tt shl 11) or (tt shr 21);
  tt   := w[5] xor w[0] xor w[2] xor w[4] xor (longint($9E3779B9) xor (28 + 1));
  w[5] := (tt shl 11) or (tt shr 21);
  tt   := w[6] xor w[1] xor w[3] xor w[5] xor (longint($9E3779B9) xor (28 + 2));
  w[6] := (tt shl 11) or (tt shr 21);
  tt   := w[7] xor w[2] xor w[4] xor w[6] xor (longint($9E3779B9) xor (28 + 3));
  w[7] := (tt shl 11) or (tt shr 21);
  r0   := w[4];
  r1   := w[5];
  r2   := w[6];
  r3   := w[7];
  r1   := r1 xor r3;
  r3   := not r3;
  r2   := r2 xor r3;
  r3   := r3 xor r0;
  r4   := r1;
  r1   := r1 and r3;
  r1   := r1 xor r2;
  r4   := r4 xor r3;
  r0   := r0 xor r4;
  r2   := r2 and r4;
  r2   := r2 xor r0;
  r0   := r0 and  r1;
  r3   := r3 xor r0;
  r4   := r4  or r1;
  r4   := r4 xor r0;
  r0   := r0  or r3;
  r0   := r0 xor r2;
  r2   := r2 and r3;
  r0   := not r0;
  r4   := r4 xor r2;
  ctx.RndKey[28] := r1;
  ctx.RndKey[29] := r4;
  ctx.RndKey[30] := r0;
  ctx.RndKey[31] := r3;

  tt   := w[0] xor w[3] xor w[5] xor w[7] xor (longint($9E3779B9) xor (32));
  w[0] := (tt shl 11) or (tt shr 21);
  tt   := w[1] xor w[4] xor w[6] xor w[0] xor (longint($9E3779B9) xor (32 + 1));
  w[1] := (tt shl 11) or (tt shr 21);
  tt   := w[2] xor w[5] xor w[7] xor w[1] xor (longint($9E3779B9) xor (32 + 2));
  w[2] := (tt shl 11) or (tt shr 21);
  tt   := w[3] xor w[6] xor w[0] xor w[2] xor (longint($9E3779B9) xor (32 + 3));
  w[3] := (tt shl 11) or (tt shr 21);
  r0   := w[0];
  r1   := w[1];
  r2   := w[2];
  r3   := w[3];
  r4   := r0;
  r0   := r0  or r3;
  r3   := r3 xor r1;
  r1   := r1 and r4;
  r4   := r4 xor r2;
  r2   := r2 xor r3;
  r3   := r3 and r0;
  r4   := r4  or r1;
  r3   := r3 xor r4;
  r0   := r0 xor r1;
  r4   := r4 and r0;
  r1   := r1 xor r3;
  r4   := r4 xor r2;
  r1   := r1  or r0;
  r1   := r1 xor r2;
  r0   := r0 xor r3;
  r2   := r1;
  r1   := r1  or r3;
  r1   := r1 xor r0;
  ctx.RndKey[32] := r1;
  ctx.RndKey[33] := r2;
  ctx.RndKey[34] := r3;
  ctx.RndKey[35] := r4;

  tt   := w[4] xor w[7] xor w[1] xor w[3] xor (longint($9E3779B9) xor (36));
  w[4] := (tt shl 11) or (tt shr 21);
  tt   := w[5] xor w[0] xor w[2] xor w[4] xor (longint($9E3779B9) xor (36 + 1));
  w[5] := (tt shl 11) or (tt shr 21);
  tt   := w[6] xor w[1] xor w[3] xor w[5] xor (longint($9E3779B9) xor (36 + 2));
  w[6] := (tt shl 11) or (tt shr 21);
  tt   := w[7] xor w[2] xor w[4] xor w[6] xor (longint($9E3779B9) xor (36 + 3));
  w[7] := (tt shl 11) or (tt shr 21);
  r0   := w[4];
  r1   := w[5];
  r2   := w[6];
  r3   := w[7];
  r4   := r0;
  r0   := r0 and  r2;
  r0   := r0 xor r3;
  r2   := r2 xor r1;
  r2   := r2 xor r0;
  r3   := r3  or r4;
  r3   := r3 xor r1;
  r4   := r4 xor r2;
  r1   := r3;
  r3   := r3  or r4;
  r3   := r3 xor r0;
  r0   := r0 and  r1;
  r4   := r4 xor r0;
  r1   := r1 xor r3;
  r1   := r1 xor r4;
  r4   := not r4;
  ctx.RndKey[36] := r2;
  ctx.RndKey[37] := r3;
  ctx.RndKey[38] := r1;
  ctx.RndKey[39] := r4;

  tt   := w[0] xor w[3] xor w[5] xor w[7] xor (longint($9E3779B9) xor (40));
  w[0] := (tt shl 11) or (tt shr 21);
  tt   := w[1] xor w[4] xor w[6] xor w[0] xor (longint($9E3779B9) xor (40 + 1));
  w[1] := (tt shl 11) or (tt shr 21);
  tt   := w[2] xor w[5] xor w[7] xor w[1] xor (longint($9E3779B9) xor (40 + 2));
  w[2] := (tt shl 11) or (tt shr 21);
  tt   := w[3] xor w[6] xor w[0] xor w[2] xor (longint($9E3779B9) xor (40 + 3));
  w[3] := (tt shl 11) or (tt shr 21);
  r0   := w[0];
  r1   := w[1];
  r2   := w[2];
  r3   := w[3];
  r0   := not r0;
  r2   := not r2;
  r4   := r0;
  r0   := r0 and  r1;
  r2   := r2 xor r0;
  r0   := r0  or r3;
  r3   := r3 xor r2;
  r1   := r1 xor r0;
  r0   := r0 xor r4;
  r4   := r4  or r1;
  r1   := r1 xor r3;
  r2   := r2  or r0;
  r2   := r2 and r4;
  r0   := r0 xor r1;
  r1   := r1 and r2;
  r1   := r1 xor r0;
  r0   := r0 and  r2;
  r0   := r0 xor r4;
  ctx.RndKey[40] := r2;
  ctx.RndKey[41] := r0;
  ctx.RndKey[42] := r3;
  ctx.RndKey[43] := r1;

  tt   := w[4] xor w[7] xor w[1] xor w[3] xor (longint($9E3779B9) xor (44));
  w[4] := (tt shl 11) or (tt shr 21);
  tt   := w[5] xor w[0] xor w[2] xor w[4] xor (longint($9E3779B9) xor (44 + 1));
  w[5] := (tt shl 11) or (tt shr 21);
  tt   := w[6] xor w[1] xor w[3] xor w[5] xor (longint($9E3779B9) xor (44 + 2));
  w[6] := (tt shl 11) or (tt shr 21);
  tt   := w[7] xor w[2] xor w[4] xor w[6] xor (longint($9E3779B9) xor (44 + 3));
  w[7] := (tt shl 11) or (tt shr 21);
  r0   := w[4];
  r1   := w[5];
  r2   := w[6];
  r3   := w[7];
  r3   := r3 xor r0;
  r4   := r1;
  r1   := r1 and r3;
  r4   := r4 xor r2;
  r1   := r1 xor r0;
  r0   := r0  or r3;
  r0   := r0 xor r4;
  r4   := r4 xor r3;
  r3   := r3 xor r2;
  r2   := r2  or r1;
  r2   := r2 xor r4;
  r4   := not r4;
  r4   := r4  or r1;
  r1   := r1 xor r3;
  r1   := r1 xor r4;
  r3   := r3  or r0;
  r1   := r1 xor r3;
  r4   := r4 xor r3;
  ctx.RndKey[44] := r1;
  ctx.RndKey[45] := r4;
  ctx.RndKey[46] := r2;
  ctx.RndKey[47] := r0;

  tt   := w[0] xor w[3] xor w[5] xor w[7] xor (longint($9E3779B9) xor (48));
  w[0] := (tt shl 11) or (tt shr 21);
  tt   := w[1] xor w[4] xor w[6] xor w[0] xor (longint($9E3779B9) xor (48 + 1));
  w[1] := (tt shl 11) or (tt shr 21);
  tt   := w[2] xor w[5] xor w[7] xor w[1] xor (longint($9E3779B9) xor (48 + 2));
  w[2] := (tt shl 11) or (tt shr 21);
  tt   := w[3] xor w[6] xor w[0] xor w[2] xor (longint($9E3779B9) xor (48 + 3));
  w[3] := (tt shl 11) or (tt shr 21);
  r0   := w[0];
  r1   := w[1];
  r2   := w[2];
  r3   := w[3];
  r4   := r1;
  r1   := r1  or r2;
  r1   := r1 xor r3;
  r4   := r4 xor r2;
  r2   := r2 xor r1;
  r3   := r3  or r4;
  r3   := r3 and r0;
  r4   := r4 xor r2;
  r3   := r3 xor r1;
  r1   := r1  or r4;
  r1   := r1 xor r0;
  r0   := r0  or r4;
  r0   := r0 xor r2;
  r1   := r1 xor r4;
  r2   := r2 xor r1;
  r1   := r1 and r0;
  r1   := r1 xor r4;
  r2   := not r2;
  r2   := r2  or r0;
  r4   := r4 xor r2;
  ctx.RndKey[48] := r4;
  ctx.RndKey[49] := r3;
  ctx.RndKey[50] := r1;
  ctx.RndKey[51] := r0;

  tt   := w[4] xor w[7] xor w[1] xor w[3] xor (longint($9E3779B9) xor (52));
  w[4] := (tt shl 11) or (tt shr 21);
  tt   := w[5] xor w[0] xor w[2] xor w[4] xor (longint($9E3779B9) xor (52 + 1));
  w[5] := (tt shl 11) or (tt shr 21);
  tt   := w[6] xor w[1] xor w[3] xor w[5] xor (longint($9E3779B9) xor (52 + 2));
  w[6] := (tt shl 11) or (tt shr 21);
  tt   := w[7] xor w[2] xor w[4] xor w[6] xor (longint($9E3779B9) xor (52 + 3));
  w[7] := (tt shl 11) or (tt shr 21);
  r0   := w[4];
  r1   := w[5];
  r2   := w[6];
  r3   := w[7];
  r2   := not r2;
  r4   := r3;
  r3   := r3 and r0;
  r0   := r0 xor r4;
  r3   := r3 xor r2;
  r2   := r2  or r4;
  r1   := r1 xor r3;
  r2   := r2 xor r0;
  r0   := r0  or r1;
  r2   := r2 xor r1;
  r4   := r4 xor r0;
  r0   := r0  or r3;
  r0   := r0 xor r2;
  r4   := r4 xor r3;
  r4   := r4 xor r0;
  r3   := not r3;
  r2   := r2 and r4;
  r2   := r2 xor r3;
  ctx.RndKey[52] := r0;
  ctx.RndKey[53] := r1;
  ctx.RndKey[54] := r4;
  ctx.RndKey[55] := r2;

  tt   := w[0] xor w[3] xor w[5] xor w[7] xor (longint($9E3779B9) xor (56));
  w[0] := (tt shl 11) or (tt shr 21);
  tt   := w[1] xor w[4] xor w[6] xor w[0] xor (longint($9E3779B9) xor (56 + 1));
  w[1] := (tt shl 11) or (tt shr 21);
  tt   := w[2] xor w[5] xor w[7] xor w[1] xor (longint($9E3779B9) xor (56 + 2));
  w[2] := (tt shl 11) or (tt shr 21);
  tt   := w[3] xor w[6] xor w[0] xor w[2] xor (longint($9E3779B9) xor (56 + 3));
  w[3] := (tt shl 11) or (tt shr 21);
  r0   := w[0];
  r1   := w[1];
  r2   := w[2];
  r3   := w[3];
  r0   := r0 xor r1;
  r1   := r1 xor r3;
  r3   := not r3;
  r4   := r1;
  r1   := r1 and r0;
  r2   := r2 xor r3;
  r1   := r1 xor r2;
  r2   := r2  or r4;
  r4   := r4 xor r3;
  r3   := r3 and r1;
  r3   := r3 xor r0;
  r4   := r4 xor r1;
  r4   := r4 xor r2;
  r2   := r2 xor r0;
  r0   := r0 and  r3;
  r2   := not r2;
  r0   := r0 xor r4;
  r4   := r4  or r3;
  r2   := r2 xor r4;
  ctx.RndKey[56] := r1;
  ctx.RndKey[57] := r3;
  ctx.RndKey[58] := r0;
  ctx.RndKey[59] := r2;

  tt   := w[4] xor w[7] xor w[1] xor w[3] xor (longint($9E3779B9) xor (60));
  w[4] := (tt shl 11) or (tt shr 21);
  tt   := w[5] xor w[0] xor w[2] xor w[4] xor (longint($9E3779B9) xor (60 + 1));
  w[5] := (tt shl 11) or (tt shr 21);
  tt   := w[6] xor w[1] xor w[3] xor w[5] xor (longint($9E3779B9) xor (60 + 2));
  w[6] := (tt shl 11) or (tt shr 21);
  tt   := w[7] xor w[2] xor w[4] xor w[6] xor (longint($9E3779B9) xor (60 + 3));
  w[7] := (tt shl 11) or (tt shr 21);
  r0   := w[4];
  r1   := w[5];
  r2   := w[6];
  r3   := w[7];
  r1   := r1 xor r3;
  r3   := not r3;
  r2   := r2 xor r3;
  r3   := r3 xor r0;
  r4   := r1;
  r1   := r1 and r3;
  r1   := r1 xor r2;
  r4   := r4 xor r3;
  r0   := r0 xor r4;
  r2   := r2 and r4;
  r2   := r2 xor r0;
  r0   := r0 and  r1;
  r3   := r3 xor r0;
  r4   := r4  or r1;
  r4   := r4 xor r0;
  r0   := r0  or r3;
  r0   := r0 xor r2;
  r2   := r2 and r3;
  r0   := not r0;
  r4   := r4 xor r2;
  ctx.RndKey[60] := r1;
  ctx.RndKey[61] := r4;
  ctx.RndKey[62] := r0;
  ctx.RndKey[63] := r3;

  tt   := w[0] xor w[3] xor w[5] xor w[7] xor (longint($9E3779B9) xor (64));
  w[0] := (tt shl 11) or (tt shr 21);
  tt   := w[1] xor w[4] xor w[6] xor w[0] xor (longint($9E3779B9) xor (64 + 1));
  w[1] := (tt shl 11) or (tt shr 21);
  tt   := w[2] xor w[5] xor w[7] xor w[1] xor (longint($9E3779B9) xor (64 + 2));
  w[2] := (tt shl 11) or (tt shr 21);
  tt   := w[3] xor w[6] xor w[0] xor w[2] xor (longint($9E3779B9) xor (64 + 3));
  w[3] := (tt shl 11) or (tt shr 21);
  r0   := w[0];
  r1   := w[1];
  r2   := w[2];
  r3   := w[3];
  r4   := r0;
  r0   := r0  or r3;
  r3   := r3 xor r1;
  r1   := r1 and r4;
  r4   := r4 xor r2;
  r2   := r2 xor r3;
  r3   := r3 and r0;
  r4   := r4  or r1;
  r3   := r3 xor r4;
  r0   := r0 xor r1;
  r4   := r4 and r0;
  r1   := r1 xor r3;
  r4   := r4 xor r2;
  r1   := r1  or r0;
  r1   := r1 xor r2;
  r0   := r0 xor r3;
  r2   := r1;
  r1   := r1  or r3;
  r1   := r1 xor r0;
  ctx.RndKey[64] := r1;
  ctx.RndKey[65] := r2;
  ctx.RndKey[66] := r3;
  ctx.RndKey[67] := r4;

  tt   := w[4] xor w[7] xor w[1] xor w[3] xor (longint($9E3779B9) xor (68));
  w[4] := (tt shl 11) or (tt shr 21);
  tt   := w[5] xor w[0] xor w[2] xor w[4] xor (longint($9E3779B9) xor (68 + 1));
  w[5] := (tt shl 11) or (tt shr 21);
  tt   := w[6] xor w[1] xor w[3] xor w[5] xor (longint($9E3779B9) xor (68 + 2));
  w[6] := (tt shl 11) or (tt shr 21);
  tt   := w[7] xor w[2] xor w[4] xor w[6] xor (longint($9E3779B9) xor (68 + 3));
  w[7] := (tt shl 11) or (tt shr 21);
  r0   := w[4];
  r1   := w[5];
  r2   := w[6];
  r3   := w[7];
  r4   := r0;
  r0   := r0 and  r2;
  r0   := r0 xor r3;
  r2   := r2 xor r1;
  r2   := r2 xor r0;
  r3   := r3  or r4;
  r3   := r3 xor r1;
  r4   := r4 xor r2;
  r1   := r3;
  r3   := r3  or r4;
  r3   := r3 xor r0;
  r0   := r0 and  r1;
  r4   := r4 xor r0;
  r1   := r1 xor r3;
  r1   := r1 xor r4;
  r4   := not r4;
  ctx.RndKey[68] := r2;
  ctx.RndKey[69] := r3;
  ctx.RndKey[70] := r1;
  ctx.RndKey[71] := r4;

  tt   := w[0] xor w[3] xor w[5] xor w[7] xor (longint($9E3779B9) xor (72));
  w[0] := (tt shl 11) or (tt shr 21);
  tt   := w[1] xor w[4] xor w[6] xor w[0] xor (longint($9E3779B9) xor (72 + 1));
  w[1] := (tt shl 11) or (tt shr 21);
  tt   := w[2] xor w[5] xor w[7] xor w[1] xor (longint($9E3779B9) xor (72 + 2));
  w[2] := (tt shl 11) or (tt shr 21);
  tt   := w[3] xor w[6] xor w[0] xor w[2] xor (longint($9E3779B9) xor (72 + 3));
  w[3] := (tt shl 11) or (tt shr 21);
  r0   := w[0];
  r1   := w[1];
  r2   := w[2];
  r3   := w[3];
  r0   := not r0;
  r2   := not r2;
  r4   := r0;
  r0   := r0 and  r1;
  r2   := r2 xor r0;
  r0   := r0  or r3;
  r3   := r3 xor r2;
  r1   := r1 xor r0;
  r0   := r0 xor r4;
  r4   := r4  or r1;
  r1   := r1 xor r3;
  r2   := r2  or r0;
  r2   := r2 and r4;
  r0   := r0 xor r1;
  r1   := r1 and r2;
  r1   := r1 xor r0;
  r0   := r0 and  r2;
  r0   := r0 xor r4;
  ctx.RndKey[72] := r2;
  ctx.RndKey[73] := r0;
  ctx.RndKey[74] := r3;
  ctx.RndKey[75] := r1;

  tt   := w[4] xor w[7] xor w[1] xor w[3] xor (longint($9E3779B9) xor (76));
  w[4] := (tt shl 11) or (tt shr 21);
  tt   := w[5] xor w[0] xor w[2] xor w[4] xor (longint($9E3779B9) xor (76 + 1));
  w[5] := (tt shl 11) or (tt shr 21);
  tt   := w[6] xor w[1] xor w[3] xor w[5] xor (longint($9E3779B9) xor (76 + 2));
  w[6] := (tt shl 11) or (tt shr 21);
  tt   := w[7] xor w[2] xor w[4] xor w[6] xor (longint($9E3779B9) xor (76 + 3));
  w[7] := (tt shl 11) or (tt shr 21);
  r0   := w[4];
  r1   := w[5];
  r2   := w[6];
  r3   := w[7];
  r3   := r3 xor r0;
  r4   := r1;
  r1   := r1 and r3;
  r4   := r4 xor r2;
  r1   := r1 xor r0;
  r0   := r0  or r3;
  r0   := r0 xor r4;
  r4   := r4 xor r3;
  r3   := r3 xor r2;
  r2   := r2  or r1;
  r2   := r2 xor r4;
  r4   := not r4;
  r4   := r4  or r1;
  r1   := r1 xor r3;
  r1   := r1 xor r4;
  r3   := r3  or r0;
  r1   := r1 xor r3;
  r4   := r4 xor r3;
  ctx.RndKey[76] := r1;
  ctx.RndKey[77] := r4;
  ctx.RndKey[78] := r2;
  ctx.RndKey[79] := r0;

  tt   := w[0] xor w[3] xor w[5] xor w[7] xor (longint($9E3779B9) xor (80));
  w[0] := (tt shl 11) or (tt shr 21);
  tt   := w[1] xor w[4] xor w[6] xor w[0] xor (longint($9E3779B9) xor (80 + 1));
  w[1] := (tt shl 11) or (tt shr 21);
  tt   := w[2] xor w[5] xor w[7] xor w[1] xor (longint($9E3779B9) xor (80 + 2));
  w[2] := (tt shl 11) or (tt shr 21);
  tt   := w[3] xor w[6] xor w[0] xor w[2] xor (longint($9E3779B9) xor (80 + 3));
  w[3] := (tt shl 11) or (tt shr 21);
  r0   := w[0];
  r1   := w[1];
  r2   := w[2];
  r3   := w[3];
  r4   := r1;
  r1   := r1  or r2;
  r1   := r1 xor r3;
  r4   := r4 xor r2;
  r2   := r2 xor r1;
  r3   := r3  or r4;
  r3   := r3 and r0;
  r4   := r4 xor r2;
  r3   := r3 xor r1;
  r1   := r1  or r4;
  r1   := r1 xor r0;
  r0   := r0  or r4;
  r0   := r0 xor r2;
  r1   := r1 xor r4;
  r2   := r2 xor r1;
  r1   := r1 and r0;
  r1   := r1 xor r4;
  r2   := not r2;
  r2   := r2  or r0;
  r4   := r4 xor r2;
  ctx.RndKey[80] := r4;
  ctx.RndKey[81] := r3;
  ctx.RndKey[82] := r1;
  ctx.RndKey[83] := r0;

  tt   := w[4] xor w[7] xor w[1] xor w[3] xor (longint($9E3779B9) xor (84));
  w[4] := (tt shl 11) or (tt shr 21);
  tt   := w[5] xor w[0] xor w[2] xor w[4] xor (longint($9E3779B9) xor (84 + 1));
  w[5] := (tt shl 11) or (tt shr 21);
  tt   := w[6] xor w[1] xor w[3] xor w[5] xor (longint($9E3779B9) xor (84 + 2));
  w[6] := (tt shl 11) or (tt shr 21);
  tt   := w[7] xor w[2] xor w[4] xor w[6] xor (longint($9E3779B9) xor (84 + 3));
  w[7] := (tt shl 11) or (tt shr 21);
  r0   := w[4];
  r1   := w[5];
  r2   := w[6];
  r3   := w[7];
  r2   := not r2;
  r4   := r3;
  r3   := r3 and r0;
  r0   := r0 xor r4;
  r3   := r3 xor r2;
  r2   := r2  or r4;
  r1   := r1 xor r3;
  r2   := r2 xor r0;
  r0   := r0  or r1;
  r2   := r2 xor r1;
  r4   := r4 xor r0;
  r0   := r0  or r3;
  r0   := r0 xor r2;
  r4   := r4 xor r3;
  r4   := r4 xor r0;
  r3   := not r3;
  r2   := r2 and r4;
  r2   := r2 xor r3;
  ctx.RndKey[84] := r0;
  ctx.RndKey[85] := r1;
  ctx.RndKey[86] := r4;
  ctx.RndKey[87] := r2;

  tt   := w[0] xor w[3] xor w[5] xor w[7] xor (longint($9E3779B9) xor (88));
  w[0] := (tt shl 11) or (tt shr 21);
  tt   := w[1] xor w[4] xor w[6] xor w[0] xor (longint($9E3779B9) xor (88 + 1));
  w[1] := (tt shl 11) or (tt shr 21);
  tt   := w[2] xor w[5] xor w[7] xor w[1] xor (longint($9E3779B9) xor (88 + 2));
  w[2] := (tt shl 11) or (tt shr 21);
  tt   := w[3] xor w[6] xor w[0] xor w[2] xor (longint($9E3779B9) xor (88 + 3));
  w[3] := (tt shl 11) or (tt shr 21);
  r0   := w[0];
  r1   := w[1];
  r2   := w[2];
  r3   := w[3];
  r0   := r0 xor r1;
  r1   := r1 xor r3;
  r3   := not r3;
  r4   := r1;
  r1   := r1 and r0;
  r2   := r2 xor r3;
  r1   := r1 xor r2;
  r2   := r2  or r4;
  r4   := r4 xor r3;
  r3   := r3 and r1;
  r3   := r3 xor r0;
  r4   := r4 xor r1;
  r4   := r4 xor r2;
  r2   := r2 xor r0;
  r0   := r0 and  r3;
  r2   := not r2;
  r0   := r0 xor r4;
  r4   := r4  or r3;
  r2   := r2 xor r4;
  ctx.RndKey[88] := r1;
  ctx.RndKey[89] := r3;
  ctx.RndKey[90] := r0;
  ctx.RndKey[91] := r2;

  tt   := w[4] xor w[7] xor w[1] xor w[3] xor (longint($9E3779B9) xor (92));
  w[4] := (tt shl 11) or (tt shr 21);
  tt   := w[5] xor w[0] xor w[2] xor w[4] xor (longint($9E3779B9) xor (92 + 1));
  w[5] := (tt shl 11) or (tt shr 21);
  tt   := w[6] xor w[1] xor w[3] xor w[5] xor (longint($9E3779B9) xor (92 + 2));
  w[6] := (tt shl 11) or (tt shr 21);
  tt   := w[7] xor w[2] xor w[4] xor w[6] xor (longint($9E3779B9) xor (92 + 3));
  w[7] := (tt shl 11) or (tt shr 21);
  r0   := w[4];
  r1   := w[5];
  r2   := w[6];
  r3   := w[7];
  r1   := r1 xor r3;
  r3   := not r3;
  r2   := r2 xor r3;
  r3   := r3 xor r0;
  r4   := r1;
  r1   := r1 and r3;
  r1   := r1 xor r2;
  r4   := r4 xor r3;
  r0   := r0 xor r4;
  r2   := r2 and r4;
  r2   := r2 xor r0;
  r0   := r0 and  r1;
  r3   := r3 xor r0;
  r4   := r4  or r1;
  r4   := r4 xor r0;
  r0   := r0  or r3;
  r0   := r0 xor r2;
  r2   := r2 and r3;
  r0   := not r0;
  r4   := r4 xor r2;
  ctx.RndKey[92] := r1;
  ctx.RndKey[93] := r4;
  ctx.RndKey[94] := r0;
  ctx.RndKey[95] := r3;

  tt   := w[0] xor w[3] xor w[5] xor w[7] xor (longint($9E3779B9) xor (96));
  w[0] := (tt shl 11) or (tt shr 21);
  tt   := w[1] xor w[4] xor w[6] xor w[0] xor (longint($9E3779B9) xor (96 + 1));
  w[1] := (tt shl 11) or (tt shr 21);
  tt   := w[2] xor w[5] xor w[7] xor w[1] xor (longint($9E3779B9) xor (96 + 2));
  w[2] := (tt shl 11) or (tt shr 21);
  tt   := w[3] xor w[6] xor w[0] xor w[2] xor (longint($9E3779B9) xor (96 + 3));
  w[3] := (tt shl 11) or (tt shr 21);
  r0   := w[0];
  r1   := w[1];
  r2   := w[2];
  r3   := w[3];
  r4   := r0;
  r0   := r0  or r3;
  r3   := r3 xor r1;
  r1   := r1 and r4;
  r4   := r4 xor r2;
  r2   := r2 xor r3;
  r3   := r3 and r0;
  r4   := r4  or r1;
  r3   := r3 xor r4;
  r0   := r0 xor r1;
  r4   := r4 and r0;
  r1   := r1 xor r3;
  r4   := r4 xor r2;
  r1   := r1  or r0;
  r1   := r1 xor r2;
  r0   := r0 xor r3;
  r2   := r1;
  r1   := r1  or r3;
  r1   := r1 xor r0;
  ctx.RndKey[96] := r1;
  ctx.RndKey[97] := r2;
  ctx.RndKey[98] := r3;
  ctx.RndKey[99] := r4;
end;


{---------------------------------------------------------------------------}
procedure sose_ivsetup(var ctx: sose_ctx; IV: pointer);
  {-IV setup, 128 bits of IV^ are used. It is the user's responsibility to }
  { supply least 128 accessible IV bits. After having called sose_keysetup,}
  { the user is allowed to call sose_ivsetup different times in order to   }
  { encrypt/decrypt different messages with the same key but different IV's}
var
  r0, r1, r2, r3, r4: longint;
begin
  r0 := PWA4(IV)^[0];
  r1 := PWA4(IV)^[1];
  r2 := PWA4(IV)^[2];
  r3 := PWA4(IV)^[3];

  with ctx do begin
    r0 := r0 xor RndKey[0];
    r1 := r1 xor RndKey[0 + 1];
    r2 := r2 xor RndKey[0 + 2];
    r3 := r3 xor RndKey[0 + 3];
    r3 := r3 xor r0;
    r4 := r1;
    r1 := r1 and r3;
    r4 := r4 xor r2;
    r1 := r1 xor r0;
    r0 := r0  or r3;
    r0 := r0 xor r4;
    r4 := r4 xor r3;
    r3 := r3 xor r2;
    r2 := r2  or r1;
    r2 := r2 xor r4;
    r4 := not r4;
    r4 := r4  or r1;
    r1 := r1 xor r3;
    r1 := r1 xor r4;
    r3 := r3  or r0;
    r1 := r1 xor r3;
    r4 := r4 xor r3;
    r1 := (r1 shl 13) or (r1 shr 19);
    r2 := (r2 shl 3) or (r2 shr 29);
    r4 := r4 xor r1 xor r2;
    r0 := r0 xor r2 xor (r1 shl 3);
    r4 := (r4 shl 1) or (r4 shr 31);
    r0 := (r0 shl 7) or (r0 shr 25);
    r1 := r1 xor r4 xor r0;
    r2 := r2 xor r0 xor (r4 shl 7);
    r1 := (r1 shl 5) or (r1 shr 27);
    r2 := (r2 shl 22) or (r2 shr 10);
    r1 := r1 xor RndKey[4];
    r4 := r4 xor RndKey[4 + 1];
    r2 := r2 xor RndKey[4 + 2];
    r0 := r0 xor RndKey[4 + 3];
    r1 := not r1;
    r2 := not r2;
    r3 := r1;
    r1 := r1 and r4;
    r2 := r2 xor r1;
    r1 := r1  or r0;
    r0 := r0 xor r2;
    r4 := r4 xor r1;
    r1 := r1 xor r3;
    r3 := r3  or r4;
    r4 := r4 xor r0;
    r2 := r2  or r1;
    r2 := r2 and r3;
    r1 := r1 xor r4;
    r4 := r4 and r2;
    r4 := r4 xor r1;
    r1 := r1 and r2;
    r1 := r1 xor r3;
    r2 := (r2 shl 13) or (r2 shr 19);
    r0 := (r0 shl 3) or (r0 shr 29);
    r1 := r1 xor r2 xor r0;
    r4 := r4 xor r0 xor (r2 shl 3);
    r1 := (r1 shl 1) or (r1 shr 31);
    r4 := (r4 shl 7) or (r4 shr 25);
    r2 := r2 xor r1 xor r4;
    r0 := r0 xor r4 xor (r1 shl 7);
    r2 := (r2 shl 5) or (r2 shr 27);
    r0 := (r0 shl 22) or (r0 shr 10);
    r2 := r2 xor RndKey[8];
    r1 := r1 xor RndKey[8 + 1];
    r0 := r0 xor RndKey[8 + 2];
    r4 := r4 xor RndKey[8 + 3];
    r3 := r2;
    r2 := r2 and r0;
    r2 := r2 xor r4;
    r0 := r0 xor r1;
    r0 := r0 xor r2;
    r4 := r4  or r3;
    r4 := r4 xor r1;
    r3 := r3 xor r0;
    r1 := r4;
    r4 := r4  or r3;
    r4 := r4 xor r2;
    r2 := r2 and r1;
    r3 := r3 xor r2;
    r1 := r1 xor r4;
    r1 := r1 xor r3;
    r3 := not r3;
    r0 := (r0 shl 13) or (r0 shr 19);
    r1 := (r1 shl 3) or (r1 shr 29);
    r4 := r4 xor r0 xor r1;
    r3 := r3 xor r1 xor (r0 shl 3);
    r4 := (r4 shl 1) or (r4 shr 31);
    r3 := (r3 shl 7) or (r3 shr 25);
    r0 := r0 xor r4 xor r3;
    r1 := r1 xor r3 xor (r4 shl 7);
    r0 := (r0 shl 5) or (r0 shr 27);
    r1 := (r1 shl 22) or (r1 shr 10);
    r0 := r0 xor RndKey[12];
    r4 := r4 xor RndKey[12 + 1];
    r1 := r1 xor RndKey[12 + 2];
    r3 := r3 xor RndKey[12 + 3];
    r2 := r0;
    r0 := r0  or r3;
    r3 := r3 xor r4;
    r4 := r4 and r2;
    r2 := r2 xor r1;
    r1 := r1 xor r3;
    r3 := r3 and r0;
    r2 := r2  or r4;
    r3 := r3 xor r2;
    r0 := r0 xor r4;
    r2 := r2 and r0;
    r4 := r4 xor r3;
    r2 := r2 xor r1;
    r4 := r4  or r0;
    r4 := r4 xor r1;
    r0 := r0 xor r3;
    r1 := r4;
    r4 := r4  or r3;
    r4 := r4 xor r0;
    r4 := (r4 shl 13) or (r4 shr 19);
    r3 := (r3 shl 3) or (r3 shr 29);
    r1 := r1 xor r4 xor r3;
    r2 := r2 xor r3 xor (r4 shl 3);
    r1 := (r1 shl 1) or (r1 shr 31);
    r2 := (r2 shl 7) or (r2 shr 25);
    r4 := r4 xor r1 xor r2;
    r3 := r3 xor r2 xor (r1 shl 7);
    r4 := (r4 shl 5) or (r4 shr 27);
    r3 := (r3 shl 22) or (r3 shr 10);
    r4 := r4 xor RndKey[16];
    r1 := r1 xor RndKey[16 + 1];
    r3 := r3 xor RndKey[16 + 2];
    r2 := r2 xor RndKey[16 + 3];
    r1 := r1 xor r2;
    r2 := not r2;
    r3 := r3 xor r2;
    r2 := r2 xor r4;
    r0 := r1;
    r1 := r1 and r2;
    r1 := r1 xor r3;
    r0 := r0 xor r2;
    r4 := r4 xor r0;
    r3 := r3 and r0;
    r3 := r3 xor r4;
    r4 := r4 and r1;
    r2 := r2 xor r4;
    r0 := r0  or r1;
    r0 := r0 xor r4;
    r4 := r4  or r2;
    r4 := r4 xor r3;
    r3 := r3 and r2;
    r4 := not r4;
    r0 := r0 xor r3;
    r1 := (r1 shl 13) or (r1 shr 19);
    r4 := (r4 shl 3) or (r4 shr 29);
    r0 := r0 xor r1 xor r4;
    r2 := r2 xor r4 xor (r1 shl 3);
    r0 := (r0 shl 1) or (r0 shr 31);
    r2 := (r2 shl 7) or (r2 shr 25);
    r1 := r1 xor r0 xor r2;
    r4 := r4 xor r2 xor (r0 shl 7);
    r1 := (r1 shl 5) or (r1 shr 27);
    r4 := (r4 shl 22) or (r4 shr 10);
    r1 := r1 xor RndKey[20];
    r0 := r0 xor RndKey[20 + 1];
    r4 := r4 xor RndKey[20 + 2];
    r2 := r2 xor RndKey[20 + 3];
    r1 := r1 xor r0;
    r0 := r0 xor r2;
    r2 := not r2;
    r3 := r0;
    r0 := r0 and r1;
    r4 := r4 xor r2;
    r0 := r0 xor r4;
    r4 := r4  or r3;
    r3 := r3 xor r2;
    r2 := r2 and r0;
    r2 := r2 xor r1;
    r3 := r3 xor r0;
    r3 := r3 xor r4;
    r4 := r4 xor r1;
    r1 := r1 and r2;
    r4 := not r4;
    r1 := r1 xor r3;
    r3 := r3  or r2;
    r4 := r4 xor r3;
    r0 := (r0 shl 13) or (r0 shr 19);
    r1 := (r1 shl 3) or (r1 shr 29);
    r2 := r2 xor r0 xor r1;
    r4 := r4 xor r1 xor (r0 shl 3);
    r2 := (r2 shl 1) or (r2 shr 31);
    r4 := (r4 shl 7) or (r4 shr 25);
    r0 := r0 xor r2 xor r4;
    r1 := r1 xor r4 xor (r2 shl 7);
    r0 := (r0 shl 5) or (r0 shr 27);
    r1 := (r1 shl 22) or (r1 shr 10);
    r0 := r0 xor RndKey[24];
    r2 := r2 xor RndKey[24 + 1];
    r1 := r1 xor RndKey[24 + 2];
    r4 := r4 xor RndKey[24 + 3];
    r1 := not r1;
    r3 := r4;
    r4 := r4 and r0;
    r0 := r0 xor r3;
    r4 := r4 xor r1;
    r1 := r1  or r3;
    r2 := r2 xor r4;
    r1 := r1 xor r0;
    r0 := r0  or r2;
    r1 := r1 xor r2;
    r3 := r3 xor r0;
    r0 := r0  or r4;
    r0 := r0 xor r1;
    r3 := r3 xor r4;
    r3 := r3 xor r0;
    r4 := not r4;
    r1 := r1 and r3;
    r1 := r1 xor r4;
    r0 := (r0 shl 13) or (r0 shr 19);
    r3 := (r3 shl 3) or (r3 shr 29);
    r2 := r2 xor r0 xor r3;
    r1 := r1 xor r3 xor (r0 shl 3);
    r2 := (r2 shl 1) or (r2 shr 31);
    r1 := (r1 shl 7) or (r1 shr 25);
    r0 := r0 xor r2 xor r1;
    r3 := r3 xor r1 xor (r2 shl 7);
    r0 := (r0 shl 5) or (r0 shr 27);
    r3 := (r3 shl 22) or (r3 shr 10);
    r0 := r0 xor RndKey[28];
    r2 := r2 xor RndKey[28 + 1];
    r3 := r3 xor RndKey[28 + 2];
    r1 := r1 xor RndKey[28 + 3];
    r4 := r2;
    r2 := r2  or r3;
    r2 := r2 xor r1;
    r4 := r4 xor r3;
    r3 := r3 xor r2;
    r1 := r1  or r4;
    r1 := r1 and r0;
    r4 := r4 xor r3;
    r1 := r1 xor r2;
    r2 := r2  or r4;
    r2 := r2 xor r0;
    r0 := r0  or r4;
    r0 := r0 xor r3;
    r2 := r2 xor r4;
    r3 := r3 xor r2;
    r2 := r2 and r0;
    r2 := r2 xor r4;
    r3 := not r3;
    r3 := r3  or r0;
    r4 := r4 xor r3;
    r4 := (r4 shl 13) or (r4 shr 19);
    r2 := (r2 shl 3) or (r2 shr 29);
    r1 := r1 xor r4 xor r2;
    r0 := r0 xor r2 xor (r4 shl 3);
    r1 := (r1 shl 1) or (r1 shr 31);
    r0 := (r0 shl 7) or (r0 shr 25);
    r4 := r4 xor r1 xor r0;
    r2 := r2 xor r0 xor (r1 shl 7);
    r4 := (r4 shl 5) or (r4 shr 27);
    r2 := (r2 shl 22) or (r2 shr 10);
    r4 := r4 xor RndKey[32];
    r1 := r1 xor RndKey[32 + 1];
    r2 := r2 xor RndKey[32 + 2];
    r0 := r0 xor RndKey[32 + 3];
    r0 := r0 xor r4;
    r3 := r1;
    r1 := r1 and r0;
    r3 := r3 xor r2;
    r1 := r1 xor r4;
    r4 := r4  or r0;
    r4 := r4 xor r3;
    r3 := r3 xor r0;
    r0 := r0 xor r2;
    r2 := r2  or r1;
    r2 := r2 xor r3;
    r3 := not r3;
    r3 := r3  or r1;
    r1 := r1 xor r0;
    r1 := r1 xor r3;
    r0 := r0  or r4;
    r1 := r1 xor r0;
    r3 := r3 xor r0;
    r1 := (r1 shl 13) or (r1 shr 19);
    r2 := (r2 shl 3) or (r2 shr 29);
    r3 := r3 xor r1 xor r2;
    r4 := r4 xor r2 xor (r1 shl 3);
    r3 := (r3 shl 1) or (r3 shr 31);
    r4 := (r4 shl 7) or (r4 shr 25);
    r1 := r1 xor r3 xor r4;
    r2 := r2 xor r4 xor (r3 shl 7);
    r1 := (r1 shl 5) or (r1 shr 27);
    r2 := (r2 shl 22) or (r2 shr 10);
    r1 := r1 xor RndKey[36];
    r3 := r3 xor RndKey[36 + 1];
    r2 := r2 xor RndKey[36 + 2];
    r4 := r4 xor RndKey[36 + 3];
    r1 := not r1;
    r2 := not r2;
    r0 := r1;
    r1 := r1 and r3;
    r2 := r2 xor r1;
    r1 := r1  or r4;
    r4 := r4 xor r2;
    r3 := r3 xor r1;
    r1 := r1 xor r0;
    r0 := r0  or r3;
    r3 := r3 xor r4;
    r2 := r2  or r1;
    r2 := r2 and r0;
    r1 := r1 xor r3;
    r3 := r3 and r2;
    r3 := r3 xor r1;
    r1 := r1 and r2;
    r1 := r1 xor r0;
    r2 := (r2 shl 13) or (r2 shr 19);
    r4 := (r4 shl 3) or (r4 shr 29);
    r1 := r1 xor r2 xor r4;
    r3 := r3 xor r4 xor (r2 shl 3);
    r1 := (r1 shl 1) or (r1 shr 31);
    r3 := (r3 shl 7) or (r3 shr 25);
    r2 := r2 xor r1 xor r3;
    r4 := r4 xor r3 xor (r1 shl 7);
    r2 := (r2 shl 5) or (r2 shr 27);
    r4 := (r4 shl 22) or (r4 shr 10);
    r2 := r2 xor RndKey[40];
    r1 := r1 xor RndKey[40 + 1];
    r4 := r4 xor RndKey[40 + 2];
    r3 := r3 xor RndKey[40 + 3];
    r0 := r2;
    r2 := r2 and r4;
    r2 := r2 xor r3;
    r4 := r4 xor r1;
    r4 := r4 xor r2;
    r3 := r3  or r0;
    r3 := r3 xor r1;
    r0 := r0 xor r4;
    r1 := r3;
    r3 := r3  or r0;
    r3 := r3 xor r2;
    r2 := r2 and r1;
    r0 := r0 xor r2;
    r1 := r1 xor r3;
    r1 := r1 xor r0;
    r0 := not r0;
    r4 := (r4 shl 13) or (r4 shr 19);
    r1 := (r1 shl 3) or (r1 shr 29);
    r3 := r3 xor r4 xor r1;
    r0 := r0 xor r1 xor (r4 shl 3);
    r3 := (r3 shl 1) or (r3 shr 31);
    r0 := (r0 shl 7) or (r0 shr 25);
    r4 := r4 xor r3 xor r0;
    r1 := r1 xor r0 xor (r3 shl 7);
    r4 := (r4 shl 5) or (r4 shr 27);
    r1 := (r1 shl 22) or (r1 shr 10);
    r4 := r4 xor RndKey[44];
    r3 := r3 xor RndKey[44 + 1];
    r1 := r1 xor RndKey[44 + 2];
    r0 := r0 xor RndKey[44 + 3];
    r2 := r4;
    r4 := r4  or r0;
    r0 := r0 xor r3;
    r3 := r3 and r2;
    r2 := r2 xor r1;
    r1 := r1 xor r0;
    r0 := r0 and r4;
    r2 := r2  or r3;
    r0 := r0 xor r2;
    r4 := r4 xor r3;
    r2 := r2 and r4;
    r3 := r3 xor r0;
    r2 := r2 xor r1;
    r3 := r3  or r4;
    r3 := r3 xor r1;
    r4 := r4 xor r0;
    r1 := r3;
    r3 := r3  or r0;
    r3 := r3 xor r4;
    r3 := (r3 shl 13) or (r3 shr 19);
    r0 := (r0 shl 3) or (r0 shr 29);
    r1 := r1 xor r3 xor r0;
    r2 := r2 xor r0 xor (r3 shl 3);
    r1 := (r1 shl 1) or (r1 shr 31);
    r2 := (r2 shl 7) or (r2 shr 25);
    r3 := r3 xor r1 xor r2;
    r0 := r0 xor r2 xor (r1 shl 7);
    r3 := (r3 shl 5) or (r3 shr 27);
    r0 := (r0 shl 22) or (r0 shr 10);
    lfsr[9] := r3;
    lfsr[8] := r1;
    lfsr[7] := r0;
    lfsr[6] := r2;
    r3 := r3 xor RndKey[48];
    r1 := r1 xor RndKey[48 + 1];
    r0 := r0 xor RndKey[48 + 2];
    r2 := r2 xor RndKey[48 + 3];
    r1 := r1 xor r2;
    r2 := not r2;
    r0 := r0 xor r2;
    r2 := r2 xor r3;
    r4 := r1;
    r1 := r1 and r2;
    r1 := r1 xor r0;
    r4 := r4 xor r2;
    r3 := r3 xor r4;
    r0 := r0 and r4;
    r0 := r0 xor r3;
    r3 := r3 and r1;
    r2 := r2 xor r3;
    r4 := r4  or r1;
    r4 := r4 xor r3;
    r3 := r3  or r2;
    r3 := r3 xor r0;
    r0 := r0 and r2;
    r3 := not r3;
    r4 := r4 xor r0;
    r1 := (r1 shl 13) or (r1 shr 19);
    r3 := (r3 shl 3) or (r3 shr 29);
    r4 := r4 xor r1 xor r3;
    r2 := r2 xor r3 xor (r1 shl 3);
    r4 := (r4 shl 1) or (r4 shr 31);
    r2 := (r2 shl 7) or (r2 shr 25);
    r1 := r1 xor r4 xor r2;
    r3 := r3 xor r2 xor (r4 shl 7);
    r1 := (r1 shl 5) or (r1 shr 27);
    r3 := (r3 shl 22) or (r3 shr 10);
    r1 := r1 xor RndKey[52];
    r4 := r4 xor RndKey[52 + 1];
    r3 := r3 xor RndKey[52 + 2];
    r2 := r2 xor RndKey[52 + 3];
    r1 := r1 xor r4;
    r4 := r4 xor r2;
    r2 := not r2;
    r0 := r4;
    r4 := r4 and r1;
    r3 := r3 xor r2;
    r4 := r4 xor r3;
    r3 := r3  or r0;
    r0 := r0 xor r2;
    r2 := r2 and r4;
    r2 := r2 xor r1;
    r0 := r0 xor r4;
    r0 := r0 xor r3;
    r3 := r3 xor r1;
    r1 := r1 and r2;
    r3 := not r3;
    r1 := r1 xor r0;
    r0 := r0  or r2;
    r3 := r3 xor r0;
    r4 := (r4 shl 13) or (r4 shr 19);
    r1 := (r1 shl 3) or (r1 shr 29);
    r2 := r2 xor r4 xor r1;
    r3 := r3 xor r1 xor (r4 shl 3);
    r2 := (r2 shl 1) or (r2 shr 31);
    r3 := (r3 shl 7) or (r3 shr 25);
    r4 := r4 xor r2 xor r3;
    r1 := r1 xor r3 xor (r2 shl 7);
    r4 := (r4 shl 5) or (r4 shr 27);
    r1 := (r1 shl 22) or (r1 shr 10);
    r4 := r4 xor RndKey[56];
    r2 := r2 xor RndKey[56 + 1];
    r1 := r1 xor RndKey[56 + 2];
    r3 := r3 xor RndKey[56 + 3];
    r1 := not r1;
    r0 := r3;
    r3 := r3 and r4;
    r4 := r4 xor r0;
    r3 := r3 xor r1;
    r1 := r1  or r0;
    r2 := r2 xor r3;
    r1 := r1 xor r4;
    r4 := r4  or r2;
    r1 := r1 xor r2;
    r0 := r0 xor r4;
    r4 := r4  or r3;
    r4 := r4 xor r1;
    r0 := r0 xor r3;
    r0 := r0 xor r4;
    r3 := not r3;
    r1 := r1 and r0;
    r1 := r1 xor r3;
    r4 := (r4 shl 13) or (r4 shr 19);
    r0 := (r0 shl 3) or (r0 shr 29);
    r2 := r2 xor r4 xor r0;
    r1 := r1 xor r0 xor (r4 shl 3);
    r2 := (r2 shl 1) or (r2 shr 31);
    r1 := (r1 shl 7) or (r1 shr 25);
    r4 := r4 xor r2 xor r1;
    r0 := r0 xor r1 xor (r2 shl 7);
    r4 := (r4 shl 5) or (r4 shr 27);
    r0 := (r0 shl 22) or (r0 shr 10);
    r4 := r4 xor RndKey[60];
    r2 := r2 xor RndKey[60 + 1];
    r0 := r0 xor RndKey[60 + 2];
    r1 := r1 xor RndKey[60 + 3];
    r3 := r2;
    r2 := r2  or r0;
    r2 := r2 xor r1;
    r3 := r3 xor r0;
    r0 := r0 xor r2;
    r1 := r1  or r3;
    r1 := r1 and r4;
    r3 := r3 xor r0;
    r1 := r1 xor r2;
    r2 := r2  or r3;
    r2 := r2 xor r4;
    r4 := r4  or r3;
    r4 := r4 xor r0;
    r2 := r2 xor r3;
    r0 := r0 xor r2;
    r2 := r2 and r4;
    r2 := r2 xor r3;
    r0 := not r0;
    r0 := r0  or r4;
    r3 := r3 xor r0;
    r3 := (r3 shl 13) or (r3 shr 19);
    r2 := (r2 shl 3) or (r2 shr 29);
    r1 := r1 xor r3 xor r2;
    r4 := r4 xor r2 xor (r3 shl 3);
    r1 := (r1 shl 1) or (r1 shr 31);
    r4 := (r4 shl 7) or (r4 shr 25);
    r3 := r3 xor r1 xor r4;
    r2 := r2 xor r4 xor (r1 shl 7);
    r3 := (r3 shl 5) or (r3 shr 27);
    r2 := (r2 shl 22) or (r2 shr 10);
    r3 := r3 xor RndKey[64];
    r1 := r1 xor RndKey[64 + 1];
    r2 := r2 xor RndKey[64 + 2];
    r4 := r4 xor RndKey[64 + 3];
    r4 := r4 xor r3;
    r0 := r1;
    r1 := r1 and r4;
    r0 := r0 xor r2;
    r1 := r1 xor r3;
    r3 := r3  or r4;
    r3 := r3 xor r0;
    r0 := r0 xor r4;
    r4 := r4 xor r2;
    r2 := r2  or r1;
    r2 := r2 xor r0;
    r0 := not r0;
    r0 := r0  or r1;
    r1 := r1 xor r4;
    r1 := r1 xor r0;
    r4 := r4  or r3;
    r1 := r1 xor r4;
    r0 := r0 xor r4;
    r1 := (r1 shl 13) or (r1 shr 19);
    r2 := (r2 shl 3) or (r2 shr 29);
    r0 := r0 xor r1 xor r2;
    r3 := r3 xor r2 xor (r1 shl 3);
    r0 := (r0 shl 1) or (r0 shr 31);
    r3 := (r3 shl 7) or (r3 shr 25);
    r1 := r1 xor r0 xor r3;
    r2 := r2 xor r3 xor (r0 shl 7);
    r1 := (r1 shl 5) or (r1 shr 27);
    r2 := (r2 shl 22) or (r2 shr 10);
    r1 := r1 xor RndKey[68];
    r0 := r0 xor RndKey[68 + 1];
    r2 := r2 xor RndKey[68 + 2];
    r3 := r3 xor RndKey[68 + 3];
    r1 := not r1;
    r2 := not r2;
    r4 := r1;
    r1 := r1 and r0;
    r2 := r2 xor r1;
    r1 := r1  or r3;
    r3 := r3 xor r2;
    r0 := r0 xor r1;
    r1 := r1 xor r4;
    r4 := r4  or r0;
    r0 := r0 xor r3;
    r2 := r2  or r1;
    r2 := r2 and r4;
    r1 := r1 xor r0;
    r0 := r0 and r2;
    r0 := r0 xor r1;
    r1 := r1 and r2;
    r1 := r1 xor r4;
    r2 := (r2 shl 13) or (r2 shr 19);
    r3 := (r3 shl 3) or (r3 shr 29);
    r1 := r1 xor r2 xor r3;
    r0 := r0 xor r3 xor (r2 shl 3);
    r1 := (r1 shl 1) or (r1 shr 31);
    r0 := (r0 shl 7) or (r0 shr 25);
    r2 := r2 xor r1 xor r0;
    r3 := r3 xor r0 xor (r1 shl 7);
    r2 := (r2 shl 5) or (r2 shr 27);
    r3 := (r3 shl 22) or (r3 shr 10);
    fsmr[1] := r2;
    lfsr[4] := r1;
    fsmr[2] := r3;
    lfsr[5] := r0;
    r2 := r2 xor RndKey[72];
    r1 := r1 xor RndKey[72 + 1];
    r3 := r3 xor RndKey[72 + 2];
    r0 := r0 xor RndKey[72 + 3];
    r4 := r2;
    r2 := r2 and r3;
    r2 := r2 xor r0;
    r3 := r3 xor r1;
    r3 := r3 xor r2;
    r0 := r0  or r4;
    r0 := r0 xor r1;
    r4 := r4 xor r3;
    r1 := r0;
    r0 := r0  or r4;
    r0 := r0 xor r2;
    r2 := r2 and r1;
    r4 := r4 xor r2;
    r1 := r1 xor r0;
    r1 := r1 xor r4;
    r4 := not r4;
    r3 := (r3 shl 13) or (r3 shr 19);
    r1 := (r1 shl 3) or (r1 shr 29);
    r0 := r0 xor r3 xor r1;
    r4 := r4 xor r1 xor (r3 shl 3);
    r0 := (r0 shl 1) or (r0 shr 31);
    r4 := (r4 shl 7) or (r4 shr 25);
    r3 := r3 xor r0 xor r4;
    r1 := r1 xor r4 xor (r0 shl 7);
    r3 := (r3 shl 5) or (r3 shr 27);
    r1 := (r1 shl 22) or (r1 shr 10);
    r3 := r3 xor RndKey[76];
    r0 := r0 xor RndKey[76 + 1];
    r1 := r1 xor RndKey[76 + 2];
    r4 := r4 xor RndKey[76 + 3];
    r2 := r3;
    r3 := r3  or r4;
    r4 := r4 xor r0;
    r0 := r0 and r2;
    r2 := r2 xor r1;
    r1 := r1 xor r4;
    r4 := r4 and r3;
    r2 := r2  or r0;
    r4 := r4 xor r2;
    r3 := r3 xor r0;
    r2 := r2 and r3;
    r0 := r0 xor r4;
    r2 := r2 xor r1;
    r0 := r0  or r3;
    r0 := r0 xor r1;
    r3 := r3 xor r4;
    r1 := r0;
    r0 := r0  or r4;
    r0 := r0 xor r3;
    r0 := (r0 shl 13) or (r0 shr 19);
    r4 := (r4 shl 3) or (r4 shr 29);
    r1 := r1 xor r0 xor r4;
    r2 := r2 xor r4 xor (r0 shl 3);
    r1 := (r1 shl 1) or (r1 shr 31);
    r2 := (r2 shl 7) or (r2 shr 25);
    r0 := r0 xor r1 xor r2;
    r4 := r4 xor r2 xor (r1 shl 7);
    r0 := (r0 shl 5) or (r0 shr 27);
    r4 := (r4 shl 22) or (r4 shr 10);
    r0 := r0 xor RndKey[80];
    r1 := r1 xor RndKey[80 + 1];
    r4 := r4 xor RndKey[80 + 2];
    r2 := r2 xor RndKey[80 + 3];
    r1 := r1 xor r2;
    r2 := not r2;
    r4 := r4 xor r2;
    r2 := r2 xor r0;
    r3 := r1;
    r1 := r1 and r2;
    r1 := r1 xor r4;
    r3 := r3 xor r2;
    r0 := r0 xor r3;
    r4 := r4 and r3;
    r4 := r4 xor r0;
    r0 := r0 and r1;
    r2 := r2 xor r0;
    r3 := r3  or r1;
    r3 := r3 xor r0;
    r0 := r0  or r2;
    r0 := r0 xor r4;
    r4 := r4 and r2;
    r0 := not r0;
    r3 := r3 xor r4;
    r1 := (r1 shl 13) or (r1 shr 19);
    r0 := (r0 shl 3) or (r0 shr 29);
    r3 := r3 xor r1 xor r0;
    r2 := r2 xor r0 xor (r1 shl 3);
    r3 := (r3 shl 1) or (r3 shr 31);
    r2 := (r2 shl 7) or (r2 shr 25);
    r1 := r1 xor r3 xor r2;
    r0 := r0 xor r2 xor (r3 shl 7);
    r1 := (r1 shl 5) or (r1 shr 27);
    r0 := (r0 shl 22) or (r0 shr 10);
    r1 := r1 xor RndKey[84];
    r3 := r3 xor RndKey[84 + 1];
    r0 := r0 xor RndKey[84 + 2];
    r2 := r2 xor RndKey[84 + 3];
    r1 := r1 xor r3;
    r3 := r3 xor r2;
    r2 := not r2;
    r4 := r3;
    r3 := r3 and r1;
    r0 := r0 xor r2;
    r3 := r3 xor r0;
    r0 := r0  or r4;
    r4 := r4 xor r2;
    r2 := r2 and r3;
    r2 := r2 xor r1;
    r4 := r4 xor r3;
    r4 := r4 xor r0;
    r0 := r0 xor r1;
    r1 := r1 and r2;
    r0 := not r0;
    r1 := r1 xor r4;
    r4 := r4  or r2;
    r0 := r0 xor r4;
    r3 := (r3 shl 13) or (r3 shr 19);
    r1 := (r1 shl 3) or (r1 shr 29);
    r2 := r2 xor r3 xor r1;
    r0 := r0 xor r1 xor (r3 shl 3);
    r2 := (r2 shl 1) or (r2 shr 31);
    r0 := (r0 shl 7) or (r0 shr 25);
    r3 := r3 xor r2 xor r0;
    r1 := r1 xor r0 xor (r2 shl 7);
    r3 := (r3 shl 5) or (r3 shr 27);
    r1 := (r1 shl 22) or (r1 shr 10);
    r3 := r3 xor RndKey[88];
    r2 := r2 xor RndKey[88 + 1];
    r1 := r1 xor RndKey[88 + 2];
    r0 := r0 xor RndKey[88 + 3];
    r1 := not r1;
    r4 := r0;
    r0 := r0 and r3;
    r3 := r3 xor r4;
    r0 := r0 xor r1;
    r1 := r1  or r4;
    r2 := r2 xor r0;
    r1 := r1 xor r3;
    r3 := r3  or r2;
    r1 := r1 xor r2;
    r4 := r4 xor r3;
    r3 := r3  or r0;
    r3 := r3 xor r1;
    r4 := r4 xor r0;
    r4 := r4 xor r3;
    r0 := not r0;
    r1 := r1 and r4;
    r1 := r1 xor r0;
    r3 := (r3 shl 13) or (r3 shr 19);
    r4 := (r4 shl 3) or (r4 shr 29);
    r2 := r2 xor r3 xor r4;
    r1 := r1 xor r4 xor (r3 shl 3);
    r2 := (r2 shl 1) or (r2 shr 31);
    r1 := (r1 shl 7) or (r1 shr 25);
    r3 := r3 xor r2 xor r1;
    r4 := r4 xor r1 xor (r2 shl 7);
    r3 := (r3 shl 5) or (r3 shr 27);
    r4 := (r4 shl 22) or (r4 shr 10);
    r3 := r3 xor RndKey[92];
    r2 := r2 xor RndKey[92 + 1];
    r4 := r4 xor RndKey[92 + 2];
    r1 := r1 xor RndKey[92 + 3];
    r0 := r2;
    r2 := r2  or r4;
    r2 := r2 xor r1;
    r0 := r0 xor r4;
    r4 := r4 xor r2;
    r1 := r1  or r0;
    r1 := r1 and r3;
    r0 := r0 xor r4;
    r1 := r1 xor r2;
    r2 := r2  or r0;
    r2 := r2 xor r3;
    r3 := r3  or r0;
    r3 := r3 xor r4;
    r2 := r2 xor r0;
    r4 := r4 xor r2;
    r2 := r2 and r3;
    r2 := r2 xor r0;
    r4 := not r4;
    r4 := r4  or r3;
    r0 := r0 xor r4;
    r0 := (r0 shl 13) or (r0 shr 19);
    r2 := (r2 shl 3) or (r2 shr 29);
    r1 := r1 xor r0 xor r2;
    r3 := r3 xor r2 xor (r0 shl 3);
    r1 := (r1 shl 1) or (r1 shr 31);
    r3 := (r3 shl 7) or (r3 shr 25);
    r0 := r0 xor r1 xor r3;
    r2 := r2 xor r3 xor (r1 shl 7);
    r0 := (r0 shl 5) or (r0 shr 27);
    r2 := (r2 shl 22) or (r2 shr 10);
    r0 := r0 xor RndKey[96];
    r1 := r1 xor RndKey[96 + 1];
    r2 := r2 xor RndKey[96 + 2];
    r3 := r3 xor RndKey[96 + 3];
    lfsr[3] := r0;
    lfsr[2] := r1;
    lfsr[1] := r2;
    lfsr[0] := r3;
  end;
end;

{$ifdef Q_OPT}
{$Q-}
{$endif}

{$R-}

{---------------------------------------------------------------------------}
procedure MakeStreamBlock(var ctx: sose_ctx; pblk: TPSMBlockW; nblk: word);
  {-Generate next nblk key stream blocks}
var
  s0,s1,s2,s3,s4,
  s5,s6,s7,s8,s9,
  r1,r2,
  f0,f1,f2,f3,f4: longint;
  v0,v1,v2,v3,tt: longint;
begin
  with ctx do begin
    s0 := lfsr[0];
    s1 := lfsr[1];
    s2 := lfsr[2];
    s3 := lfsr[3];
    s4 := lfsr[4];
    s5 := lfsr[5];
    s6 := lfsr[6];
    s7 := lfsr[7];
    s8 := lfsr[8];
    s9 := lfsr[9];
    r1 := fsmr[1];
    r2 := fsmr[2];

    while nblk>0 do begin
      tt := r1 * $54655307;
      r1 := r2 + (s1 xor (sig[r1 and 1] and s8));
      r2 := (tt shl 7) or (tt shr 25);
      v0 := s0;
      s0 := ((s0 shl 8) xor mulAlpha[s0 shr 24]) xor ((s3 shr 8) xor divAlpha[s3 and $FF]) xor s9;
      f0 := (s9 + r1) xor r2;

      tt := r1 * $54655307;
      r1 := r2 + (s2 xor (sig[r1 and 1] and s9));
      r2 := (tt shl 7) or (tt shr 25);
      v1 := s1;
      s1 := ((s1 shl 8) xor mulAlpha[s1 shr 24]) xor ((s4 shr 8) xor divAlpha[s4 and $FF]) xor s0;
      f1 := (s0 + r1) xor r2;

      tt := r1 * $54655307;
      r1 := r2 + (s3 xor (sig[r1 and 1] and s0));
      r2 := (tt shl 7) or (tt shr 25);
      v2 := s2;
      s2 := ((s2 shl 8) xor mulAlpha[s2 shr 24]) xor ((s5 shr 8) xor divAlpha[s5 and $FF]) xor s1;
      f2 := (s1 + r1) xor r2;

      tt := r1 * $54655307;
      r1 := r2 + (s4 xor (sig[r1 and 1] and s1));
      r2 := (tt shl 7) or (tt shr 25);
      v3 := s3;
      s3 := ((s3 shl 8) xor mulAlpha[s3 shr 24]) xor ((s6 shr 8) xor divAlpha[s6 and $FF]) xor s2;
      f3 := (s2 + r1) xor r2;

      f4 := f0;
      f0 := f0 and f2;
      f0 := f0 xor f3;
      f2 := f2 xor f1;
      f2 := f2 xor f0;
      f3 := f3  or f4;
      f3 := f3 xor f1;
      f4 := f4 xor f2;
      f1 := f3;
      f3 := f3  or f4;
      f3 := f3 xor f0;
      f0 := f0 and f1;
      f4 := f4 xor f0;
      f1 := f1 xor f3;
      f1 := f1 xor f4;
      f4 := not f4;

      pblk^[0] := f2 xor v0;
      pblk^[1] := f3 xor v1;
      pblk^[2] := f1 xor v2;
      pblk^[3] := f4 xor v3;

      tt := r1 * $54655307;
      r1 := r2 + (s5 xor (sig[r1 and 1] and s2));
      r2 := (tt shl 7) or (tt shr 25);
      v0 := s4;
      s4 := ((s4 shl 8) xor mulAlpha[s4 shr 24]) xor ((s7 shr 8) xor divAlpha[s7 and $FF]) xor s3;
      f0 := (s3 + r1) xor r2;

      tt := r1 * $54655307;
      r1 := r2 + (s6 xor (sig[r1 and 1] and s3));
      r2 := (tt shl 7) or (tt shr 25);
      v1 := s5;
      s5 := ((s5 shl 8) xor mulAlpha[s5 shr 24]) xor ((s8 shr 8) xor divAlpha[s8 and $FF]) xor s4;
      f1 := (s4 + r1) xor r2;

      tt := r1 * $54655307;
      r1 := r2 + (s7 xor (sig[r1 and 1] and s4));
      r2 := (tt shl 7) or (tt shr 25);
      v2 := s6;
      s6 := ((s6 shl 8) xor mulAlpha[s6 shr 24]) xor ((s9 shr 8) xor divAlpha[s9 and $FF]) xor s5;
      f2 := (s5 + r1) xor r2;

      tt := r1 * $54655307;
      r1 := r2 + (s8 xor (sig[r1 and 1] and s5));
      r2 := (tt shl 7) or (tt shr 25);
      v3 := s7;
      s7 := ((s7 shl 8) xor mulAlpha[s7 shr 24]) xor ((s0 shr 8) xor divAlpha[s0 and $FF]) xor s6;
      f3 := (s6 + r1) xor r2;

      f4 := f0;
      f0 := f0 and f2;
      f0 := f0 xor f3;
      f2 := f2 xor f1;
      f2 := f2 xor f0;
      f3 := f3  or f4;
      f3 := f3 xor f1;
      f4 := f4 xor f2;
      f1 := f3;
      f3 := f3  or f4;
      f3 := f3 xor f0;
      f0 := f0 and f1;
      f4 := f4 xor f0;
      f1 := f1 xor f3;
      f1 := f1 xor f4;
      f4 := not f4;

      pblk^[4] := f2 xor v0;
      pblk^[5] := f3 xor v1;
      pblk^[6] := f1 xor v2;
      pblk^[7] := f4 xor v3;

      tt := r1 * $54655307;
      r1 := r2 + (s9 xor (sig[r1 and 1] and s6));
      r2 := (tt shl 7) or (tt shr 25);
      v0 := s8;
      s8 := ((s8 shl 8) xor mulAlpha[s8 shr 24]) xor ((s1 shr 8) xor divAlpha[s1 and $FF]) xor s7;
      f0 := (s7 + r1) xor r2;

      tt := r1 * $54655307;
      r1 := r2 + (s0 xor (sig[r1 and 1] and s7));
      r2 := (tt shl 7) or (tt shr 25);
      v1 := s9;
      s9 := ((s9 shl 8) xor mulAlpha[s9 shr 24]) xor ((s2 shr 8) xor divAlpha[s2 and $FF]) xor s8;
      f1 := (s8 + r1) xor r2;

      tt := r1 * $54655307;
      r1 := r2 + (s1 xor (sig[r1 and 1] and s8));
      r2 := (tt shl 7) or (tt shr 25);
      v2 := s0;
      s0 := ((s0 shl 8) xor mulAlpha[s0 shr 24]) xor ((s3 shr 8) xor divAlpha[s3 and $FF]) xor s9;
      f2 := (s9 + r1) xor r2;

      tt := r1 * $54655307;
      r1 := r2 + (s2 xor (sig[r1 and 1] and s9));
      r2 := (tt shl 7) or (tt shr 25);
      v3 := s1;
      s1 := ((s1 shl 8) xor mulAlpha[s1 shr 24]) xor ((s4 shr 8) xor divAlpha[s4 and $FF]) xor s0;
      f3 := (s0 + r1) xor r2;

      f4 := f0;
      f0 := f0 and f2;
      f0 := f0 xor f3;
      f2 := f2 xor f1;
      f2 := f2 xor f0;
      f3 := f3  or f4;
      f3 := f3 xor f1;
      f4 := f4 xor f2;
      f1 := f3;
      f3 := f3  or f4;
      f3 := f3 xor f0;
      f0 := f0 and f1;
      f4 := f4 xor f0;
      f1 := f1 xor f3;
      f1 := f1 xor f4;
      f4 := not f4;

      pblk^[ 8] := f2 xor v0;
      pblk^[ 9] := f3 xor v1;
      pblk^[10] := f1 xor v2;
      pblk^[11] := f4 xor v3;

      tt := r1 * $54655307;
      r1 := r2 + (s3 xor (sig[r1 and 1] and s0));
      r2 := (tt shl 7) or (tt shr 25);
      v0 := s2;
      s2 := ((s2 shl 8) xor mulAlpha[s2 shr 24]) xor ((s5 shr 8) xor divAlpha[s5 and $FF]) xor s1;
      f0 := (s1 + r1) xor r2;

      tt := r1 * $54655307;
      r1 := r2 + (s4 xor (sig[r1 and 1] and s1));
      r2 := (tt shl 7) or (tt shr 25);
      v1 := s3;
      s3 := ((s3 shl 8) xor mulAlpha[s3 shr 24]) xor ((s6 shr 8) xor divAlpha[s6 and $FF]) xor s2;
      f1 := (s2 + r1) xor r2;

      tt := r1 * $54655307;
      r1 := r2 + (s5 xor (sig[r1 and 1] and s2));
      r2 := (tt shl 7) or (tt shr 25);
      v2 := s4;
      s4 := ((s4 shl 8) xor mulAlpha[s4 shr 24]) xor ((s7 shr 8) xor divAlpha[s7 and $FF]) xor s3;
      f2 := (s3 + r1) xor r2;

      tt := r1 * $54655307;
      r1 := r2 + (s6 xor (sig[r1 and 1] and s3));
      r2 := (tt shl 7) or (tt shr 25);
      v3 := s5;
      s5 := ((s5 shl 8) xor mulAlpha[s5 shr 24]) xor ((s8 shr 8) xor divAlpha[s8 and $FF]) xor s4;
      f3 := (s4 + r1) xor r2;

      f4 := f0;
      f0 := f0 and f2;
      f0 := f0 xor f3;
      f2 := f2 xor f1;
      f2 := f2 xor f0;
      f3 := f3  or f4;
      f3 := f3 xor f1;
      f4 := f4 xor f2;
      f1 := f3;
      f3 := f3  or f4;
      f3 := f3 xor f0;
      f0 := f0 and f1;
      f4 := f4 xor f0;
      f1 := f1 xor f3;
      f1 := f1 xor f4;
      f4 := not f4;

      pblk^[12] := f2 xor v0;
      pblk^[13] := f3 xor v1;
      pblk^[14] := f1 xor v2;
      pblk^[15] := f4 xor v3;

      tt := r1 * $54655307;
      r1 := r2 + (s7 xor (sig[r1 and 1] and s4));
      r2 := (tt shl 7) or (tt shr 25);
      v0 := s6;
      s6 := ((s6 shl 8) xor mulAlpha[s6 shr 24]) xor ((s9 shr 8) xor divAlpha[s9 and $FF]) xor s5;
      f0 := (s5 + r1) xor r2;

      tt := r1 * $54655307;
      r1 := r2 + (s8 xor (sig[r1 and 1] and s5));
      r2 := (tt shl 7) or (tt shr 25);
      v1 := s7;
      s7 := ((s7 shl 8) xor mulAlpha[s7 shr 24]) xor ((s0 shr 8) xor divAlpha[s0 and $FF]) xor s6;
      f1 := (s6 + r1) xor r2;

      tt := r1 * $54655307;
      r1 := r2 + (s9 xor (sig[r1 and 1] and s6));
      r2 := (tt shl 7) or (tt shr 25);
      v2 := s8;
      s8 := ((s8 shl 8) xor mulAlpha[s8 shr 24]) xor ((s1 shr 8) xor divAlpha[s1 and $FF]) xor s7;
      f2 := (s7 + r1) xor r2;

      tt := r1 * $54655307;
      r1 := r2 + (s0 xor (sig[r1 and 1] and s7));
      r2 := (tt shl 7) or (tt shr 25);
      v3 := s9;
      s9 := ((s9 shl 8) xor mulAlpha[s9 shr 24]) xor ((s2 shr 8) xor divAlpha[s2 and $FF]) xor s8;
      f3 := (s8 + r1) xor r2;

      f4 := f0;
      f0 := f0 and f2;
      f0 := f0 xor f3;
      f2 := f2 xor f1;
      f2 := f2 xor f0;
      f3 := f3  or f4;
      f3 := f3 xor f1;
      f4 := f4 xor f2;
      f1 := f3;
      f3 := f3  or f4;
      f3 := f3 xor f0;
      f0 := f0 and f1;
      f4 := f4 xor f0;
      f1 := f1 xor f3;
      f1 := f1 xor f4;
      f4 := not f4;

      pblk^[16] := f2 xor v0;
      pblk^[17] := f3 xor v1;
      pblk^[18] := f1 xor v2;
      pblk^[19] := f4 xor v3;

      dec(nblk);
      inc(Ptr2Inc(pblk),sizeof(TSMBlockW));
    end;

    lfsr[0] := s0;
    lfsr[1] := s1;
    lfsr[2] := s2;
    lfsr[3] := s3;
    lfsr[4] := s4;
    lfsr[5] := s5;
    lfsr[6] := s6;
    lfsr[7] := s7;
    lfsr[8] := s8;
    lfsr[9] := s9;
    fsmr[1] := r1;
    fsmr[2] := r2;
  end;
end;

{$ifdef Q_OPT}
  {$ifdef OverflowChecks_on}
    {$Q+}
  {$endif}
{$endif}

{$ifdef RangeChecks_on}
  {$R+}
{$endif}
