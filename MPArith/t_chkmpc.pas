{Test program for MPArith/mp_cmplx, (c) W.Ehrhardt 2014-2017}

program t_chkmpc;

{$i STD.INC}
{$i mp_conf.inc}

{$x+}  {pchar I/O}
{$i+}  {RTE on I/O error}

{$ifdef BIT16}
{$N+,F+}
{$endif}


{$ifdef APPCONS}
  {$apptype console}
{$endif}

uses
  {$ifdef WINCRT}
    WinCRT,
  {$endif}
  {$ifdef MPC_Diagnostic}
    mp_supp,
  {$endif}
  mp_types, mp_base, mp_real, mp_cmplx;


{---------------------------------------------------------------------------}
function  mpc_reldev(const a,b: mp_complex): double;
  {-Return abs((a-b)/b)*2^b.re.bitprec, special if b=0, or a-b=0}
var
  c: mp_complex;
begin
  mpc_reldev := -1;
  mpc_initp(c,b.re.bitprec);
  if mp_error<>MP_OKAY then exit;
  mpc_sub(a,b,c);
  if mpc_is0(c) then mpc_reldev := 0.0
  else begin
    if not mpc_is0(b) then mpc_div(c,b,c);
    mpc_abs(c,c.re);
    mpf_mul_2k(c.re,b.re.bitprec,c.re);
    mpc_reldev := abs(mpf_todouble(c.re));
  end;
  mpc_clear(c);
end;


{---------------------------------------------------------------------------}
procedure mpc_writeln(const s: string; const a: mp_complex);
begin
  write(s);
  mpf_output_decimal_alt(a.re, 28);
  if mp_show_plus or s_mpf_is_neg(a.im) then write(' ')
  else write(' + ');
  mpf_output_decimal_alt(a.im, 28);
  writeln('*I');
end;


{---------------------------------------------------------------------------}
procedure mpf_randomx(var a: mp_float);
  {-random numbers u*2^x for test, u and x are uniform random}
  { u from -0.5 .. 0.5,  x from -0.5..0.5*2^(default_prec/4)}
begin
  mpf_random(a);
  mpf_sub_dbl(a,0.5,a);
  mpf_mul_2k(a,round((random-0.5)*0.25*mpf_get_default_prec),a);
end;


{---------------------------------------------------------------------------}
procedure mpc_randomx(var z: mp_complex);
  {-random numbers u*2^x for test, u and x are uniform random}
  { u from -0.5 .. 0.5,  x from -0.5..0.5*2^(default_prec/4)}
begin
  mpf_randomx(z.re);
  mpf_randomx(z.im);
end;


{---------------------------------------------------------------------------}
procedure func_test;
  {-Tests for other elementary functions}
type
  t_testfunc = procedure(const a: mp_complex; var b: mp_complex);
const
  NUMFUN = 36;
var
  z,u,v,w: mp_complex;
  f,i,k,cnt: integer;
  tf: t_testfunc;
  ts: string[20];
  skip: boolean;
  rd: double;
  fcnt: array[0..NUMFUN-1] of integer;
  dp,dpq: longint;
{$ifndef BIT16}
  const
    imax = 20000;
    imsk = $FF;
{$else}
  {$ifdef IN_IDE}
  const
    imax = 600;
    imsk = $07;
  {$else}
  const
    imax = 2400;
    imsk = $1f;
  {$endif}
{$endif}

  function ldxc(const c: mp_complex): longint;
    {-Maximum ldx(c.re) und ldx(c.tm)}
  var
    mi, ma: longint;
  begin
    mi := s_mpf_ldx(c.re);
    ma := s_mpf_ldx(c.im);
    if mi>ma then ma := mi;
    ldxc := ma;
  end;

begin
  writeln('Function test (compare with double precision):  ');
  dp := mpf_get_default_prec;
  mpc_initp2(z,w,dp);
  mpc_initp2(u,v,dp*2);
  fillchar(fcnt,sizeof(fcnt),0);
  f := 0;
  cnt := 0;
  tf := nil;
  for i:=1 to imax do begin
    skip := false;
    if i and imsk = 0 then write('.');
    mpc_randomx(z);
    k := random(NUMFUN);
    dpq := random(dp div 2);
    inc(fcnt[k]);
    case k of
      0:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_sqrt;
            ts := 'mpc_sqrt';
          end;
      1:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_sqr;
            ts := 'mpc_sqr';
          end;
      2:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_ln;
            ts := 'mpc_ln';
            skip := mpc_is0(z);
            while skip do begin
              mpc_randomx(z);
              skip := mpc_is0(z);
            end;
          end;
      3:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_exp;
            ts := 'mpc_exp';
            skip := ldxc(z) > 22;
            while skip do begin
              mpc_randomx(z);
              skip := ldxc(z) > 22;
            end;
          end;
      4:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_arctan;
            ts := 'mpc_arctan';
          end;
      5:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_cos;
            ts := 'mpc_cos';
            skip := ldxc(z) > 20;
            while skip do begin
              mpc_randomx(z);
              skip := ldxc(z) > 20;
            end;
          end;
      6:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_sin;
            ts := 'mpc_sin';
            skip := ldxc(z) > 22;
            while skip do begin
              mpc_randomx(z);
              skip := ldxc(z) > 22;
            end;
          end;
      7:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_tan;
            ts := 'mpc_tan';
          end;
      8:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_cosh;
            ts := 'mpc_cosh';
            skip := ldxc(z) > 22;
            while skip do begin
              mpc_randomx(z);
              skip := ldxc(z) > 22;
            end;
          end;
      9:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_sinh;
            ts := 'mpc_sinh';
            skip := ldxc(z) > 22;
            while skip do begin
              mpc_randomx(z);
              skip := ldxc(z) > 22;
            end;
          end;
     10:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_tanh;
            ts := 'mpc_tanh';
          end;
     11:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_arctanh;
            ts := 'mpf_arctanh';
            skip := mpc_is1a(z);
            while skip do begin
              mpc_randomx(z);
              skip := mpc_is1a(z);
            end;
          end;
     12:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_arccosh;
            ts := 'mpc_arccosh';
          end;
     13:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_arcsinh;
            ts := 'mpc_arcsinh';
          end;

     14:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_arcsin;
            ts := 'mpc_arcsin';
          end;
     15:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_arccos;
            ts := 'mpc_arccos';
          end;
     16:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_cot;
            ts := 'mpc_cot';
            skip := mpc_is0(z);
            {skip := (ldxc(z) < -25) or (s_mpf_ldx(z.im) < -25);}
            while skip do begin
              mpc_randomx(z);
              skip := mpc_is0(z);
            end;
          end;
     17:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_coth;
            ts := 'mpc_coth';
            skip := mpc_is0(z);
            while skip do begin
              mpc_randomx(z);
              skip := mpc_is0(z);
            end;
          end;
     18:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_sec;
            ts := 'mpc_sec';
            skip := ldxc(z) > 22;
            while skip do begin
              mpc_randomx(z);
              skip := ldxc(z) > 22;
            end;
          end;
     19:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_sech;
            ts := 'mpc_sech';
            skip := ldxc(z) > 22;
            while skip do begin
              mpc_randomx(z);
              skip := ldxc(z) > 22;
            end;
          end;
     20:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_csc;
            ts := 'mpc_csc';
            skip := ldxc(z) > 22;
            while skip do begin
              mpc_randomx(z);
              skip := ldxc(z) > 22;
            end;
          end;
     21:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_csch;
            ts := 'mpc_csch';
            skip := ldxc(z) > 22;
            while skip do begin
              mpc_randomx(z);
              skip := ldxc(z) > 22;
            end;
          end;
     22:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_arccoth;
            ts := 'mpc_arccoth';
          end;
     23:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_arccothc;
            ts := 'mpc_arccothc';
          end;
     24:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_arccotc;
            ts := 'mpc_arccotc';
          end;
     25:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_arccothc;
            ts := 'mpc_arccothc';
          end;
     26:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_arccsc;
            ts := 'mpc_arccsc';
          end;
     27:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_arccsch;
            ts := 'mpc_arccsch';
          end;
     28:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_arcsec;
            ts := 'mpc_arcsec';
          end;
     29:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_arcsech;
            ts := 'mpc_arcsech';
          end;
     30:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_agm1;
            ts := 'mpc_agm1';
          end;
     31:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_exp;
            ts := 'mpc_exp2';
            skip := ldxc(z) > 22;
            while skip do begin
              mpc_randomx(z);
              skip := ldxc(z) > 22;
            end;
          end;
     32:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_exp;
            ts := 'mpc_exp10';
            skip := ldxc(z) > 22;
            while skip do begin
              mpc_randomx(z);
              skip := ldxc(z) > 22;
            end;
          end;
     33:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_ln1p;
            ts := 'mpc_ln1p';
            mpf_random(z.re);
            mpf_sub_dbl(z.re,0.5,z.re);
            mpf_mul_2k(z.re,2-dpq,z.re);
            mpf_random(z.im);
            mpf_sub_dbl(z.im,0.5,z.im);
            mpf_mul_2k(z.im,2-dpq,z.im);
            {mpc_writeln(' ln1p: ', z);}
          end;
     34:  begin
            tf := {$ifdef FPC_ProcVar}@{$endif}mpc_expm1;
            ts := 'mpc_expm1';
            mpf_random(z.re);
            mpf_sub_dbl(z.re,0.5,z.re);
            mpf_mul_2k(z.re,2-dpq,z.re);
            mpf_random(z.im);
            mpf_sub_dbl(z.im,0.5,z.im);
            mpf_mul_2k(z.im,2-dpq,z.im);
            {mpc_writeln('expm1: ', z);}
          end;
     35:  begin
           tf := {$ifdef FPC_ProcVar}@{$endif}mpc_log10;
           ts := 'mpc_log10';
           skip := mpc_is0(z);
           while skip do begin
             mpc_randomx(z);
             skip := mpc_is0(z);
           end;
          end;
    end;

    if not skip then begin
      inc(cnt);
      mpc_copyp(z,u);
      tf(z,w);
      if mp_error<>MP_OKAY then begin
        set_mp_error(0);        {clear error variable}
        writeln(i, ', test of ',ts);
        writeln(' z.re: ', mpf_decimal(z.re,50));
        writeln(' z.im: ', mpf_decimal(z.im,50));
      end;
      tf(u,v);
      rd := mpc_reldev(v,w);
      if rd>4 then begin
        if rd>8 then begin
          write('Failed! #');
          inc(f);
        end
        else write('Bad precision: #');
        writeln(i, ', test of ',ts, ':  rd=',rd:1:1);
        mpc_writeln('z=',z);
      end;
    end;
  end;
  k := imax;
  for i:=0 to NUMFUN-1 do begin
    if fcnt[i]<k then k := fcnt[i];
  end;
  writeln;
{$ifdef debug}
  if z.re.bitprec <> dp then begin
    writeln('z.re.bitprec changed to ', z.re.bitprec);
  end;
  if w.re.bitprec <> dp then begin
    writeln('w.re.bitprec changed to ', w.re.bitprec);
  end;
  if u.re.bitprec <> 2*dp then begin
    writeln('u.re.bitprec changed to ', u.re.bitprec);
  end;
  if v.re.bitprec <> 2*dp then begin
    writeln('v.re.bitprec changed to ', v.re.bitprec);
  end;
{$endif}
  writeln('No. of checks: ',cnt,', failed: ',f, ',  min fct cnt: ',k);
  writeln;
  mpc_clear4(z,u,v,w);
end;



{---------------------------------------------------------------------------}
{----------------------- Basic function test -------------------------------}
{---------------------------------------------------------------------------}
var
  d,z,v,w,cxx: mp_complex;
  x,y: mp_float;

const
  eps_d = 2.2e-16;


{.$define fullwrite}

type
  FNamStr = string[12];

type
  complex = record
              re: double; {real part     }
              im: double; {imaginary part}
            end;


type
  cfunc1 = procedure(const z: mp_complex; var w: mp_complex);
  cfuncx = procedure(const z: mp_complex; var x: mp_float);

var
  maxr: double;

{Test cases from GO V1.1 \math\cmplx\cmath_test.go}
{Taken from DAMath/DAMCmplx test program}

const zv: array[0..9] of complex = (
            (re:  4.979011924883673501; im: +7.738872474578104566),
            (re:  7.738872474578104566; im: -0.276880057192001594),
            (re: -0.276880057192001594; im: -5.010603618271074922),
            (re: -5.010603618271074922; im: +9.636293707198417380),
            (re:  9.636293707198417380; im: +2.926377239243964645),
            (re:  2.926377239243964645; im: +5.229083431459306652),
            (re:  5.229083431459306652; im: +2.727939910436010251),
            (re:  2.727939910436010251; im: +1.825308091680855060),
            (re:  1.825308091680855060; im: -8.685924768575601362),
            (re: -8.685924768575601362; im: +4.979011924883673501));

const t_abs: array[0..9] of double = (
               9.202212066993265031e+00,
               7.743823974229610662e+00,
               5.018247820255774690e+00,
               1.086113737279954516e+01,
               1.007084108492219961e+01,
               5.992244761316694218e+00,
               5.897878405673676230e+00,
               3.282286670067870902e+00,
               8.875643002899041729e+00,
               1.001178549677773199e+01);

const t_arg: array[0..9] of double = (
               0.4995455752345964553*2,     {!! 16-bit}
              -3.576257502185697130e-02,
              -1.625999007401905844e+00,
               2.050293635965911176e+00,
               2.948321315544675621e-01,
               1.060586036725255628e+00,
               4.808455608335830782e-01,
               5.896963416477665942e-01,
              -1.363664772458245503e+00,
               2.621091389538601329e+00);

const t_acos: array[0..9] of complex = (
        (re: 1.001767980470745633;    im: -2.913823271855495378),
        (re: 3.606427612041407370e-2; im: +2.735858443457626093),
        (re: 1.624936546233379670;    im: +2.315953745433590119),
        (re: 2.048565084965074012;    im: -3.079557679120411791),
        (re: 2.962113208907306728e-1; im: -3.000739250820062252),
        (re: 1.066455591493415660;    im: -2.487286502479601136),
        (re: 4.868130745223138770e-1; im: -2.463655912283054555),
        (re: 6.116977071277574248e-1; im: -1.873445885173705526),
        (re: 1.364931128037018133;    im: +2.879352863232879542),
        (re: 2.618931048568298831;    im: -2.995654330289876780));

const t_acosh: array[0..9] of complex = (
        (re: 2.913823271855495378;  im: +1.001767980470745633),
        (re: 2.735858443457626093;  im: -3.606427612041407370e-2),
        (re: 2.315953745433590119;  im: -1.624936546233379670),
        (re: 3.079557679120411791;  im: +2.048565084965074012),
        (re: 3.000739250820062252;  im: +2.962113208907306728e-1),
        (re: 2.487286502479601136;  im: +1.066455591493415660),
        (re: 2.463655912283054555;  im: +4.868130745223138769e-1),
        (re: 1.873445885173705526;  im: +6.116977071277574248e-1),
        (re: 2.879352863232879542;  im: -1.364931128037018133),
        (re: 2.995654330289876779;  im: +2.618931048568298831));

const t_asin: array[0..9] of complex = (
        (re:  5.690283463241509864e-1;  im: +2.913823271855495378),
        (re:  1.534732050674482545;     im: -2.735858443457626093),
        (re: -5.414021943848305114e-2;  im: -2.315953745433590119),
        (re: -4.777687581701773928e-1;  im: +3.079557679120411791),
        (re:  1.274585005904165946;     im: +3.000739250820062252),
        (re:  5.043407353014809591e-1;  im: +2.487286502479601136),
        (re:  1.083983252272582742;     im: +2.463655912283054555),
        (re:  9.590986196671391944e-1;  im: +1.873445885173705526),
        (re:  2.058651987578784861e-1;  im: -2.879352863232879542),
        (re: -1.048134721773402212;     im: +2.995654330289876780));

const t_asinh: array[0..9] of complex = (
        (re:  2.911376046941529568;  im: +9.963945954570432676e-1),
        (re:  2.744175542399425906;  im: -3.546830878900050060e-2),
        (re: -2.296213646252069051;  im: -1.514466356569015189),
        (re: -3.077123345929572597;  im: +1.089557796719401385),
        (re:  3.004836610092364742;  im: +2.934697916981922004e-1),
        (re:  2.480005937079536316;  im: +1.054586860604916571),
        (re:  2.471877383830958561;  im: +4.750234436425080336e-1),
        (re:  1.891074358808015914;  im: +5.688292557256360234e-1),
        (re:  2.873542642336734188;  im: -1.362376149648891421),
        (re: -2.998175058617247722;  im: +5.183571985225367506e-1));

const t_atan: array[0..9] of complex = (
        (re:  1.511574707933274136;  im: +9.132440360395449438e-2),
        (re:  1.442450432348260256;  im: -4.541613264280391150e-3),
        (re: -1.559348870363053267;  im: -2.016329540924836246e-1),
        (re: -1.528061947244588987;  im: +8.172155623067200375e-2),
        (re:  1.475990916324079968;  im: +2.860296932069164436e-2),
        (re:  1.487735377204654893;  im: +1.456687715320728166e-1),
        (re:  1.420698392777919189;  im: +7.683048612788070225e-2),
        (re:  1.316223606049893336;  im: +1.603131300046753064e-1),
        (re:  1.547345068430370358;  im: -1.106490750793908248e-1),
        (re: -1.484146234018525399;  im: +4.934185030502439949e-2));

const t_atanh: array[0..9] of complex = (
        (re:  5.837502793896850906e-2;  im: +1.479348849510533446),
        (re:  1.297734349779038123e-1;  im: -1.566100941046356133),
        (re: -1.057645606734725207e-2;  im: -1.374369865840228455),
        (re: -4.221859567868835888e-2;  im: +1.489143396816640561),
        (re:  9.521899799131672206e-2;  im: +1.541688409877711033),
        (re:  7.996545936689032386e-2;  im: +1.425251035387319270),
        (re:  1.505124547198072622e-1;  im: +1.490743253301630380),
        (re:  2.508207293399398771e-1;  im: +1.392057665392187516),
        (re:  2.289610881579713585e-2;  im: -1.460922498928286421),
        (re: -8.665624101841876131e-2;  im: +1.520790203693509348));

const t_conj: array[0..9] of complex = (
        (re:  4.979011924883673501;  im: -7.738872474578104566),
        (re:  7.738872474578104566;  im: +0.276880057192001594),
        (re: -0.276880057192001594;  im: +5.010603618271074922),
        (re: -5.010603618271074922;  im: -9.636293707198417380),
        (re:  9.636293707198417380;  im: -2.926377239243964645),
        (re:  2.926377239243964645;  im: -5.229083431459306652),
        (re:  5.229083431459306652;  im: -2.727939910436010251),
        (re:  2.727939910436010251;  im: -1.825308091680855060),
        (re:  1.825308091680855060;  im: +8.685924768575601362),
        (re: -8.685924768575601362;  im: -4.979011924883673501));

const t_cos: array[0..9] of complex = (
        (re:  3.024540920601483938e+02;  im: +1.107379757251707165e+03),
        (re:  1.192858682649064973e-01;  im: +2.785755412233306554e-01),
        (re:  7.214439430452830660e+01;  im: -2.050012966707604417e+01),
        (re:  2.249219525384039842e+03;  im: -7.317363745602773587e+03),
        (re: -9.148222970032421760e+00;  im: +1.953124661113563542e+00),
        (re: -9.116081175857732248e+01;  im: -1.992669213569952232e+01),
        (re:  3.795639179042704640e+00;  im: +6.623513350981458399e+00),
        (re: -2.914484073249886956e+00;  im: -1.214620271628002918e+00),
        (re: -7.451234825012997439e+02;  im: +2.864169231448808081e+03),
        (re: -5.371977967039319076e+01;  im: +4.893348341339375831e+01));

const t_cosh: array[0..9] of complex = (
        (re:  8.346383835230182494e+00;  im: +7.218105788642584642e+01),
        (re:  1.104219673799193670e+03;  im: -3.137963868927757538e+02),
        (re:  3.051485206773701585e-01;  im: -2.680538473010529785e-01),
        (re: -7.332947286841879334e+01;  im: +1.574445942284918251e+01),
        (re: -7.478643293945957536e+03;  im: +1.634838220991335393e+03),
        (re:  4.622316522966235702e+00;  im: -8.088695185566375256e+00),
        (re: -8.544333183278877406e+01;  im: +3.750583612012816646e+01),
        (re: -1.934457815021493925e+00;  im: +7.372585961176722818e+00),
        (re: -2.352958770061749348e+00;  im: -2.034982010440878359e+00),
        (re:  7.797564575321347482e+02;  im: +2.854935071681917656e+03));

const t_exp: array[0..9] of complex = (
        (re:  1.669197736864670815e+01;  im: +1.443689510950766369e+02),
        (re:  2.208438928625258345e+03;  im: -6.275928928490921124e+02),
        (re:  2.227538273122775173e-01;  im: +7.246828402833419125e-01),
        (re: -6.518298595815354900e-03;  im: -1.399658379151938609e-03),
        (re: -1.495728652408401575e+04;  im: +3.269676455931135689e+03),
        (re:  9.218158701983105936e+00;  im: -1.622398529108495601e+01),
        (re: -1.708817571685304084e+02;  im: +7.501382609870410714e+01),
        (re: -3.852461315830959613e+00;  im: +1.480842042315607322e+01),
        (re: -4.586775503301407380e+00;  im: -4.178501081246873415e+00),
        (re:  4.451337963005453491e-05;  im: -1.629775742054429159e-04));

const t_exp2: array[0..9] of complex = (
        (re:  19.13114851867412526;     im: -25.07258411828447256),
        (re:  209.6935289144531275;     im: -40.74558517972284900),
        (re: -0.7804385630056867110;    im: +0.2686222841553663176),
        (re:  0.2861826306152657883e-1; im: +0.1197110279008295110e-1),
        (re: -351.5990610189685966;     im: +713.9352210484824750),
        (re: -6.732606237487401262;     im: -3.530194636296673789),
        (re: -11.80081515033121407;     im: +35.60206402414627666),
        (re:  1.993191920305541285;     im: +6.318148050158053523),
        (re:  3.422374229625497396;     im: +0.9198168024611665233),
        (re: -0.2312711405020745712e-2; im: -0.7397935321601635477e-3));

const t_exp10: array[0..9] of complex = (
        (re:  49041.36455339954630;     im: -81692.40122564724781),
        (re:  44044545.49543944410;     im: -32624981.77369520256),
        (re:  0.2725684221615126522;    im: +0.4528963789852567103),
        (re: -0.9569591974910356937e-5; im: -0.1912347033434410590e-5),
        (re:  3887641543.827246551;     im: 1902205053.527650575),
        (re:  729.9849992944069395;     im: -423.7594183570774552),
        (re:  169466.0359719999248;     im: -317.1619584673702657),
        (re: -260.6749487307233164;     im: -466.6139307539978187),
        (re:  27.28833232049515759;     im: -61.06164877299231211),
        (re:  0.9315994876725179977e-9; im: -0.1838420354078803348e-8));

const t_expm1: array[0..9] of complex = ( {exp(a[i]/16)-1}
        (re:  0.2084614314764963823;    im: +0.6348007474939909575),
        (re:  0.6217888859800103407;    im: -0.2806786428857771341e-1),
        (re: -0.6495773464318968003e-1; im: -0.3027838022489718850),
        (re: -0.3975095971688073819;    im: +0.4141953035763729656),
        (re:  0.7957958947511262505;    im: +0.3321606008092035376),
        (re:  0.1371384618852060061;    im: +0.3854593328378902681),
        (re:  0.3664447065220901995;    im: +0.2352576867156370654),
        (re:  0.1781845733786736222;    im: +0.1349955131114415004),
        (re: -0.4030059291753222991e-1; im: -0.5790231209681929250),
        (re: -0.4468309463182119146;    im: +0.1779202851051918940));

const t_log: array[0..9] of complex = (
        (re: 2.219443897217919443e+00;  im: +9.990911504691929106e-01),
        (re: 2.046895619115416726e+00;  im: -3.576257502185697130e-02),
        (re: 1.613080832985386044e+00;  im: -1.625999007401905844e+00),
        (re: 2.385191039482300871e+00;  im: +2.050293635965911176e+00),
        (re: 2.309644227067992300e+00;  im: +2.948321315544675621e-01),
        (re: 1.790466093397465611e+00;  im: +1.060586036725255628e+00),
        (re: 1.774592693984175167e+00;  im: +4.808455608335830782e-01),
        (re: 1.188540335004534243e+00;  im: +5.896963416477665942e-01),
        (re: 2.183310783767908259e+00;  im: -1.363664772458245503e+00),
        (re: 2.303762948727325917e+00;  im: +2.621091389538601329e+00));

const t_sin: array[0..9] of complex = (
        (re: -1.107380177424023354e+03;  im: +3.024539773002502192e+02),
        (re:  1.031703752140075936e+00;  im: -3.220897979992957024e-02),
        (re: -2.050195209727142980e+01;  im: -7.213798134824079884e+01),
        (re:  7.317363808034633864e+03;  im: +2.249219506193664343e+03),
        (re: -1.964375633631808178e+00;  im: -9.095826471387040446e+00),
        (re:  1.992783647158514838e+01;  im: -9.115557694101913504e+01),
        (re: -6.680335650741921444e+00;  im: +3.763353833142432513e+00),
        (re:  1.279402816665745915e+00;  im: -2.766909209979578116e+00),
        (re:  2.864169394953525959e+03;  im: +7.451234399649871203e+02),
        (re: -4.893811726244659136e+01;  im: -5.371469305562194636e+01));

const t_sinh: array[0..9] of complex = (
        (re:  8.345593533416525658e+00;  im: +7.218789320865079048e+01),
        (re:  1.104219254826064675e+03;  im: -3.137965059563163586e+02),
        (re: -8.239469336509264113e-02;  im: +9.927366875843948910e-01),
        (re:  7.332295456982297798e+01;  im: -1.574585908122833445e+01),
        (re: -7.478643230138058210e+03;  im: +1.634838234939800296e+03),
        (re:  4.595842179016870234e+00;  im: -8.135290105518580753e+00),
        (re: -8.543842533574163435e+01;  im: +3.750798997857594068e+01),
        (re: -1.918003500809465688e+00;  im: +7.435834461979350404e+00),
        (re: -2.233816733239658031e+00;  im: -2.143519070805995056e+00),
        (re: -7.797564130187551181e+02;  im: -2.854935234659491861e+03));

const t_sqrt: array[0..9] of complex = (
        (re: 2.662820308608613054e+00;  im: +1.453134567428218523e+00),
        (re: 2.782327842725198625e+00;  im: -4.975690731700522453e-02),
        (re: 1.539702530208964276e+00;  im: -1.627133657301663754e+00),
        (re: 1.710341158150687526e+00;  im: +2.817067712273758968e+00),
        (re: 3.139039247295310338e+00;  im: +4.661262584985865325e-01),
        (re: 2.111708076482241764e+00;  im: +1.238117022351427323e+00),
        (re: 2.358703228167225670e+00;  im: +5.782711190325734994e-01),
        (re: 1.733526258887341048e+00;  im: +5.264725822072126914e-01),
        (re: 2.313109497470871653e+00;  im: -1.877542930430378557e+00),
        (re: 8.142053574504808624e-01;  im: +3.057589758727724852e+00));

const t_tan: array[0..9] of complex = (
        (re: -1.928757919086441129e-07;  im: +1.000000326749916907e+00),
        (re:  1.242412685364183792e+00;  im: -3.171496938831333701e+00),
        (re: -4.674512625158779523e-05;  im: -9.999243922526395929e-01),
        (re:  4.792363401193648193e-09;  im: +1.000000007058933345e+00),
        (re:  2.345740824080089140e-03;  im: +9.947733046570988661e-01),
        (re: -2.396030789494815566e-05;  im: +9.999478134541859143e-01),
        (re: -7.370204836644931341e-03;  im: +1.004355341341713899e+00),
        (re: -3.691803847992048527e-02;  im: +9.647507199346954807e-01),
        (re: -2.781955256713729368e-08;  im: -1.000000049848910609e+00),
        (re:  9.428159006403047888e-05;  im: +9.999911934086371818e-01));

const t_tanh: array[0..9] of complex = (
        (re:  1.000092198122514475e+00;  im: +2.160986245871518020e-05),
        (re:  9.999996772753199321e-01;  im: -1.995376322295965887e-07),
        (re: -1.765485739548037261e+00;  im: +1.702421632555285245e+00),
        (re: -9.999189442732736453e-01;  im: +3.649060704944737019e-05),
        (re:  9.999999922462233374e-01;  im: -3.560088949517914775e-09),
        (re:  1.002932493336732686e+00;  im: -4.948790309797102353e-03),
        (re:  9.999611306478801249e-01;  im: -4.226995742097032481e-05),
        (re:  1.007478418931634003e+00;  im: -4.194050814891697808e-03),
        (re:  9.938553422971832711e-01;  im: +5.144217985914355503e-02),
        (re: -1.000000049160498243e+00;  im: -2.901873195374433112e-08));

{computed with Maple V}
const t_cbrt:  array[0..9] of complex = (
        (re: 1.980409351452068568;  im: +0.6850519424925463137),
        (re: 1.978279414982640533;  im: -0.2358390581971672100e-1),
        (re: 1.466680172613141937;  im: -0.8831630365740902142),
        (re: 1.717210422352255150;  im: +1.398414056434914519),
        (re: 2.149089778617387532;  im: +0.2118895207076571871),
        (re: 1.704009405612443111;  im: +0.6288349012096719349),
        (re: 1.783593916153138361;  im: +0.2883512525266128085),
        (re: 1.457518627100494964;  im: +0.2902456331911219456),
        (re: 1.860217302730305655;  im: -0.9090607999413698775),
        (re: 1.383682302674507700;  im: +1.652470362294393105));

const t_cot:  array[0..9] of complex = (
        (re: -0.1928756658644007560e-6;  im: -0.9999996732501526571),
        (re:  0.1070862438142847477;     im: +0.2733581992914031586),
        (re: -0.4675219553854650241e-4;  im: +1.000075611278721583),
        (re:  0.4792363333535701170e-8;  im: -0.9999999929410666817),
        (re:  0.2370442182397188751e-2;  im: -1.005248567563544041),
        (re: -0.2396280888837780351e-4;  im: -1.000052188695205540),
        (re: -0.7306028886391044333e-2;  im: -0.9956099319736191871),
        (re: -0.3960708664430225805e-1;  im: -1.035021548487447295),
        (re: -0.2781954979358870134e-7;  im: +0.9999999501510911020),
        (re:  0.9428324984674023356e-4;  im: -1.000008797779666557));

const t_coth:  array[0..9] of complex = (
        (re:  0.9999078099103386497;  im: -0.2160587822215018317e-4),
        (re:  1.000000322724744404;   im: +0.1995377610210880360e-6),
        (re: -0.2935050890604510592;  im: -0.2830209282854317464),
        (re: -1.000081060965401525;   im: -0.3649652326549915645e-4),
        (re:  1.000000007753776710;   im: +0.35600890047261845990e-8),
        (re:  0.9970518052990871675;  im: +0.49197731105648616632e-2),
        (re:  1.000038869076047474;   im: +0.42273243548748589534e-4),
        (re:  0.9925598917226418365;  im: +0.41319461980362737256e-2),
        (re:  1.003494165385392379;   im: -0.51941087547045132368e-1),
        (re: -0.9999999508395033317;  im: +0.29018729100593874631e-7));

const t_acot:  array[0..9] of complex = ({arccot(z) = arctan(1/z)}
        (re:  0.5922161886162248337e-1;  im: -0.9132440360395449438e-1),
        (re:  0.1283458944466363632;     im: +0.4541613264280391150e-2),
        (re: -0.1144745643184335178e-1;  im: +0.2016329540924836246),
        (re: -0.4273437955030763245e-1;  im: -0.8172155623067200375e-1),
        (re:  0.9480541047081665141e-1;  im: -0.2860296932069164436e-1),
        (re:  0.8306094959024172596e-1;  im: -0.1456687715320728166),
        (re:  0.1500979340169774302;     im: -0.7683048612788070225e-1),
        (re:  0.2545727207450032827;     im: -0.1603131300046753064),
        (re:  0.2345125836452626135e-1;  im: +0.1106490750793908248),
        (re: -0.8665009277637122049e-1;  im: -0.4934185030502439949e-1));

const t_acotc:  array[0..9] of complex = ( {arccotc(z) = Pi/2 - arctan(z)}
        (re: 0.5922161886162248337e-1;  im: -0.9132440360395449438e-1),
        (re: 0.1283458944466363632;     im: +0.4541613264280391150e-2),
        (re: 0.3130145197157949887e1;   im: +0.2016329540924836246),
        (re: 0.3098858274039485606e1;   im: -0.8172155623067200375e-1),
        (re: 0.9480541047081665141e-1;  im: -0.2860296932069164436e-1),
        (re: 0.8306094959024172596e-1;  im: -0.1456687715320728166),
        (re: 0.1500979340169774302;     im: -0.7683048612788070225e-1),
        (re: 0.2545727207450032827;     im: -0.1603131300046753064),
        (re: 0.2345125836452626135e-1;  im: +0.1106490750793908248),
        (re: 0.3054942560813422018e1;   im: -0.4934185030502439949e-1));

const t_acoth: array[0..9] of complex = ({arccoth(z) = arctanh(1/z)}
        (re:  0.5837502793896850906e-1;  im: -0.9144747728436317341e-1),
        (re:  0.1297734349779038123;     im: +0.4695385748540486505e-2),
        (re: -0.1057645606734725207e-1;  im: +0.1964264609546681643),
        (re: -0.4221859567868835888e-1;  im: -0.8165292997825605856e-1),
        (re:  0.9521899799131672206e-1;  im: -0.2910791691718558618e-1),
        (re:  0.7996545936689032386e-1;  im: -0.1455452914075773492),
        (re:  0.1505124547198072622;     im: -0.8005307349326623874e-1),
        (re:  0.2508207293399398771;     im: -0.1787386614027091028),
        (re:  0.2289610881579713585e-1;  im: +0.1098738278666101983),
        (re: -0.8665624101841876131e-1;  im: -0.5000612310138727122e-1));

const t_acothc:  array[0..9] of complex = ( {arccothc(z) = arctanh(z) - Pi/2}
        (re:  0.5837502793896850906e-1;  im: +3.050145176305430065),
        (re:  0.1297734349779038123;     im: +4.695385748540486505e-3),
        (re: -0.1057645606734725207e-1;  im: +1.964264609546681643e-1),
        (re: -0.4221859567868835888e-1;  im: +3.059939723611537180),
        (re:  0.9521899799131672206e-1;  im: +3.112484736672607652),
        (re:  0.7996545936689032386e-1;  im: +2.996047362182215889),
        (re:  0.1505124547198072622;     im: +3.061539580096527000),
        (re:  0.2508207293399398771;     im: +2.962853992187084136),
        (re:  0.2289610881579713585e-1;  im: +1.098738278666101983e-1),
        (re: -0.8665624101841876131e-1;  im: +3.091586530488405967));

const t_sec: array[0..9] of complex = (
        (re:  0.2295199148880376835e-3;  im: -0.8403447475347837991e-3),
        (re:  0.12989370166232056268e1;  im: -0.3033486595555792470e1),
        (re:  0.1282551289556627290e-1;  im: +0.3644422826478168455e-2),
        (re:  0.3838075143333806804e-4;  im: +0.1248637209030750447e-3),
        (re: -0.1045455286208551367;     im: -0.2232023102491372549e-1),
        (re: -0.1046938934796870726e-1;  im: +0.2288486624474527028e-2),
        (re:  0.6513009749079909522e-1;  im: -0.1136541304196971542),
        (re: -0.2923394633451341215;     im: +0.1218333775212251219),
        (re: -0.8507263191619357876e-4;  im: -0.3270094427232153096e-3),
        (re: -0.1017362163340791656e-1;  im: -0.9267177723122378378e-2));

const t_csc: array[0..9] of complex = (
        (re: -0.8403445172210722399e-3;  im: -0.2295196778103877952e-3),
        (re:  0.9683267193972526473;     im: +0.3023039867801472170e-1),
        (re: -0.3645298006835056261e-2;  im: +0.1282631226422795817e-1),
        (re:  0.1248637202056048708e-3;  im: -0.3838075056401858522e-4),
        (re: -0.2268519939650578464e-1;  im: +0.1050413340741458162),
        (re:  0.2288856933581577076e-2;  im: +0.1046988089317075064e-1),
        (re: -0.1136310234293167699;     im: -0.6401381157234571038e-1),
        (re:  0.1376788855137337301;     im: +0.2977521788958189069),
        (re:  0.3270094287888337102e-3;  im: -0.8507261857816022584e-4),
        (re: -0.9268218455820426031e-2;  im: +0.1017283739905681490e-1));

const t_sech: array[0..9] of complex = (
        (re:  0.1580824202030253160e-2;  im: -0.1367125757545055034e-1),
        (re:  0.8379461465333227632e-3;  im: +0.2381269591839372671e-3),
        (re:  1.849738276901817540;      im: +1.624879126147844399),
        (re: -0.1303611992058492371e-1;  im: -0.2798965451304095563e-2),
        (re: -0.1276157982057134419e-3;  im: -0.2789692947087167673e-4),
        (re:  0.5325691222430206498e-1;  im: +0.9319546321990157438e-1),
        (re: -0.9812894425422896831e-2;  im: -0.4307425779044763368e-2),
        (re: -0.3329694810529869903e-1;  im: -0.1269009901611255701),
        (re: -0.2431353695905795505;     im: +0.2102782715592330703),
        (re:  0.8902676617781153125e-4;  im: -0.3259551551312227504e-3));

const t_csch: array[0..9] of complex = (
        (re:  0.1580383086179010325e-2;  im: -0.1367003137608408583e-1),
        (re:  0.8379463694439584530e-3;  im: +0.2381272032352972409e-3),
        (re: -0.8303279906660916594e-1;  im: -1.000424936846338354),
        (re:  0.1303707448854306353e-1;  im: +0.2799668111199677253e-2),
        (re: -0.1276157990959022940e-3;  im: -0.2789693014150183876e-4),
        (re:  0.5264139994391948945e-1;  im: +0.9318271677380037815e-1),
        (re: -0.9813093754703538708e-2;  im: -0.4308008027580901967e-2),
        (re: -0.3252486714226639958e-1;  im: -0.1260944142519527329),
        (re: -0.2330628426706680808;     im: +0.2236417341347029484),
        (re: -0.8902675234240714349e-4;  im: +0.3259551416905490430e-3));

const t_powxx:  array[0..9] of complex = ( {(2-0.75*I),)^a[i]}
        (re: -411.5034488394179369;     im: -569.8659411483985571),
        (re: -317.9550520992117476;     im: -49.67441240169941263),
        (re: -1.136453275749506582e-1;  im: +0.7153440743397040163e-1),
        (re: -6.732970677690146106e-1;  im: +0.2184973370139234927),
        (re: 1407.2720056523953442;     im: -4048.893677791971718),
        (re: -58.66890468069053621;     im: +13.30164259070217028),
        (re: 138.13717633016558385;     im: +27.18131225346363694),
        (re: 14.015416563592191076;     im: +6.034734380815592956),
        (re: 1.0103523461390175547e-1;  im: -0.1454685283138031456),
        (re: 6.6984084283828055675e-3;  im: +0.4699792933223983569e-2));

const t_asec: array[0..9] of complex = (
        (re: 1.512210183685502006;  im: +0.9141852458058421885e-1),
        (re: 1.441384210511503894;  im: -0.4656140008081491080e-2),
        (re: 1.581579935950300462;  im: -0.1976905676742241681),
        (re: 1.613143307981322738;  im: +0.8167069354626031696e-1),
        (re: 1.475680840833964570;  im: +0.2898047671654966331e-1),
        (re: 1.490066035968365363;  im: +0.1455895139329430183),
        (re: 1.420374427615751175;  im: +0.7923568279285739895e-1),
        (re: 1.318713053844599337;  im: +0.1740762424309732395),
        (re: 1.547763376821836497;  im: -0.1100664831786344994),
        (re: 1.657452099507347186;  im: +0.4983941833819650269e-1));

const t_acsc: array[0..9] of complex = (
        (re:  0.5858614310939461327e-1;  im: -0.9141852458058421885e-1),
        (re:  0.1294121162833927252;     im: +0.4656140008081491080e-2),
        (re: -0.1078360915540384276e-1;  im: +0.1976905676742241681),
        (re: -0.4234698118642611903e-1;  im: -0.8167069354626031696e-1),
        (re:  0.9511548596093204879e-1;  im: -0.2898047671654966331e-1),
        (re:  0.8073029082653125666e-1;  im: -0.1455895139329430183),
        (re:  0.1504218991791454444;     im: -0.7923568279285739895e-1),
        (re:  0.2520832729502972825;     im: -0.1740762424309732395),
        (re:  0.2303294997306012269e-1;  im: +0.1100664831786344994),
        (re: -0.8665577271245056663e-1;  im: -0.4983941833819650269e-1));

const t_asech: array[0..9] of complex = (
        (re: 0.9141852458058421885e-1;  im: -1.512210183685502006),
        (re: 0.4656140008081491080e-2;  im: +1.441384210511503894),
        (re: 0.1976905676742241681;     im: +1.581579935950300463),
        (re: 0.8167069354626031696e-1;  im: -1.613143307981322738),
        (re: 0.2898047671654966331e-1;  im: -1.475680840833964570),
        (re: 0.1455895139329430183;     im: -1.490066035968365363),
        (re: 0.7923568279285739895e-1;  im: -1.420374427615751175),
        (re: 0.1740762424309732395;     im: -1.318713053844599337),
        (re: 0.1100664831786344994;     im: +1.547763376821836497),
        (re: 0.4983941833819650269e-1;  im: -1.657452099507347186));

const t_acsch: array[0..9] of complex = (
        (re:  0.5900944583838133397e-1;  im: -0.9135699399171889898e-1),
        (re:  0.1286983771056428065;     im: +0.4579261716317799017e-2),
        (re: -0.1121885689753266316e-1;  im: +0.2002931943353766317),
        (re: -0.4260487376311824908e-1;  im: -0.8170500960799509011e-1),
        (re:  0.9490868978698757836e-1;  im: -0.2872800740986223793e-1),
        (re:  0.8227811649941698836e-1;  im: -0.1456514294348292370),
        (re:  0.1502144285132965397;     im: -0.7762434097558978131e-1),
        (re:  0.2539521606134725062;     im: -0.1648526110697654025),
        (re:  0.2331051248997436416e-1;  im: +0.1104541052974145886),
        (re: -0.8665269393397101588e-1;  im: -0.4950727938358179074e-1));


const t_sqr:  array[0..9] of complex = (
        (re: -35.09958742964881212;  im: +77.06387667215681207),
        (re:  59.81348461171198962;  im: -4.285478906725584989),
        (re: -25.02948605336054182;  im: +2.774672432786690695),
        (re: -67.75200779196063026;  im: -96.56729623202236066),
        (re:  84.29447266502668985;  im: +56.39886115083058811),
        (re: -18.77962978679710908;  im: +30.60454147186048605),
        (re:  19.90165737821260974;  im: +28.52925077535505228),
        (re:   4.10990652539402285;  im: +9.958661584275993084),
        (re: -72.11353945579950930;  im: -31.70897752762440709),
        (re:  50.65472933722129051;  im: -86.49464600276076246));

const t_inv:  array[0..9] of complex = (
        (re:  0.5879747708341167711e-1;  im: -0.9138885060735870098e-1),
        (re:  0.1290525960549594605;     im: +0.4617221732733286767e-2),
        (re: -0.1099480336617089353e-1;  im: +0.1989691929690424442),
        (re: -0.4247559138301920663e-1;  im: -0.8168821665740785727e-1),
        (re:  0.9501201804472894140e-1;  im: -0.2885352143771125834e-1),
        (re:  0.8149880137464069725e-1;  im: -0.1456285355957822296),
        (re:  0.1503259447498211211;     im: -0.7842294919027377673e-1),
        (re:  0.2532105413089933676;     im: -0.1694272106882013405),
        (re:  0.2317055986689894902e-1;  im: +0.1102595998817552844),
        (re: -0.8665487317820390140e-1;  im: -0.4967296613764175193e-1));

const t_neg: array[0..9] of complex = (
        (re: -4.979011924883673501;  im: -7.738872474578104566),
        (re: -7.738872474578104566;  im: +0.276880057192001594),
        (re:  0.276880057192001594;  im: +5.010603618271074922),
        (re:  5.010603618271074922;  im: -9.636293707198417380),
        (re: -9.636293707198417380;  im: -2.926377239243964645),
        (re: -2.926377239243964645;  im: -5.229083431459306652),
        (re: -5.229083431459306652;  im: -2.727939910436010251),
        (re: -2.727939910436010251;  im: -1.825308091680855060),
        (re: -1.825308091680855060;  im: +8.685924768575601362),
        (re:  8.685924768575601362;  im: -4.979011924883673501));

const t_add: array[0..9] of complex = (
        (re:   6.979011924883673501;  im: +6.988872474578104566),
        (re: 2*4.869436237289052283;  im: -1.026880057192001594),    {!! 16-bit}
        (re:   1.723119942807998406;  im: -5.760603618271074922),
        (re:  -3.010603618271074922;  im: +8.886293707198417380),
        (re:  11.63629370719841738;   im: +2.176377239243964645),
        (re:   4.926377239243964645;  im: +4.479083431459306652),
        (re:   7.229083431459306652;  im: +1.977939910436010251),
        (re:   4.727939910436010251;  im: +1.075308091680855060),
        (re:   3.825308091680855060;  im: -9.435924768575601362),
        (re:  -6.685924768575601362;  im: +4.229011924883673501));

const t_sub: array[0..9] of complex = (
        (re:   2.979011924883673501;  im: +8.488872474578104566),
        (re:   5.738872474578104566;  im: +0.4731199428079984060),
        (re:  -2.276880057192001594;  im: -4.260603618271074922),
        (re:  -7.010603618271074922;  im: +10.38629370719841738),
        (re:   7.636293707198417380;  im: +3.676377239243964645),
        (re:   0.9263772392439646453; im: +5.979083431459306652),
        (re:   3.229083431459306652;  im: +3.477939910436010251),
        (re:   0.7279399104360102513; im: +2.575308091680855060),
        (re:  -0.1746919083191449396; im: -7.935924768575601362),
        (re: -10.68592476857560136;   im: +5.729011924883673501));

const t_mul: array[0..9] of complex = (
        (re:  15.76217820570092543;   im: +11.74348600549345401),
        (re:  15.27008490626220794;   im: -6.357914470317581612),
        (re:  -4.311712828087309379;  im: -4.906773596824074324*2),  {!! 16-bit}
        (re:  -2.793986956143336808;  im: +23.03054012810014095),
        (re:  21.46737034382980824;   im: -1.374465801910883744),
        (re:   9.774567052082409280;  im: +8.263383933485639821),
        (re:  12.50412179574562099;   im: +1.534067247277540513),
        (re:   6.824860889632661798;  im: +1.604661250534702432),
        (re:  -2.863827393069990901;  im: -18.74083060591184402),
        (re: -13.63759059348844760;   im: +16.47246742619904802));

const t_div: array[0..9] of complex = (
        (re:  0.4905331621130432848e-1; im: -0.2268758090272761598),
        (re:  0.2615681084094688860;    im: -0.8755500357575302183e-1),
        (re:  0.1272372879944400461;    im: +0.4061844884627130586),
        (re: -0.1462173452590943062;    im: -0.1315197397775513096),
        (re:  0.1683838950111744391;    im: -0.1289660564089692227),
        (re:  0.5377620105244472228e-1; im: -0.3523811722225449822),
        (re:  0.2418346776069369096;    im: -0.2695903569429133943),
        (re:  0.3793506746018357300;    im: -0.5287623273581477066),
        (re:  0.1290358196451143614;    im: +0.2031412798633363571),
        (re: -0.2105644709596391168;    im: -0.3435477739163057780e-1));

const t_agm1: array[0..9] of complex = ( {GaussAGM(1.0,a[i]))}
        (re:  2.878673726411520425;     im: +2.580653200903772245),
        (re:  3.531201684127789528;     im: -0.9023401208084259949e-1),
        (re:  0.9934595716181443242;    im: -2.104797448361593304),
        (re:  0.7830183589745715617e-1; im: +3.978130824808563803),
        (re:  4.160918824010985688;     im: +0.9138486199644716756),
        (re:  2.074229386841947800;     im: +1.905059674514581834),
        (re:  2.729177347872881079;     im: +0.9464689230365528842),
        (re:  1.801512435671403332;     im: +0.7149744151992484714),
        (re:  1.975459466518640909;     im: -3.076448883628428563),
        (re: -1.449703738694954291;     im: +3.154768475274991673));


const t_agm2: array[0..9] of complex = ( {GaussAGM(exp(a[i]),a[i]))}
        (re: +12.16309456638125043;   im:  +53.33644369891215670),
        (re: +494.2620706993210316;   im:  -122.4376837837874231),
        (re: +1.117754846535157115;   im:  -1.404706300714706494),
        (re: -1.127101991823508270;   im:  +1.556378105311070252),
        (re: -2307.975892171818871;   im:  +1286.538783417612324),
        (re: +8.506796287360170147;   im:  -3.028866929393394456),
        (re: -36.31761245663011883;   im:  +41.21258416297376713),
        (re: +1.054979206135114661;   im:  +7.536352713420809473),
        (re: -1.820030683618763057;   im:  -6.747929223442930243),
        (re: -1.180011422928028947;   im:  +4.071305568959347168e-1));


const t_ln1p: array[0..9] of complex = ( {ln(1+0.125*a[i])}
        (re:  0.6359870559592973467;  im: +0.5376653501249619215),
        (re:  0.6768467816638516329;  im: -0.1759030068786516479e-1),
        (re:  0.1404274389811349238;  im: -0.5755169025868995753),
        (re:  0.2320372186187899212;  im: +1.269987558093937849),
        (re:  0.8040975381430114584;  im: +0.1644311191286016814),
        (re:  0.4148522451170837044;  im: +0.4463606088755443519),
        (re:  0.5237973744865404404;  im: +0.2033573899869711913),
        (re:  0.3076791480358353793;  im: +0.1685313306112030357),
        (re:  0.4942532759028938344;  im: -0.7239248008962038688),
        (re: -0.4648096496012578213;  im: +1.707697826464583909));

const t_log10: array[0..9] of complex = (
        (re: 0.963892237455590425;  im: +0.4338997735671419493),
        (re: 0.8889554724137657949; im: -0.1553148899064354825e-1),
        (re: 0.7005521046294541231; im: -0.7061623964948124322),
        (re: 1.035875306732244531;  im: +0.8904312123813498016),
        (re: 1.003065742975330237;  im: +0.1280439678218788748),
        (re: 0.7775895443973916253; im: +0.4606066633334181087),
        (re: 0.7706958146231532704; im: +0.2088285737176995220),
        (re: 0.5161765090119115614; im: +0.2561018671761597762),
        (re: 0.9481998256702663974; im: -0.5922320858444695228),
        (re: 1.000511536245441714 ; im: +1.138325527040741282));

{---------------------------------------------------------------------------}
procedure cpowxx(const z: mp_complex; var w: mp_complex);
begin
  mpc_pow(cxx,z,w);
end;


{---------------------------------------------------------------------------}
procedure cnrootx2(const z: mp_complex; var w: mp_complex);
begin
  mpc_nroot(z,2,w);
end;


{---------------------------------------------------------------------------}
procedure cnrootx3(const z: mp_complex; var w: mp_complex);
begin
  mpc_nroot(z,3,w);
end;


{---------------------------------------------------------------------------}
procedure caddxx(const z: mp_complex; var w: mp_complex);
begin
  mpc_add(cxx,z,w);
end;


{---------------------------------------------------------------------------}
procedure csubxx(const z: mp_complex; var w: mp_complex);
begin
  mpc_sub(z,cxx,w);
end;


{---------------------------------------------------------------------------}
procedure cmulxx(const z: mp_complex; var w: mp_complex);
begin
  mpc_mul(z,cxx,w);
end;


{---------------------------------------------------------------------------}
procedure cdivxx(const z: mp_complex; var w: mp_complex);
begin
  mpc_div(cxx,z,w);
end;


{---------------------------------------------------------------------------}
procedure cagmxx(const z: mp_complex; var w: mp_complex);
begin
  mpc_exp(z,w);
  mpc_agm(z,w,w);
end;


{---------------------------------------------------------------------------}
procedure cln1pxx(const z: mp_complex; var w: mp_complex);
begin
  {w = ln(1+z/8)}
  mpf_mul_2k(z.re, -3, w.re);
  mpf_mul_2k(z.im, -3, w.im);
  mpc_ln1p(w,w);
end;


{---------------------------------------------------------------------------}
procedure cexpm1xx(const z: mp_complex; var w: mp_complex);
begin
  {w = exp(z/16)-1}
  mpf_mul_2k(z.re, -4, w.re);
  mpf_mul_2k(z.im, -4, w.im);
  mpc_expm1(w,w);
end;


{---------------------------------------------------------------------------}
procedure gotest1(const fname: FNamStr; f1: cfunc1; const fv: array of complex);
var
  i: integer;
  af,ad,r,ml: double;

begin
  {$ifdef fullwrite}
    writeln('Test for function ', fname);
  {$else}
    write(fname:10);
  {$endif}
  ml := 0.0;
  for i:=low(zv) to high(zv) do begin
    mpc_set_dbl(z,zv[i].re, zv[i].im);
    mpc_set_dbl(d,fv[i].re, fv[i].im);
    mpc_abs(d,x);
    af := mpf_todouble(x);
    f1(z, w);
    mpc_sub(w,d, d);
    mpc_abs(d,x);
    ad := mpf_todouble(x);
    r := ad;
    {$ifdef fullwrite}
      if af>0.5 then begin
        r := r/af;
        writeln(i:4, '  ',r:20, ' r', '  ',r/eps_d:6:2);
      end
      else writeln(i:4, '  ',r:20, ' a', '  ',r/eps_d:6:2);
    {$else}
      if af>0.5 then r := r/af;
    {$endif}
    if r>ml then ml := r;
  end;
  {$ifndef fullwrite}
     writeln(' ',ml/eps_d:6:2);
  {$endif}
  if ml>maxr then maxr := ml;
end;


{---------------------------------------------------------------------------}
procedure gotestx(const fname: FNamStr; fx: cfuncx; const fv: array of double);
var
  i: integer;
  af,ad,r,ml: double;
begin
  {$ifdef fullwrite}
    writeln('Test for function ', fname);
  {$else}
    write(fname:10);
  {$endif}
  ml := 0.0;
  for i:=low(zv) to high(zv) do begin
    mpc_set_dbl(z,zv[i].re, zv[i].im);
    fx(z,y);
    mpf_sub_dbl(y,fv[i],y);
    ad := abs(mpf_todouble(y));
    af := abs(fv[i]);
    r := ad;
    {$ifdef fullwrite}
      if af>0.5 then begin
        r := r/af;
        writeln(i:4, '  ',r:20, ' r', '  ',r/eps_d:6:2);
      end
      else writeln(i:4, '  ',r:20, ' a', '  ',r/eps_d:6:2);
    {$else}
      if af>0.5 then r := r/af;
    {$endif}
    if r>ml then ml := r;
  end;
  {$ifndef fullwrite}
     writeln(' ',ml/eps_d:6:2);
  {$endif}
  if ml>maxr then maxr := ml;
end;


{---------------------------------------------------------------------------}
procedure test_complex;
var
  mrea,mref: double;

const
  CNEA = 3;
{$ifdef CPUARM}
  CNEF = 20;  {Worst case exp10}
{$else}
  CNEF = 6;
{$endif}
begin
  maxr := 0;
  writeln('Basic function test');

  gotestx('abs',      {$ifdef FPC_ProcVar}@{$endif}mpc_abs,   t_abs);
  gotestx('arg',      {$ifdef FPC_ProcVar}@{$endif}mpc_arg,   t_arg);
  gotest1('add',      {$ifdef FPC_ProcVar}@{$endif}caddxx,    t_add);
  gotest1('conj',     {$ifdef FPC_ProcVar}@{$endif}mpc_conj,  t_conj);
  gotest1('div',      {$ifdef FPC_ProcVar}@{$endif}cdivxx,    t_div);
  gotest1('inv',      {$ifdef FPC_ProcVar}@{$endif}mpc_inv,   t_inv);
  gotest1('mul',      {$ifdef FPC_ProcVar}@{$endif}cmulxx,    t_mul);
  gotest1('neg',      {$ifdef FPC_ProcVar}@{$endif}mpc_chs,   t_neg);
  gotest1('sqr',      {$ifdef FPC_ProcVar}@{$endif}mpc_sqr,   t_sqr);
  gotest1('sqrt',     {$ifdef FPC_ProcVar}@{$endif}mpc_sqrt,  t_sqrt);
  gotest1('sub',      {$ifdef FPC_ProcVar}@{$endif}csubxx,    t_sub);
  mrea := maxr/eps_d;

  maxr := 0;
  gotest1('exp',      {$ifdef FPC_ProcVar}@{$endif}mpc_exp,   t_exp);
  gotest1('exp2',     {$ifdef FPC_ProcVar}@{$endif}mpc_exp2,  t_exp2);
  gotest1('exp10',    {$ifdef FPC_ProcVar}@{$endif}mpc_exp10, t_exp10);
  gotest1('expm1',    {$ifdef FPC_ProcVar}@{$endif}cexpm1xx,  t_expm1);
  gotest1('ln',       {$ifdef FPC_ProcVar}@{$endif}mpc_ln,    t_log);
  gotest1('ln1p',     {$ifdef FPC_ProcVar}@{$endif}cln1pxx,   t_ln1p);
  gotest1('log10',    {$ifdef FPC_ProcVar}@{$endif}mpc_log10, t_log10);
  gotest1('nroot2',   {$ifdef FPC_ProcVar}@{$endif}cnrootx2,  t_sqrt);
  gotest1('nroot3',   {$ifdef FPC_ProcVar}@{$endif}cnrootx3,  t_cbrt);
  gotest1('pow',      {$ifdef FPC_ProcVar}@{$endif}cpowxx,    t_powxx);
  gotest1('agm1',     {$ifdef FPC_ProcVar}@{$endif}mpc_agm1,  t_agm1);
  gotest1('agm',      {$ifdef FPC_ProcVar}@{$endif}cagmxx,    t_agm2);

  gotest1('cos',      {$ifdef FPC_ProcVar}@{$endif}mpc_cos ,     t_cos);
  gotest1('cosh',     {$ifdef FPC_ProcVar}@{$endif}mpc_cosh,     t_cosh);
  gotest1('cot',      {$ifdef FPC_ProcVar}@{$endif}mpc_cot,      t_cot);
  gotest1('coth',     {$ifdef FPC_ProcVar}@{$endif}mpc_coth,     t_coth);
  gotest1('sin',      {$ifdef FPC_ProcVar}@{$endif}mpc_sin ,     t_sin);
  gotest1('sinh',     {$ifdef FPC_ProcVar}@{$endif}mpc_sinh,     t_sinh);
  gotest1('tan',      {$ifdef FPC_ProcVar}@{$endif}mpc_tan ,     t_tan);
  gotest1('tanh',     {$ifdef FPC_ProcVar}@{$endif}mpc_tanh,     t_tanh);
  gotest1('csc' ,     {$ifdef FPC_ProcVar}@{$endif}mpc_csc,      t_csc);
  gotest1('csch',     {$ifdef FPC_ProcVar}@{$endif}mpc_csch,     t_csch);
  gotest1('sec' ,     {$ifdef FPC_ProcVar}@{$endif}mpc_sec,      t_sec);
  gotest1('sech',     {$ifdef FPC_ProcVar}@{$endif}mpc_sech,     t_sech);

  gotest1('arccot',   {$ifdef FPC_ProcVar}@{$endif}mpc_arccot,   t_acot);
  gotest1('arccotc',  {$ifdef FPC_ProcVar}@{$endif}mpc_arccotc,  t_acotc);
  gotest1('arccoth',  {$ifdef FPC_ProcVar}@{$endif}mpc_arccoth,  t_acoth);
  gotest1('arccothc', {$ifdef FPC_ProcVar}@{$endif}mpc_arccothc, t_acothc);

  gotest1('arccsc',   {$ifdef FPC_ProcVar}@{$endif}mpc_arccsc,   t_acsc);
  gotest1('arccsch',  {$ifdef FPC_ProcVar}@{$endif}mpc_arccsch,  t_acsch);
  gotest1('arcsec',   {$ifdef FPC_ProcVar}@{$endif}mpc_arcsec,   t_asec);
  gotest1('arcsech',  {$ifdef FPC_ProcVar}@{$endif}mpc_arcsech,  t_asech);

  gotest1('arccos',   {$ifdef FPC_ProcVar}@{$endif}mpc_arccos,   t_acos);
  gotest1('arccosh',  {$ifdef FPC_ProcVar}@{$endif}mpc_arccosh,  t_acosh);
  gotest1('arcsin',   {$ifdef FPC_ProcVar}@{$endif}mpc_arcsin,   t_asin);
  gotest1('arcsinh',  {$ifdef FPC_ProcVar}@{$endif}mpc_arcsinh,  t_asinh);
  gotest1('arctan',   {$ifdef FPC_ProcVar}@{$endif}mpc_arctan,   t_atan);
  gotest1('arctanh',  {$ifdef FPC_ProcVar}@{$endif}mpc_arctanh,  t_atanh);

  mref := maxr/eps_d;

  writeln('*** Max err arithmetic/functions = ',mrea:1:2, ' / ', mref:1:2, ' [eps_d]');
  if (mrea <= CNEA) and (mref <= CNEF) then writeln('Passed.')
  else begin
    if mrea > CNEA then write('Failed: arithmetic');
    if mref > CNEF then write('Failed: functions');
    writeln;
  end;
  writeln;
end;


{---------------------------------------------------------------------------}
procedure misc_tests;
  {-Simple test of miscellaneous remaining functions}
var
  st_cnt, st_fail: integer;

  {-----------------------------------------------------------------}
  procedure singletest(n: integer; const a: mp_complex; x,y: double);
    {-Return abs((a-b)/b), b=x+iy, special if b=0, or a-b=0}
  var
    b,c: mp_complex;
    r: double;
  const
    eps = 9e-16;
  begin
    inc(st_cnt);
    mpc_initp2(b,c,a.re.bitprec);
    if mp_error<>MP_OKAY then exit;
    mpc_set_dbl(b,x,y);
    mpc_sub(a,b,c);
    if mpc_is0(c) then r := 0.0
    else begin
      if not mpc_is0(b) then mpc_div(c,b,c);
      mpc_abs(c,c.re);
      r := abs(mpf_todouble(c.re));
    end;
    mpc_clear2(b,c);
    if r > eps then begin
      writeln('  Test ',n, ' failed: rel. error = ', r:20);
      inc(st_fail);
    end;
  end;
  {-----------------------------------------------------------------}
  procedure checkbool(test: boolean; const msg: string);
  begin
    inc(st_cnt);
    if not test then begin
      writeln('  ', msg);
      inc(st_fail);
    end;
  end;

var
  a,b,c: mp_complex;

begin
  st_cnt := 0;
  st_fail := 0;
  writeln('Miscellaneous function test');

  mpc_init3(a,b,c);
  if mp_error<>MP_OKAY then begin
    writeln('mp_error<>MP_OKAY');
    halt;
  end;

  mpc_set_dbl(a,1,-2);
  mpc_nroot(a,-4,b);
  singletest(1, b, 0.7866399385939558088, 0.2234679216024516087);

  mpc_nroot1(1,a);
  singletest(2, a, 1, 0);

  mpc_nroot1(-1,a);
  singletest(3, a, 1, 0);

  mpc_nroot1(2,a);
  singletest(4, a, -1, 0);

  mpc_nroot1(-2,a);
  singletest(5, a, -1, 0);

  mpc_nroot1(4,a);
  singletest(6, a, 0, 1);

  mpc_nroot1(-4,a);
  singletest(7, a, 0, -1);

  mpf_exp10i(-80,a.re);
  mpf_exp10i(-50,a.im);
  mpc_arccosh(a,b);
  singletest(8, b, 1e-50, 1.570796326794896619);
  mpc_arccos(a,b);
  singletest(9, b, 1.570796326794896619, -1e-50);

  mpc_set_dbl(a,1,-2);
  mpc_sincos(a,b,c);
  singletest(10, b, 3.1657785132161681467, -1.9596010414216058971);
  singletest(11, c, 2.0327230070196655294,  3.0518977991518000575);

  mpc_sinhcosh(a,b,c);
  singletest(12, b, -0.48905625904129367359, -1.4031192506220405880);
  singletest(13, c, -0.64214812471551996484, -1.0686074213827783396);

  mpf_set_dbl(x,1);
  mpc_cis(x,a);
  singletest(14, a, 0.54030230586813971740, 0.84147098480789650665);

  mpf_set_dbl(x,-7);
  mpc_cis(x,a);
  singletest(15, a, 0.75390225434330463814, -0.65698659871878909040);

  mpc_set_dbl(a,1,-2);
  mpf_set_dbl(x,-2.5);
  mpc_add_mpf(a,x,b);
  singletest(16, b, -1.5, -2);

  mpc_sub_mpf(a,x,b);
  singletest(17, b, 3.5, -2);
  mpc_sub_mpf(a,x,b);
  singletest(18, b, 3.5, -2);

  mpc_mul_mpf(a,x,b);
  singletest(19, b, -2.5, 5);

  mpc_div_mpf(a,x,b);
  singletest(20, b, -0.4, 0.8);

  mpc_mul_dbl(a,0.75,b);
  singletest(21, b, 0.75, -1.5);

  mpc_div_dbl(a,-1.25,b);
  singletest(22, b, -0.8, 1.6);

  mpf_set_dbl(x,1.25);
  mpf_set_dbl(y,-8.5);
  mpc_set_mpf(c,x,y);
  singletest(23, c, 1.25, -8.5);

  mpc_exch(b,c);
  singletest(24, b, 1.25, -8.5);
  singletest(25, c, -0.8, 1.6);

  mpc_mul_2k(b,3,c);
  singletest(26, c, 1.25*8, -8.5*8);

  mpc_mul_2k(b,-2,c);
  singletest(27, c, 1.25*0.25, -8.5*0.25);

  mpc_set1(b);
  checkbool(mpc_is1(b), 'Error mpc_is1 - 1');
  checkbool(not mpc_is1(c), 'Error mpc_is1 - 2');

  mpc_seti(b);
  checkbool(mpc_is_i(b), 'Error mpc_is_1 - 1');
  checkbool(not mpc_is_i(c), 'Error mpc_is_1 - 2');

  mpc_sqr(b,c);
  singletest(28, c, -1, 0);

  mpc_copy(c,b);
  checkbool(mpc_is1a(b), 'Error mpc_is_1a - 1');
  checkbool(not mpc_is1a(a), 'Error mpc_is_1a - 2');

  mpc_set_dbl(a,1,1);
  mpc_set_dbl(b,-3,-2);
  mpc_agm(a,b,c);
  singletest(29, c, -1.386472439784209035, 0.4856783595864586228);

  mpc_set_dbl(a,-2,0);
  mpc_set_dbl(b,0,1);
  mpc_agm(a,b,c);
  singletest(30, c, -1.010051593619580924, 0.7426464223997775056);

  mpc_set_dbl(a,-0.5,0);
  mpc_set_dbl(b,0,1);
  mpc_agm(a,b,c);
  singletest(31, c, -0.3713232111998887528, 0.5050257968097904622);

  mpc_set_dbl(a,-2,0);
  mpc_set_dbl(b,-2,0);
  mpc_agm(a,b,c);
  singletest(32, c, -2, 0);

  mpc_set_dbl(a,1,0);
  mpc_sincos(a,b,c);
  singletest(33, b, 0.84147098480789650665, 0);
  singletest(34, c, 0.54030230586813971740, 0);

  mpc_set_dbl(a,1,0);
  mpc_sinhcosh(a,b,c);
  singletest(35, b, 1.1752011936438014569, 0);
  singletest(36, c, 1.5430806348152437785, 0);

  mpc_clear3(a,b,c);

  if st_fail=0 then writeln('All ',st_cnt, ' tests passed.')
  else writeln('Failed tests: ', st_fail, ' of ',st_cnt);
  writeln;
end;


{---------------------------------------------------------------------------}
procedure branch_tests;
type
  tbrtest = record
              x, y, u, v: double;      {u+iv=f(x+iy)}
            end;
type
  t_testfunc = procedure(const a: mp_complex; var b: mp_complex);

const
  asin1: tbrtest = (x:    2; y:     0; u:  1.5707963267948966192;  v: -1.3169578969248167086);
  asin2: tbrtest = (x:   -2; y:     0; u: -1.5707963267948966192;  v:  1.3169578969248167086);
  acos1: tbrtest = (x:    2; y:     0; u:  0;                      v:  1.3169578969248167086);
  acos2: tbrtest = (x:   -2; y:     0; u:  3.1415926535897932385;  v: -1.3169578969248167086);
  atan1: tbrtest = (x:    0; y:     2; u:  1.5707963267948966192;  v:  0.54930614433405484570);
  atan2: tbrtest = (x:    0; y:    -2; u: -1.5707963267948966192;  v: -0.54930614433405484570);
  acsc1: tbrtest = (x:  0.5; y:     0; u:  1.5707963267948966192;  v: -1.3169578969248167086);
  acsc2: tbrtest = (x: -0.5; y:     0; u: -1.5707963267948966192;  v:  1.3169578969248167086);
  asec1: tbrtest = (x:  0.5; y:     0; u:  0;                      v:  1.3169578969248167086);
  asec2: tbrtest = (x: -0.5; y:     0; u:  3.1415926535897932385;  v: -1.3169578969248167086);
  acot1: tbrtest = (x:    0; y:   0.5; u: -1.5707963267948966192;  v: -0.54930614433405484570);   {MMA, Maple uses arccotc}
  acot2: tbrtest = (x:    0; y:  -0.5; u:  1.5707963267948966192;  v:  0.54930614433405484570);   {MMA, Maple uses arccotc}
 asinh1: tbrtest = (x:    0; y:     2; u:  1.3169578969248167086;  v:  1.5707963267948966192);
 asinh2: tbrtest = (x:    0; y:    -2; u: -1.3169578969248167086;  v: -1.5707963267948966192);
 acosh1: tbrtest = (x:  0.5; y:     0; u:  0;                      v:  1.0471975511965977462);
 acosh2: tbrtest = (x: -0.5; y:     0; u:  0;                      v:  2.0943951023931954923);
 acosh3: tbrtest = (x:   -2; y:     0; u:  1.3169578969248167086;  v:  3.1415926535897932385);
 atanh1: tbrtest = (x:    2; y:     0; u:  0.5493061443340548457;  v: -1.5707963267948966192);
 atanh2: tbrtest = (x:   -2; y:     0; u: -0.5493061443340548457;  v:  1.5707963267948966192);
 acsch1: tbrtest = (x:    0; y:   0.5; u: -1.3169578969248167086;  v: -1.5707963267948966192);
 acsch2: tbrtest = (x:    0; y:  -0.5; u:  1.3169578969248167086;  v:  1.5707963267948966192);
 asech1: tbrtest = (x:    2; y:     0; u:  0;                      v:  1.0471975511965977462);
 asech2: tbrtest = (x:   -2; y:     0; u:  0;                      v:  2.0943951023931954923);
 acoth1: tbrtest = (x:  0.5; y:     0; u:  0.5493061443340548457;  v: -1.5707963267948966192);   {MMA, Maple uses arccothc}
 acoth2: tbrtest = (x: -0.5; y:     0; u: -0.5493061443340548457;  v: +1.5707963267948966192);   {MMA, Maple uses arccothc}
    ln1: tbrtest = (x:   -2; y:     0; u:  0.69314718055994530942; v:  3.1415926535897932385);
    ln2: tbrtest = (x:   -2; y:  1e-9; u:  0.69314718055994530954; v:  3.1415926530897932385);
    ln3: tbrtest = (x:   -2; y: -1e-9; u:  0.69314718055994530954; v: -3.1415926530897932385);
  ln1p1: tbrtest = (x:   -4; y:     0; u:  1.0986122886681096914;  v:  3.1415926535897932385);
  ln1p2: tbrtest = (x:   -4; y:  1e-9; u:  1.0986122886681096915;  v:  3.1415926532564599051);
  ln1p3: tbrtest = (x:   -4; y: -1e-9; u:  1.0986122886681096915;  v: -3.1415926532564599051);

const
  EPS = 4*eps_d;
var
  aw: double;
  cnt,fail: integer;

  procedure test1b(n: integer; const tc: tbrtest; tf: t_testfunc);
  begin
    inc(cnt);
    mpc_set_dbl(z, tc.x, tc.y);
    mpc_set_dbl(v, tc.u, tc.v);
    tf(z,w);
    mpc_sub(w,v,d);
    mpc_abs(d,x);
    aw := mpf_todouble(x);
    if aw > EPS then begin
      writeln(' *** Test ',n, ' failed, abs. error = ',aw);
      inc(fail);
    end;
  end;

begin
  cnt  := 0;
  fail := 0;
  writeln('Functions on branch cuts');
  test1b( 1,  asin1, {$ifdef FPC_ProcVar}@{$endif}mpc_arcsin);
  test1b( 2,  asin2, {$ifdef FPC_ProcVar}@{$endif}mpc_arcsin);
  test1b( 3,  acos1, {$ifdef FPC_ProcVar}@{$endif}mpc_arccos);
  test1b( 4,  acos2, {$ifdef FPC_ProcVar}@{$endif}mpc_arccos);
  test1b( 5,  atan1, {$ifdef FPC_ProcVar}@{$endif}mpc_arctan);
  test1b( 6,  atan2, {$ifdef FPC_ProcVar}@{$endif}mpc_arctan);
  test1b( 7,  acsc1, {$ifdef FPC_ProcVar}@{$endif}mpc_arccsc);
  test1b( 8,  acsc2, {$ifdef FPC_ProcVar}@{$endif}mpc_arccsc);
  test1b( 9,  asec1, {$ifdef FPC_ProcVar}@{$endif}mpc_arcsec);
  test1b(10,  asec2, {$ifdef FPC_ProcVar}@{$endif}mpc_arcsec);
  test1b(11,  acot1, {$ifdef FPC_ProcVar}@{$endif}mpc_arccot);
  test1b(12,  acot2, {$ifdef FPC_ProcVar}@{$endif}mpc_arccot);
  test1b(13, asinh1, {$ifdef FPC_ProcVar}@{$endif}mpc_arcsinh);
  test1b(14, asinh2, {$ifdef FPC_ProcVar}@{$endif}mpc_arcsinh);
  test1b(15, acosh1, {$ifdef FPC_ProcVar}@{$endif}mpc_arccosh);
  test1b(16, acosh2, {$ifdef FPC_ProcVar}@{$endif}mpc_arccosh);
  test1b(17, acosh3, {$ifdef FPC_ProcVar}@{$endif}mpc_arccosh);
  test1b(18, atanh1, {$ifdef FPC_ProcVar}@{$endif}mpc_arctanh);
  test1b(19, atanh2, {$ifdef FPC_ProcVar}@{$endif}mpc_arctanh);
  test1b(20, acsch1, {$ifdef FPC_ProcVar}@{$endif}mpc_arccsch);
  test1b(21, acsch2, {$ifdef FPC_ProcVar}@{$endif}mpc_arccsch);
  test1b(22, asech1, {$ifdef FPC_ProcVar}@{$endif}mpc_arcsech);
  test1b(23, asech2, {$ifdef FPC_ProcVar}@{$endif}mpc_arcsech);
  test1b(24, acoth1, {$ifdef FPC_ProcVar}@{$endif}mpc_arccoth);
  test1b(25, acoth2, {$ifdef FPC_ProcVar}@{$endif}mpc_arccoth);
  test1b(26,    ln1, {$ifdef FPC_ProcVar}@{$endif}mpc_ln);
  test1b(27,    ln2, {$ifdef FPC_ProcVar}@{$endif}mpc_ln);
  test1b(28,    ln3, {$ifdef FPC_ProcVar}@{$endif}mpc_ln);
  test1b(29,  ln1p1, {$ifdef FPC_ProcVar}@{$endif}mpc_ln1p);
  test1b(30,  ln1p2, {$ifdef FPC_ProcVar}@{$endif}mpc_ln1p);
  test1b(31,  ln1p3, {$ifdef FPC_ProcVar}@{$endif}mpc_ln1p);
  if fail=0 then writeln('All ', cnt, ' tests passed.')
  else writeln('Failed tests: ', fail, ' of ',cnt);
  writeln;
end;


label
  done;
begin
  {mpf_set_default_prec(960);}

  writeln('Test of MP V', MP_VERSION, '   [mp_cmplx]   (c) 2014-2018 W.Ehrhardt ');
  writeln('MAXDigits = ',MAXDigits, ',  MP_MAXBIT = ',MP_MAXBIT, ',  MAXRadix = ', MAXRadix);
  writeln('Karatsuba  cutoffs: mul/sqr = ',mp_mul_cutoff,'/',mp_sqr_cutoff);
  writeln('Toom-3, BZ cutoffs: mul/sqr = ',mp_t3m_cutoff,'/',mp_t3s_cutoff,  ',  div = ',mp_bz_cutoff);
  writeln('Current mp_float default bit precision = ', mpf_get_default_prec,
          ',  decimal precision = ', mpf_get_default_prec*ln(2)/ln(10):1:1);
  writeln;

  mpc_init5(d,z,v,w,cxx);
  mpf_init2(x,y);
  mpc_set_dbl(cxx, 2.0, -0.75);

{
  branch_tests;
  goto done;
}
  test_complex;
  misc_tests;
  branch_tests;
  func_test;

done:

  mpc_clear5(d,z,v,w,cxx);
  mpf_clear2(x,y);
  {$ifdef MPC_Diagnostic}
    writeln;
    mp_dump_meminfo;
    mp_dump_diagctr;
  {$endif}
end.
