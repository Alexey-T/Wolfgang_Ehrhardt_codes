{Test unit for AMCmplx  (c) W.Ehrhardt 2013-2018}
unit t_acmplu;

{$i STD.INC}

{$ifdef BIT16}
{$N+,F+}
{$endif}

interface

procedure test_complex;
procedure test_func_inv_complex;
procedure test_branches;
procedure misc_tests;
procedure test_lngamma;
procedure test_gamma;

procedure test_all_complex; {all above}


implementation


uses
  AMath, AMCmplx, t_acmplb;

type
  FNamStr = string[12];

{.$define fullwrite}
type
  cfunc1 = procedure(const z: complex; var w: complex);
  cfuncx = function(const z: complex): extended;

var
  maxr: extended;

{Special values to avoid inaccuracies for 16-bit input literals}
const
  specialvalue1 = 9.625+0.0112937071984173798;  {9.63629370719841737980004837}
  specialvalue2 = 8.625+0.06092476857560136239; {8.68592476857560136238589621}

const zv: array[0..9] of complex = (
            (re:  4.979011924883673501; im: +7.738872474578104566),
            (re:  7.738872474578104566; im: -0.276880057192001594),
            (re: -0.276880057192001594; im: -5.010603618271074922),
            (re: -5.010603618271074922; im:  specialvalue1       ),
            (re:  specialvalue1;        im: +2.926377239243964645),
            (re:  2.926377239243964645; im: +5.229083431459306652),
            (re:  5.229083431459306652; im: +2.727939910436010251),
            (re:  2.727939910436010251; im: +1.825308091680855060),
            (re:  1.825308091680855060; im:  -specialvalue2      ),
            (re:  -specialvalue2;       im: +4.979011924883673501));

const t_abs: array[0..9] of extended = (
               9.202212066993265031e+00,
               7.743823974229610662e+00,
               5.018247820255774690e+00,
               1.086113737279954516e+01,
               1.007084108492219961e+01,
               5.992244761316694218e+00,
               5.897878405673676230e+00,
               3.282286670067870902e+00,
               8.875643002899041729e+00,
               1.001178549677773199e+01);

const t_arg: array[0..9] of extended = (
               0.4995455752345964553*2,     {!! 16-bit}
              -3.576257502185697130e-02,
              -1.625999007401905844e+00,
               2.050293635965911176e+00,
               2.948321315544675621e-01,
               1.060586036725255628e+00,
               4.808455608335830782e-01,
               5.896963416477665942e-01,
              -1.363664772458245503e+00,
               2.621091389538601329e+00);

const t_acos: array[0..9] of complex = (
        (re: 1.001767980470745633;    im: -2.913823271855495378),
        (re: 3.606427612041407370e-2; im: +2.735858443457626093),
        (re: 1.624936546233379670;    im: +2.315953745433590119),
        (re: 2.048565084965074012;    im: -3.079557679120411791),
        (re: 2.962113208907306728e-1; im: -3.000739250820062252),
        (re: 1.066455591493415660;    im: -2.487286502479601136),
        (re: 4.868130745223138770e-1; im: -2.463655912283054555),
        (re: 6.116977071277574248e-1; im: -1.873445885173705526),
        (re: 1.364931128037018133;    im: +2.879352863232879542),
        (re: 2.618931048568298831;    im: -2.995654330289876780));

const t_acosh: array[0..9] of complex = (
        (re: 2.913823271855495378;  im: +1.001767980470745633),
        (re: 2.735858443457626093;  im: -3.606427612041407370e-2),
        (re: 2.315953745433590119;  im: -1.624936546233379670),
        (re: 3.079557679120411791;  im: +2.048565084965074012),
        (re: 3.000739250820062252;  im: +2.962113208907306728e-1),
        (re: 2.487286502479601136;  im: +1.066455591493415660),
        (re: 2.463655912283054555;  im: +4.868130745223138769e-1),
        (re: 1.873445885173705526;  im: +6.116977071277574248e-1),
        (re: 2.879352863232879542;  im: -1.364931128037018133),
        (re: 2.995654330289876779;  im: +2.618931048568298831));

const t_asin: array[0..9] of complex = (
        (re:  5.690283463241509864e-1;  im: +2.913823271855495378),
        (re:  1.534732050674482545;     im: -2.735858443457626093),
        (re: -5.414021943848305114e-2;  im: -2.315953745433590119),
        (re: -4.777687581701773928e-1;  im: +3.079557679120411791),
        (re:  1.274585005904165946;     im: +3.000739250820062252),
        (re:  5.043407353014809591e-1;  im: +2.487286502479601136),
        (re:  1.083983252272582742;     im: +2.463655912283054555),
        (re:  9.590986196671391944e-1;  im: +1.873445885173705526),
        (re:  2.058651987578784861e-1;  im: -2.879352863232879542),
        (re: -1.048134721773402212;     im: +2.995654330289876780));

const t_asinh: array[0..9] of complex = (
        (re:  2.911376046941529568;  im: +9.963945954570432676e-1),
        (re:  2.744175542399425906;  im: -3.546830878900050060e-2),
        (re: -2.296213646252069051;  im: -1.514466356569015189),
        (re: -3.077123345929572597;  im: +1.089557796719401385),
        (re:  3.004836610092364742;  im: +2.934697916981922004e-1),
        (re:  2.480005937079536316;  im: +1.054586860604916571),
        (re:  2.471877383830958561;  im: +4.750234436425080336e-1),
        (re:  1.891074358808015914;  im: +5.688292557256360234e-1),
        (re:  2.873542642336734188;  im: -1.362376149648891421),
        (re: -2.998175058617247722;  im: +5.183571985225367506e-1));

const t_atan: array[0..9] of complex = (
        (re:  1.511574707933274136;  im: +9.132440360395449438e-2),
        (re:  1.442450432348260256;  im: -4.541613264280391150e-3),
        (re: -1.559348870363053267;  im: -2.016329540924836246e-1),
        (re: -1.528061947244588987;  im: +8.172155623067200375e-2),
        (re:  1.475990916324079968;  im: +2.860296932069164436e-2),
        (re:  1.487735377204654893;  im: +1.456687715320728166e-1),
        (re:  1.420698392777919189;  im: +7.683048612788070225e-2),
        (re:  1.316223606049893336;  im: +1.603131300046753064e-1),
        (re:  1.547345068430370358;  im: -1.106490750793908248e-1),
        (re: -1.484146234018525399;  im: +4.934185030502439949e-2));

const t_atanh: array[0..9] of complex = (
        (re:  5.837502793896850906e-2;  im: +1.479348849510533446),
        (re:  1.297734349779038123e-1;  im: -1.566100941046356133),
        (re: -1.057645606734725207e-2;  im: -1.374369865840228455),
        (re: -4.221859567868835888e-2;  im: +1.489143396816640561),
        (re:  9.521899799131672206e-2;  im: +1.541688409877711033),
        (re:  7.996545936689032386e-2;  im: +1.425251035387319270),
        (re:  1.505124547198072622e-1;  im: +1.490743253301630380),
        (re:  2.508207293399398771e-1;  im: +1.392057665392187516),
        (re:  2.289610881579713585e-2;  im: -1.460922498928286421),
        (re: -8.665624101841876131e-2;  im: +1.520790203693509348));

const t_conj: array[0..9] of complex = (
        (re:  4.979011924883673501;  im: -7.738872474578104566),
        (re:  7.738872474578104566;  im: +0.276880057192001594),
        (re: -0.276880057192001594;  im: +5.010603618271074922),
        (re: -5.010603618271074922;  im: -9.636293707198417380),
        (re:  9.636293707198417380;  im: -2.926377239243964645),
        (re:  2.926377239243964645;  im: -5.229083431459306652),
        (re:  5.229083431459306652;  im: -2.727939910436010251),
        (re:  2.727939910436010251;  im: -1.825308091680855060),
        (re:  1.825308091680855060;  im: +8.685924768575601362),
        (re: -8.685924768575601362;  im: -4.979011924883673501));

const t_cos: array[0..9] of complex = (
        (re:  3.024540920601483938e+02;  im: +1.107379757251707165e+03),
        (re:  1.192858682649064973e-01;  im: +2.785755412233306554e-01),
        (re:  7.214439430452830660e+01;  im: -2.050012966707604417e+01),
        (re:  2.249219525384039842e+03;  im: -7.317363745602773587e+03),
        (re: -9.148222970032421760e+00;  im: +1.953124661113563542e+00),
        (re: -9.116081175857732248e+01;  im: -1.992669213569952232e+01),
        (re:  3.795639179042704640e+00;  im: +6.623513350981458399e+00),
        (re: -2.914484073249886956e+00;  im: -1.214620271628002918e+00),
        (re: -7.451234825012997439e+02;  im: +2.864169231448808081e+03),
        (re: -5.371977967039319076e+01;  im: +4.893348341339375831e+01));

const t_cosh: array[0..9] of complex = (
        (re:  8.346383835230182494e+00;  im: +7.218105788642584642e+01),
        (re:  1.104219673799193670e+03;  im: -3.137963868927757538e+02),
        (re:  3.051485206773701585e-01;  im: -2.680538473010529785e-01),
        (re: -7.332947286841879334e+01;  im: +1.574445942284918251e+01),
        (re: -7.478643293945957536e+03;  im: +1.634838220991335393e+03),
        (re:  4.622316522966235702e+00;  im: -8.088695185566375256e+00),
        (re: -8.544333183278877406e+01;  im: +3.750583612012816646e+01),
        (re: -1.934457815021493925e+00;  im: +7.372585961176722818e+00),
        (re: -2.352958770061749348e+00;  im: -2.034982010440878359e+00),
        (re:  7.797564575321347482e+02;  im: +2.854935071681917656e+03));

const t_exp: array[0..9] of complex = (
        (re:  1.669197736864670815e+01;  im: +1.443689510950766369e+02),
        (re:  2.208438928625258345e+03;  im: -6.275928928490921124e+02),
        (re:  2.227538273122775173e-01;  im: +7.246828402833419125e-01),
        (re: -6.518298595815354900e-03;  im: -1.399658379151938609e-03),
        (re: -1.495728652408401575e+04;  im: +3.269676455931135689e+03),
        (re:  9.218158701983105936e+00;  im: -1.622398529108495601e+01),
        (re: -1.708817571685304084e+02;  im: +7.501382609870410714e+01),
        (re: -3.852461315830959613e+00;  im: +1.480842042315607322e+01),
        (re: -4.5867755033014073798;     im: -4.178501081246873415e+00),
        (re:  4.451337963005453491e-05;  im: -1.629775742054429159e-04));

const t_log: array[0..9] of complex = (
        (re: 2.219443897217919443e+00;  im: +9.990911504691929106e-01),
        (re: 2.046895619115416726e+00;  im: -3.576257502185697130e-02),
        (re: 1.613080832985386044e+00;  im: -1.625999007401905844e+00),
        (re: 2.385191039482300871e+00;  im: +2.050293635965911176e+00),
        (re: 2.309644227067992300e+00;  im: +2.948321315544675621e-01),
        (re: 1.790466093397465611e+00;  im: +1.060586036725255628e+00),
        (re: 1.774592693984175167e+00;  im: +4.808455608335830782e-01),
        (re: 1.188540335004534243e+00;  im: +5.896963416477665942e-01),
        (re: 2.183310783767908259e+00;  im: -1.363664772458245503e+00),
        (re: 2.303762948727325917e+00;  im: +2.621091389538601329e+00));

const t_sin: array[0..9] of complex = (
        (re: -1.107380177424023354e+03;  im: +3.024539773002502192e+02),
        (re:  1.031703752140075936e+00;  im: -3.220897979992957024e-02),
        (re: -2.050195209727142980e+01;  im: -7.213798134824079884e+01),
        (re:  7.317363808034633864e+03;  im: +2.249219506193664343e+03),
        (re: -1.964375633631808178e+00;  im: -9.095826471387040446e+00),
        (re:  1.992783647158514838e+01;  im: -9.115557694101913504e+01),
        (re: -6.680335650741921444e+00;  im: +3.763353833142432513e+00),
        (re:  1.279402816665745915e+00;  im: -2.766909209979578116e+00),
        (re:  2.864169394953525959e+03;  im: +7.451234399649871203e+02),
        (re: -4.893811726244659136e+01;  im: -5.371469305562194636e+01));

const t_sinh: array[0..9] of complex = (
        (re:  8.345593533416525658e+00;  im: +7.218789320865079048e+01),
        (re:  1.104219254826064675e+03;  im: -3.137965059563163586e+02),
        (re: -8.239469336509264113e-02;  im: +9.927366875843948910e-01),
        (re:  7.332295456982297798e+01;  im: -1.574585908122833445e+01),
        (re: -7.478643230138058210e+03;  im: +1.634838234939800296e+03),
        (re:  4.595842179016870234e+00;  im: -8.135290105518580753e+00),
        (re: -8.543842533574163435e+01;  im: +3.750798997857594068e+01),
        (re: -1.918003500809465688e+00;  im: +7.435834461979350404e+00),
        (re: -2.233816733239658031e+00;  im: -2.143519070805995056e+00),
        (re: -7.797564130187551181e+02;  im: -2.854935234659491861e+03));

const t_sqrt: array[0..9] of complex = (
        (re: 2.662820308608613054e+00;  im: +1.453134567428218523e+00),
        (re: 2.782327842725198625e+00;  im: -4.975690731700522453e-02),
        (re: 1.539702530208964276e+00;  im: -1.627133657301663754e+00),
        (re: 1.710341158150687526e+00;  im: +2.817067712273758968e+00),
        (re: 3.139039247295310338e+00;  im: +4.661262584985865325e-01),
        (re: 2.111708076482241764e+00;  im: +1.238117022351427323e+00),
        (re: 2.358703228167225670e+00;  im: +5.782711190325734994e-01),
        (re: 1.733526258887341048e+00;  im: +5.264725822072126914e-01),
        (re: 2.313109497470871653e+00;  im: -1.877542930430378557e+00),
        (re: 8.142053574504808624e-01;  im: +3.057589758727724852e+00));

const t_tan: array[0..9] of complex = (
        (re: -1.928757919086441129e-07;  im: +1.000000326749916907e+00),
        (re:  1.242412685364183792e+00;  im: -3.171496938831333701e+00),
        (re: -4.674512625158779523e-05;  im: -9.999243922526395929e-01),
        (re:  4.792363401193648193e-09;  im: +1.000000007058933345e+00),
        (re:  2.345740824080089140e-03;  im: +9.947733046570988661e-01),
        (re: -2.396030789494815566e-05;  im: +9.999478134541859143e-01),
        (re: -7.370204836644931341e-03;  im: +1.004355341341713899e+00),
        (re: -3.691803847992048527e-02;  im: +9.647507199346954807e-01),
        (re: -2.781955256713729368e-08;  im: -1.000000049848910609e+00),
        (re:  9.428159006403047888e-05;  im: +9.999911934086371818e-01));

const t_tanh: array[0..9] of complex = (
        (re:  1.000092198122514475e+00;  im: +2.160986245871518020e-05),
        (re:  9.999996772753199321e-01;  im: -1.995376322295965887e-07),
        (re: -1.765485739548037261e+00;  im: +1.702421632555285245e+00),
        (re: -9.999189442732736453e-01;  im: +3.649060704944737019e-05),
        (re:  9.999999922462233374e-01;  im: -3.560088949517914775e-09),
        (re:  1.002932493336732686e+00;  im: -4.948790309797102353e-03),
        (re:  9.999611306478801249e-01;  im: -4.226995742097032481e-05),
        (re:  1.007478418931634003e+00;  im: -4.194050814891697808e-03),
        (re:  9.938553422971832711e-01;  im: +5.144217985914355503e-02),
        (re: -1.000000049160498243e+00;  im: -2.901873195374433112e-08));

{computed with Maple V}
const t_cbrt:  array[0..9] of complex = (
        (re: 1.980409351452068568;  im: +0.6850519424925463137),
        (re: 1.978279414982640533;  im: -0.2358390581971672100e-1),
        (re: 1.466680172613141937;  im: -0.8831630365740902142),
        (re: 1.717210422352255150;  im: +1.398414056434914519),
        (re: 2.149089778617387532;  im: +0.2118895207076571871),
        (re: 1.704009405612443111;  im: +0.6288349012096719349),
        (re: 1.783593916153138361;  im: +0.2883512525266128085),
        (re: 1.457518627100494964;  im: +0.2902456331911219456),
        (re: 1.860217302730305655;  im: -0.9090607999413698775),
        (re: 1.383682302674507700;  im: +1.652470362294393105));

const t_cot:  array[0..9] of complex = (
        (re: -0.1928756658644007560e-6;  im: -0.9999996732501526571),
        (re:  0.1070862438142847477;     im: +0.2733581992914031586),
        (re: -0.4675219553854650241e-4;  im: +1.000075611278721583),
        (re:  0.4792363333535701170e-8;  im: -0.9999999929410666817),
        (re:  0.2370442182397188751e-2;  im: -1.005248567563544041),
        (re: -0.2396280888837780351e-4;  im: -1.000052188695205540),
        (re: -0.7306028886391044333e-2;  im: -0.9956099319736191871),
        (re: -0.3960708664430225805e-1;  im: -1.035021548487447295),
        (re: -0.2781954979358870134e-7;  im: +0.9999999501510911020),
        (re:  0.9428324984674023356e-4;  im: -1.000008797779666557));

const t_coth:  array[0..9] of complex = (
        (re:  0.9999078099103386497;  im: -0.2160587822215018317e-4),
        (re:  1.000000322724744404;   im: +0.1995377610210880360e-6),
        (re: -0.2935050890604510592;  im: -0.2830209282854317464),
        (re: -1.000081060965401525;   im: -0.3649652326549915645e-4),
        (re:  1.000000007753776710;   im: +0.35600890047261845990e-8),
        (re:  0.9970518052990871675;  im: +0.49197731105648616632e-2),
        (re:  1.000038869076047474;   im: +0.42273243548748589534e-4),
        (re:  0.9925598917226418365;  im: +0.41319461980362737256e-2),
        (re:  1.003494165385392379;   im: -0.51941087547045132368e-1),
        (re: -0.9999999508395033317;  im: +0.29018729100593874631e-7));

const t_powxx:  array[0..9] of complex = ( {(2-0.75*I),)^a[i]}
        (re: -411.5034488394179369;     im: -569.8659411483985571),
        (re: -317.9550520992117476;     im: -49.67441240169941263),
        (re: -1.136453275749506582e-1;  im: +0.7153440743397040163e-1),
        (re: -6.732970677690146106e-1;  im: +0.2184973370139234927),
        (re: 1407.2720056523953442;     im: -4048.893677791971718),
        (re: -58.66890468069053621;     im: +13.30164259070217028),
        (re: 138.13717633016558385;     im: +27.18131225346363694),
        (re: 14.015416563592191076;     im: +6.034734380815592956),
        (re: 1.0103523461390175547e-1;  im: -0.1454685283138031456),
        (re: 6.6984084283828055675e-3;  im: +0.4699792933223983569e-2));

const t_powxa:  array[0..9] of complex = ( {a[i]^(-0.75*csgn(a[i]))}
        (re:  0.1385743542236457465;  im: -0.1289190553922747447),
        (re:  0.2153412143318153827;  im: +0.5777252732091200691e-2),
        (re:  1.153769047731398426;   im: -3.148081595323143650),
        (re:  0.1978525184159775477;  im: +5.979555090730980616),
        (re:  0.1725819686842950884;  im: -0.3879643151867885370e-1),
        (re:  0.1827628194599688994;  im: -0.1864705508022535650),
        (re:  0.2472306695275943292;  im: -0.9323737157502547168e-1),
        (re:  0.3706218829733410497;  im: -0.1755114657243552045),
        (re:  0.1013225476957308018;  im: +0.1659876191477992562),
        (re: -2.165963323602958431;   im: +5.194930169914393849));

const t_sqr:  array[0..9] of complex = (
        (re: -35.09958742964881212;  im: +77.06387667215681207),
        (re:  59.81348461171198962;  im: -4.285478906725584989),
        (re: -25.02948605336054182;  im: +2.774672432786690695),
        (re: -67.75200779196063026;  im: -96.56729623202236066),
        (re:  84.29447266502668985;  im: +56.39886115083058811),
        (re: -18.77962978679710908;  im: +30.60454147186048605),
        (re:  19.90165737821260974;  im: +28.52925077535505228),
        (re:   4.10990652539402285;  im: +9.958661584275993084),
        (re: -72.11353945579950930;  im: -31.70897752762440709),
        (re:  50.65472933722129051;  im: -86.49464600276076246));

const t_inv:  array[0..9] of complex = (
        (re:  0.5879747708341167711e-1;  im: -0.9138885060735870098e-1),
        (re:  0.1290525960549594605;     im: +0.4617221732733286767e-2),
        (re: -0.1099480336617089353e-1;  im: +0.1989691929690424442),
        (re: -0.4247559138301920663e-1;  im: -0.8168821665740785727e-1),
        (re:  0.9501201804472894140e-1;  im: -0.2885352143771125834e-1),
        (re:  0.8149880137464069725e-1;  im: -0.1456285355957822296),
        (re:  0.1503259447498211211;     im: -0.7842294919027377673e-1),
        (re:  0.2532105413089933676;     im: -0.1694272106882013405),
        (re:  0.2317055986689894902e-1;  im: +0.1102595998817552844),
        (re: -0.8665487317820390140e-1;  im: -0.4967296613764175193e-1));

const t_acot:  array[0..9] of complex = ({arccot(z) = arctan(1/z)}
        (re:  0.5922161886162248337e-1;  im: -0.9132440360395449438e-1),
        (re:  0.1283458944466363632;     im: +0.4541613264280391150e-2),
        (re: -0.1144745643184335178e-1;  im: +0.2016329540924836246),
        (re: -0.4273437955030763245e-1;  im: -0.8172155623067200375e-1),
        (re:  0.9480541047081665141e-1;  im: -0.2860296932069164436e-1),
        (re:  0.8306094959024172596e-1;  im: -0.1456687715320728166),
        (re:  0.1500979340169774302;     im: -0.7683048612788070225e-1),
        (re:  0.2545727207450032827;     im: -0.1603131300046753064),
        (re:  0.2345125836452626135e-1;  im: +0.1106490750793908248),
        (re: -0.8665009277637122049e-1;  im: -0.4934185030502439949e-1));

const t_acotc:  array[0..9] of complex = ( {arccotc(z) = Pi/2 - arctan(z)}
        (re: 0.5922161886162248337e-1;  im: -0.9132440360395449438e-1),
        (re: 0.1283458944466363632;     im: +0.4541613264280391150e-2),
        (re: 0.3130145197157949887e1;   im: +0.2016329540924836246),
        (re: 0.3098858274039485606e1;   im: -0.8172155623067200375e-1),
        (re: 0.9480541047081665141e-1;  im: -0.2860296932069164436e-1),
        (re: 0.8306094959024172596e-1;  im: -0.1456687715320728166),
        (re: 0.1500979340169774302;     im: -0.7683048612788070225e-1),
        (re: 0.2545727207450032827;     im: -0.1603131300046753064),
        (re: 0.2345125836452626135e-1;  im: +0.1106490750793908248),
        (re: 0.3054942560813422018e1;   im: -0.4934185030502439949e-1));

const t_acoth: array[0..9] of complex = ({arccoth(z) = arctanh(1/z)}
        (re:  0.5837502793896850906e-1;  im: -0.9144747728436317341e-1),
        (re:  0.1297734349779038123;     im: +0.4695385748540486505e-2),
        (re: -0.1057645606734725207e-1;  im: +0.1964264609546681643),
        (re: -0.4221859567868835888e-1;  im: -0.8165292997825605856e-1),
        (re:  0.9521899799131672206e-1;  im: -0.2910791691718558618e-1),
        (re:  0.7996545936689032386e-1;  im: -0.1455452914075773492),
        (re:  0.1505124547198072622;     im: -0.8005307349326623874e-1),
        (re:  0.2508207293399398771;     im: -0.1787386614027091028),
        (re:  0.2289610881579713585e-1;  im: +0.1098738278666101983),
        (re: -0.8665624101841876131e-1;  im: -0.5000612310138727122e-1));

const t_acothc:  array[0..9] of complex = ( {arccothc(z) = arctanh(z) - Pi/2}
        (re:  0.5837502793896850906e-1;  im: +3.050145176305430065),
        (re:  0.1297734349779038123;     im: +4.695385748540486505e-3),
        (re: -0.1057645606734725207e-1;  im: +1.964264609546681643e-1),
        (re: -0.4221859567868835888e-1;  im: +3.059939723611537180),
        (re:  0.9521899799131672206e-1;  im: +3.112484736672607652),
        (re:  0.7996545936689032386e-1;  im: +2.996047362182215889),
        (re:  0.1505124547198072622;     im: +3.061539580096527000),
        (re:  0.2508207293399398771;     im: +2.962853992187084136),
        (re:  0.2289610881579713585e-1;  im: +1.098738278666101983e-1),
        (re: -0.8665624101841876131e-1;  im: +3.091586530488405967));

const t_sec: array[0..9] of complex = (
        (re:  0.2295199148880376835e-3;  im: -0.8403447475347837991e-3),
        (re:  0.12989370166232056268e1;  im: -0.3033486595555792470e1),
        (re:  0.1282551289556627290e-1;  im: +0.3644422826478168455e-2),
        (re:  0.3838075143333806804e-4;  im: +0.1248637209030750447e-3),
        (re: -0.1045455286208551367;     im: -0.2232023102491372549e-1),
        (re: -0.1046938934796870726e-1;  im: +0.2288486624474527028e-2),
        (re:  0.6513009749079909522e-1;  im: -0.1136541304196971542),
        (re: -0.2923394633451341215;     im: +0.1218333775212251219),
        (re: -0.8507263191619357876e-4;  im: -0.3270094427232153096e-3),
        (re: -0.1017362163340791656e-1;  im: -0.9267177723122378378e-2));

const t_csc: array[0..9] of complex = (
        (re: -0.8403445172210722399e-3;  im: -0.2295196778103877952e-3),
        (re:  0.9683267193972526473;     im: +0.3023039867801472170e-1),
        (re: -0.3645298006835056261e-2;  im: +0.1282631226422795817e-1),
        (re:  0.1248637202056048708e-3;  im: -0.3838075056401858522e-4),
        (re: -0.2268519939650578464e-1;  im: +0.1050413340741458162),
        (re:  0.2288856933581577076e-2;  im: +0.1046988089317075064e-1),
        (re: -0.1136310234293167699;     im: -0.6401381157234571038e-1),
        (re:  0.1376788855137337301;     im: +0.2977521788958189069),
        (re:  0.3270094287888337102e-3;  im: -0.8507261857816022584e-4),
        (re: -0.9268218455820426031e-2;  im: +0.1017283739905681490e-1));

const t_sech: array[0..9] of complex = (
        (re:  0.1580824202030253160e-2;  im: -0.1367125757545055034e-1),
        (re:  0.8379461465333227632e-3;  im: +0.2381269591839372671e-3),
        (re:  1.849738276901817540;      im: +1.624879126147844399),
        (re: -0.1303611992058492371e-1;  im: -0.2798965451304095563e-2),
        (re: -0.1276157982057134419e-3;  im: -0.2789692947087167673e-4),
        (re:  0.5325691222430206498e-1;  im: +0.9319546321990157438e-1),
        (re: -0.9812894425422896831e-2;  im: -0.4307425779044763368e-2),
        (re: -0.3329694810529869903e-1;  im: -0.1269009901611255701),
        (re: -0.2431353695905795505;     im: +0.2102782715592330703),
        (re:  0.8902676617781153125e-4;  im: -0.3259551551312227504e-3));

const t_csch: array[0..9] of complex = (
        (re:  0.1580383086179010325e-2;  im: -0.1367003137608408583e-1),
        (re:  0.8379463694439584530e-3;  im: +0.2381272032352972409e-3),
        (re: -0.8303279906660916594e-1;  im: -1.000424936846338354),
        (re:  0.1303707448854306353e-1;  im: +0.2799668111199677253e-2),
        (re: -0.1276157990959022940e-3;  im: -0.2789693014150183876e-4),
        (re:  0.5264139994391948945e-1;  im: +0.9318271677380037815e-1),
        (re: -0.9813093754703538708e-2;  im: -0.4308008027580901967e-2),
        (re: -0.3252486714226639958e-1;  im: -0.1260944142519527329),
        (re: -0.2330628426706680808;     im: +0.2236417341347029484),
        (re: -0.8902675234240714349e-4;  im: +0.3259551416905490430e-3));

const t_asec: array[0..9] of complex = (
        (re: 1.512210183685502006;  im: +0.9141852458058421885e-1),
        (re: 1.441384210511503894;  im: -0.4656140008081491080e-2),
        (re: 1.581579935950300462;  im: -0.1976905676742241681),
        (re: 1.613143307981322738;  im: +0.8167069354626031696e-1),
        (re: 1.475680840833964570;  im: +0.2898047671654966331e-1),
        (re: 1.490066035968365363;  im: +0.1455895139329430183),
        (re: 1.420374427615751175;  im: +0.7923568279285739895e-1),
        (re: 1.318713053844599337;  im: +0.1740762424309732395),
        (re: 1.547763376821836497;  im: -0.1100664831786344994),
        (re: 1.657452099507347186;  im: +0.4983941833819650269e-1));

const t_acsc: array[0..9] of complex = (
        (re:  0.5858614310939461327e-1;  im: -0.9141852458058421885e-1),
        (re:  0.1294121162833927252;     im: +0.4656140008081491080e-2),
        (re: -0.1078360915540384276e-1;  im: +0.1976905676742241681),
        (re: -0.4234698118642611903e-1;  im: -0.8167069354626031696e-1),
        (re:  0.9511548596093204879e-1;  im: -0.2898047671654966331e-1),
        (re:  0.8073029082653125666e-1;  im: -0.1455895139329430183),
        (re:  0.1504218991791454444;     im: -0.7923568279285739895e-1),
        (re:  0.2520832729502972825;     im: -0.1740762424309732395),
        (re:  0.2303294997306012269e-1;  im: +0.1100664831786344994),
        (re: -0.8665577271245056663e-1;  im: -0.4983941833819650269e-1));

const t_asech: array[0..9] of complex = (
        (re: 0.9141852458058421885e-1;  im: -1.512210183685502006),
        (re: 0.4656140008081491080e-2;  im: +1.441384210511503894),
        (re: 0.1976905676742241681;     im: +1.581579935950300463),
        (re: 0.8167069354626031696e-1;  im: -1.613143307981322738),
        (re: 0.2898047671654966331e-1;  im: -1.475680840833964570),
        (re: 0.1455895139329430183;     im: -1.490066035968365363),
        (re: 0.7923568279285739895e-1;  im: -1.420374427615751175),
        (re: 0.1740762424309732395;     im: -1.318713053844599337),
        (re: 0.1100664831786344994;     im: +1.547763376821836497),
        (re: 0.4983941833819650269e-1;  im: -1.657452099507347186));

const t_acsch: array[0..9] of complex = (
        (re:  0.5900944583838133397e-1;  im: -0.9135699399171889898e-1),
        (re:  0.1286983771056428065;     im: +0.4579261716317799017e-2),
        (re: -0.1121885689753266316e-1;  im: +0.2002931943353766317),
        (re: -0.4260487376311824908e-1;  im: -0.8170500960799509011e-1),
        (re:  0.9490868978698757836e-1;  im: -0.2872800740986223793e-1),
        (re:  0.8227811649941698836e-1;  im: -0.1456514294348292370),
        (re:  0.1502144285132965397;     im: -0.7762434097558978131e-1),
        (re:  0.2539521606134725062;     im: -0.1648526110697654025),
        (re:  0.2331051248997436416e-1;  im: +0.1104541052974145886),
        (re: -0.8665269393397101588e-1;  im: -0.4950727938358179074e-1));


const t_neg: array[0..9] of complex = (
        (re: -4.979011924883673501;  im: -7.738872474578104566),
        (re: -7.738872474578104566;  im: +0.276880057192001594),
        (re:  0.276880057192001594;  im: +5.010603618271074922),
        (re:  5.010603618271074922;  im: -9.636293707198417380),
        (re: -9.636293707198417380;  im: -2.926377239243964645),
        (re: -2.926377239243964645;  im: -5.229083431459306652),
        (re: -5.229083431459306652;  im: -2.727939910436010251),
        (re: -2.727939910436010251;  im: -1.825308091680855060),
        (re: -1.825308091680855060;  im: +8.685924768575601362),
        (re:  8.685924768575601362;  im: -4.979011924883673501));

const t_add: array[0..9] of complex = (
        (re:   6.979011924883673501;  im: +6.988872474578104566),
        (re: 2*4.869436237289052283;  im: -1.026880057192001594),    {!! 16-bit}
        (re:   1.723119942807998406;  im: -5.760603618271074922),
        (re:  -3.010603618271074922;  im: +8.886293707198417380),
        (re:  11.63629370719841738;   im: +2.176377239243964645),
        (re:   4.926377239243964645;  im: +4.479083431459306652),
        (re:   7.229083431459306652;  im: +1.977939910436010251),
        (re:   4.727939910436010251;  im: +1.075308091680855060),
        (re:   3.825308091680855060;  im: -9.435924768575601362),
        (re:  -6.685924768575601362;  im: +4.229011924883673501));

const t_sub: array[0..9] of complex = (
        (re:   2.979011924883673501;  im: +8.488872474578104566),
        (re:   5.738872474578104566;  im: +0.4731199428079984060),
        (re:  -2.276880057192001594;  im: -4.260603618271074922),
        (re:  -7.010603618271074922;  im: +10.38629370719841738),
        (re:   7.636293707198417380;  im: +3.676377239243964645),
        (re:   0.9263772392439646453; im: +5.979083431459306652),
        (re:   3.229083431459306652;  im: +3.477939910436010251),
        (re:   0.7279399104360102513; im: +2.575308091680855060),
        (re:  -0.1746919083191449396; im: -7.935924768575601362),
        (re: -10.68592476857560136;   im: +5.729011924883673501));

const t_mul: array[0..9] of complex = (
        (re:  15.76217820570092543;   im: +11.74348600549345401),
        (re:  15.27008490626220794;   im: -6.357914470317581612),
        (re:  -4.311712828087309379;  im: -4.906773596824074324*2),  {!! 16-bit}
        (re:  -2.793986956143336808;  im: +23.03054012810014095),
        (re:  21.46737034382980824;   im: -1.374465801910883744),
        (re:   9.774567052082409280;  im: +8.263383933485639821),
        (re:  12.50412179574562099;   im: +1.534067247277540513),
        (re:   6.824860889632661798;  im: +1.604661250534702432),
        (re:  -2.863827393069990901;  im: -18.74083060591184402),
        (re: -13.63759059348844760;   im: +16.47246742619904802));

const t_div: array[0..9] of complex = (
        (re:  0.4905331621130432848e-1; im: -0.2268758090272761598),
        (re:  0.2615681084094688860;    im: -0.8755500357575302183e-1),
        (re:  0.1272372879944400461;    im: +0.4061844884627130586),
        (re: -0.1462173452590943062;    im: -0.1315197397775513096),
        (re:  0.1683838950111744391;    im: -0.1289660564089692227),
        (re:  0.5377620105244472228e-1; im: -0.3523811722225449822),
        (re:  0.2418346776069369096;    im: -0.2695903569429133943),
        (re:  0.3793506746018357300;    im: -0.5287623273581477066),
        (re:  0.1290358196451143614;    im: +0.2031412798633363571),
        (re: -0.2105644709596391168;    im: -0.3435477739163057780e-1));

const t_agm1: array[0..9] of complex = ( {GaussAGM(1.0,a[i]))}
        (re:  2.878673726411520425;     im: +2.580653200903772245),
        (re:  3.531201684127789528;     im: -0.9023401208084259949e-1),
        (re:  0.9934595716181443242;    im: -2.104797448361593304),
        (re:  0.7830183589745715617e-1; im: +3.978130824808563803),
        (re:  4.160918824010985688;     im: +0.9138486199644716756),
        (re:  2.074229386841947800;     im: +1.905059674514581834),
        (re:  2.729177347872881079;     im: +0.9464689230365528842),
        (re:  1.801512435671403332;     im: +0.7149744151992484714),
        (re:  1.975459466518640909;     im: -3.076448883628428563),
        (re: -1.449703738694954291;     im: +3.154768475274991673));

const t_agm2: array[0..9] of complex = ( {GaussAGM(exp(a[i]),a[i]))}
        (re: +12.16309456638125043; im:  +53.33644369891215670),
        (re: +494.2620706993210316; im:  -122.4376837837874231),
        (re: +1.117754846535157115; im:  -1.404706300714706494),
        (re: -1.127101991823508270; im:  +1.556378105311070252),
        (re: -2307.975892171818871; im:  +1286.538783417612324),
        (re: +8.506796287360170147; im:  -3.028866929393394456),
        (re: -36.31761245663011883; im:  +41.21258416297376713),
        (re: +1.054979206135114661; im:  +7.536352713420809473),
        (re: -1.820030683618763057; im:  -6.747929223442930243),
        (re: -1.180011422928028947; im:  +4.071305568959347168e-1));


const t_lbxx: array[0..9] of complex = ( {logbase(a[i], conj(a[i]))}
        (re:  0.6630101751303512106;    im: -0.7486103844281222747),
        (re:  0.9993896715495818103;    im: +0.3493256933033969506e-1),
        (re: -0.7976320177835292718e-2; im: +0.9999681886522294053),
        (re:  0.1501522573724096165;    im: -0.988662884711451916),
        (re:  0.9679321697976004621;    im: -0.2512116929422457212),
        (re:  0.4805155242576207559;    im: -0.8769862205003131512),
        (re:  0.8632037497063317631;    im: -0.5048557085870462321),
        (re:  0.6049219261204649730;    im: -0.7962847878106844237),
        (re:  0.4387378157109047030;    im: +0.8986151173139834411),
        (re: -0.1283353365890161808;    im: -0.991730831114261530));


const t_log10: array[0..9] of complex = (
        (re: 0.963892237455590425;  im: +0.4338997735671419493),
        (re: 0.8889554724137657949; im: -0.1553148899064354825e-1),
        (re: 0.7005521046294541231; im: -0.7061623964948124322),
        (re: 1.035875306732244531;  im: +0.8904312123813498016),
        (re: 1.003065742975330237;  im: +0.1280439678218788748),
        (re: 0.7775895443973916253; im: +0.4606066633334181087),
        (re: 0.7706958146231532704; im: +0.2088285737176995220),
        (re: 0.5161765090119115614; im: +0.2561018671761597762),
        (re: 0.9481998256702663974; im: -0.5922320858444695228),
        (re: 1.000511536245441714 ; im: +1.138325527040741282));

const t_ln1p: array[0..9] of complex = ( {ln(1+0.125*a[i])}
        (re:  0.6359870559592973467; im: +0.5376653501249619215),
        (re:  0.6768467816638516329; im: -0.1759030068786516479e-1),
        (re:  0.1404274389811349238; im: -0.5755169025868995753),
        (re:  0.2320372186187899212; im: +1.269987558093937849),
        (re:  0.8040975381430114584; im: +0.1644311191286016814),
        (re:  0.4148522451170837044; im: +0.4463606088755443519),
        (re:  0.5237973744865404404; im: +0.2033573899869711913),
        (re:  0.3076791480358353793; im: +0.1685313306112030357),
        (re:  0.4942532759028938344; im: -0.7239248008962038688),
        (re: -0.4648096496012578213; im: +1.707697826464583909));

const t_expm1: array[0..9] of complex = ( {exp(a[i]/16)-1}
        (re:  0.2084614314764963823;    im: +0.6348007474939909575),
        (re:  0.6217888859800103407;    im: -0.2806786428857771341e-1),
        (re: -0.6495773464318968003e-1; im: -0.3027838022489718850),
        (re: -0.3975095971688073819;    im: +0.4141953035763729656),
        (re:  0.7957958947511262505;    im: +0.3321606008092035376),
        (re:  0.1371384618852060061;    im: +0.3854593328378902681),
        (re:  0.3664447065220901995;    im: +0.2352576867156370654),
        (re:  0.1781845733786736222;    im: +0.1349955131114415004),
        (re: -0.4030059291753222991e-1; im: -0.5790231209681929250),
        (re: -0.4468309463182119146;    im: +0.1779202851051918940));

const t_psi: array[0..9] of complex = ( {Psi(a[i])}
        (re: 2.190452287824627396; im: +1.045682022865412592),
        (re: 1.980985492631528574; im: -0.3817017008864189322e-1),
        (re: 1.621880288963526387; im: -1.725116035642723532),
        (re: 2.406834361466308926; im: +2.090558888007699656),
        (re: 2.261455631380162856; im: +0.3097150523459726694),
        (re: 1.750927479723294046; im: +1.135384163533750939),
        (re: 1.698056788119303427; im: +0.5220154316278681932),
        (re: 1.058936221076724268; im: +0.6815084938172894784),
        (re: 2.172694772848488318; im: -1.419221365879583406),
        (re: 2.346669844833799078; im: +2.645211195114705310));

const t_poly: array[0..9] of complex = ( {sum(a[k]*(0.5-1.25*I)^(k-1), k=1..i)}
        (re:  4.979011924883673501;  im: +7.738872474578104566),
        (re:  8.502348090682723791;  im: -2.073158147240526938),
        (re:  2.602498642908382231;  im: +4.849359173230260889),
        (re:  3.932914624573937062;  im: -21.62006178942278814),
        (re: -4.125948027651825396;  im: +10.46770454204468510),
        (re:  0.5789829069577247002; im: +36.54909290278062156),
        (re:  33.22159315126403280;  im: +23.59786099059819153),
        (re:  36.15315551961109710;  im: -2.550056378239452506),
        (re:  25.67673723762244366;  im: +185.32697154912247536*0.5),
        (re: -8.552814819599645479;  im: -48.71827717003510060));

const t_polyr: array[0..9] of complex = ( {sum(Im(a[k])*(0.5-1.25*I)^(k-1), k=1..i)}
        (re:  7.738872474578104566;  im: +0),
        (re:  7.600432445982103769;  im: +0.3461000714900019926),
        (re:  14.17684969496288960;  im: +6.609354594328845645),
        (re: -7.203676967883598958;  im: +16.39621539070223830),
        (re: -6.734999363160932746;  im: +25.99839070697149729),
        (re:  15.13114834534370699;  im: +33.53051772005985404),
        (re:  25.74653756224789824;  im: +21.23614009636631174),
        (re:  19.01504552638726443;  im: +8.244300306854415206),
        (re:  112.3101425291181106;  im: -0.8848271659771189406),
        (re:  92.11181457435109713;  im: +68.580864051570975609));

const t_dilog: array[0..9] of complex = ( {polylog(2,a[i])}
        (re: -1.870170500160827427;   im: +4.849250792312688779),
        (re:  0.9497977732273065982;  im: -6.362253521294172701),
        (re: -1.776811296980536016;   im: -2.641816140969543817),
        (re: -3.850426925818630103;   im: +2.682902562225120672),
        (re: -0.3572715499099296217;  im: +6.605318425184978869),
        (re: -1.159847172690734747;   im: +3.877466466329001273),
        (re:  0.16577942643544453783; im: +4.806649327942129338),
        (re:  0.64390299862781929990; im: +3.227375663527845068),
        (re: -2.468023660017213283;   im: -3.993169898629685296),
        (re: -4.077736931764177179;   im: +1.246737782568628648));

const t_ellk: array[0..9] of complex = ({EllipticK(a[i]))}
        (re:  0.3630732016071155406;  im: +0.1589098155396284728),
        (re:  0.2149235956155849294;  im: -0.4371983865091188053),
        (re:  0.5935476496035540868;  im: +0.2146858335574974831e-1),
        (re:  0.3282872970313126821;  im: -0.1205050440510923685),
        (re:  0.2285847439295572344;  im: +0.3145176506472481265),
        (re:  0.5034900734191057502;  im: +0.1821258374181502035),
        (re:  0.4145253416821184703;  im: +0.3886615395668822386),
        (re:  0.6939252895628805286;  im: +0.4761815725286763248),
        (re:  0.3975960236041094088;  im: -0.5940179980495495403e-1),
        (re:  0.2749823521356907006;  im: -0.2673309710367240113));

const t_ellck: array[0..9] of complex = ({EllipticCK(a[i]))}
        (re:  0.3025323668452143726;    im: -0.2712120910796430483),
        (re:  0.4445430899466322137;    im: +0.1135956258998201032e-1),
        (re:  0.2880716228931014401;    im: +0.6103241985209226182),
        (re:  0.7769006345460420227e-2; im: -0.3947049678564829230),
        (re:  0.3601402160030747762;    im: -0.7909638551200144570e-1),
        (re:  0.4107820710924422907;    im: -0.3772795639749673408),
        (re:  0.5137670924758346427;    im: -0.1781725863605817212),
        (re:  0.7532828614925266385;    im: -0.2989587874671061002),
        (re:  0.2321425614284353532;    im: +0.3615233499109685323),
        (re: -0.1889124414145654790;    im: -0.4111012470026536909));

const t_elle: array[0..9] of complex = ({EllipticE(a[i]))}
        (re:  7.943275972206999918;   im: -4.884664940984808911),
        (re:  0.3852560418482685403;  im: +7.488283350474106398),
        (re:  5.357953289399164375;   im: -0.2632873427384568878),
        (re:  9.82089929161429692;    im: +4.939613996663821175),
        (re:  3.047716570970533362;   im: -9.45531584305351687),
        (re:  5.517413893161988901;   im: -2.81439546217088789),
        (re:  2.954185575364653429;   im: -4.99690197766049611),
        (re:  2.212775397389454384;   im: -2.42420396360245546),
        (re:  8.912465890938144798;   im: +1.78971048495307683),
        (re:  5.128768619508267532;   im: +8.53053033493973712));

const t_exp2: array[0..9] of complex = ({2^a[i]}
        (re:  19.13114851867412526;     im: -25.07258411828447256),
        (re:  209.6935289144531275;     im: -40.74558517972284900),
        (re: -0.7804385630056867110;    im: +0.2686222841553663176),
        (re:  0.2861826306152657883e-1; im: +0.1197110279008295110e-1),
        (re: -351.5990610189685966;     im: +713.9352210484824750),
        (re: -6.732606237487401262;     im: -3.530194636296673789),
        (re: -11.80081515033121407;     im: +35.60206402414627666),
        (re:  1.993191920305541285;     im: +6.318148050158053523),
        (re:  3.422374229625497396;     im: +0.9198168024611665233),
        (re: -0.2312711405020745712e-2; im: -0.7397935321601635477e-3));

const t_exp10: array[0..9] of complex = ({10^a[i]}
        (re:  49041.36455339954630;     im: -81692.40122564724781),
        (re:  44044545.49543944410;     im: -32624981.77369520256),
        (re:  0.2725684221615126522;    im: +0.4528963789852567103),
        (re: -0.9569591974910356937e-5; im: -0.1912347033434410590e-5),
{$ifdef BIT16}
        (re:  1943820771.913623276*2;   im: 1902205053.527650575),
{$else}
        (re:  3887641543.827246551;     im: 1902205053.527650575),
{$endif}
        (re:  729.9849992944069395;     im: -423.7594183570774552),
        (re:  169466.0359719999248;     im: -317.1619584673702657),
        (re: -260.6749487307233164;     im: -466.6139307539978187),
        (re:  27.28833232049515759;     im: -61.06164877299231211),
        (re:  0.9315994876725179977e-9; im: -0.1838420354078803348e-8));


const t_erf: array[0..9] of complex = ({erf(a[i]))}
        (re:  95395870481619.93934;     im:   +49941742643702.20899),
        (re:  1.0;                      im:   +0.7047814886407272226e-27),
        (re: -3506653192.106538301;     im:   +7757057533.787470778),
        (re: -1.334775216587778476e28;  im:   -3.632534987411890460e27),
        (re:  1.0;                      im:   +0.1949043927869400206e-38),
        (re: -13196993.33622319722;     im:   +3186205.956637056151),
        (re:  1.000000000161554300;     im:   -0.1429701395272682038e-9),
        (re:  1.001291154556853024;     im:   -0.2443210040501249202e-2),
        (re:  1.107560382144039650e29;  im:   -0.1326730656433195733e31),
        (re: -1.0;                      im:   -0.4594020910618858696e-23));

const t_erfc: array[0..9] of complex = ({erfc(a[i]))}
        (re: -95395870481618.93934;      im:  -49941742643702.20899),
        (re: -0.291121945913907437e-27;  im:  -0.7047814886407272233e-27),
        (re:  3506653193.106538301;      im:  -7757057533.787470778),
        (re:  1.334775216587778476e28;   im:  +3.632534987411890460e27),
        (re:  0.1360038752273407282e-37; im:  -0.1949043927869400206e-38),
        (re:  13196994.33622319722;      im:  -3186205.956637056151),
        (re: -0.1615543004907724693e-9;  im:  +0.1429701395272682038e-9),
        (re: -0.1291154556853024098e-2;  im:  +0.2443210040501249202e-2),
        (re: -1.107560382144039650e29;   im:  +0.1326730656433195733e31),
        (re:  2.0;                       im:  +0.45940209106188586957e-23));

const t_lngam: array[0..9] of complex = ({lnGAMMA(a[i])}
        (re:  -1.846093392732739929;  im:  +13.90444677420406966),
        (re:   7.998128933676516634;  im:  -0.5483611059214097460),
        (re:  -8.205508177343185688;  im:  -1.792096144927240622),
        (re:  -26.97507366840856870;  im:  +2.042944534658944677),
        (re:   11.52935875005668711;  im:  +6.523783641952711638),
        (re:  -3.202180878993923631;  im:  +6.694658829470237023),
        (re:   2.782859562494098082;  im:  +4.380479206610507948),
        (re:  -0.2162680378479759685; im:  +1.643909789008721657),
        (re:  -9.855566527850857717;  im:  -12.07623286541378759),
        (re:  -24.61499632157456840;  im:  -17.58983369699055321));

const t_sn05: array[0..9] of complex = ({JacobiSN(a[i], 0.5)}
        (re: -1.285188060246993903;   im:  +0.4857004516536207784e-1),
        (re:  0.8494242423682927701;  im:  -0.1447586174029837819),
        (re: -0.3657592503526921484;  im:  -0.7308778882047384280),
        (re:  1.366521991335175394;   im:  -0.3175372389445671014e-1),
        (re:  1.356526249658127266;   im:  +1.554976498247018717),
        (re:  0.6898422994155768383;  im:  -0.9254171963790654745),
        (re: -1.792489679351100745;   im:  -0.1168347508422918131),
        (re:  2.725163196209873268;   im:  -1.121943049989764401),
        (re:  0.9940403124860269659;  im:  +0.6269766062372652227e-2),
        (re: -1.141892651430803757;   im:  -0.1256889670047530880));

const t_cn05: array[0..9] of complex = ({JacobiCN(a[i], 0.5)}
        (re: -0.7711105141691441734e-1;  im:  -0.8095031903363244538),
        (re:  0.5860506160189228168;     im:  +0.2098137525203809230),
        (re: -1.204033909614068456;      im:  +0.2220247672051115468),
        (re: -0.4656031372690420225e-1;  im:  -0.9319559628200441571),
        (re:  1.743833619144266677;      im:  -1.209614503537707483),
        (re:  1.276898472625819123;      im:  +0.4999551180886443113),
        (re: -0.1405843731024282218;     im:  +1.489675420196102416),
        (re: -1.191299713387293848;      im:  -2.566506038503148684),
        (re: -0.1207731691602462465;     im:  +0.5160417880221245249e-1),
        (re:  0.2435001011125278328;     im:  -0.5894178570477488157));

const t_dn075: array[0..9] of complex = ({JacobiDN(a[i], 0.75)}
        (re:  0.7284965298981917643;     im:  -0.1384551732936994524),
        (re:  1.019213201247263884;      im:  +0.1556150913912152249e-1),
        (re: -1.782568600810361360;      im:  +1.093065542806834654),
        (re: -0.5032644822643696957;     im:  +0.3829206134411208054),
        (re: -0.5726641976285646200;     im:  +0.2225799184591298531e-1),
        (re: -0.2670083155132195237;     im:  -0.8538585129764090545),
        (re: -0.5693202233648004169;     im:  -0.1823624758955302642),
        (re: -0.2290567377702582283e-1;  im:  +0.6444742678584468682),
        (re:  0.2177045773849638210;     im:  +0.5234972445892631574e-1),
        (re: -0.4523361228192855854;     im:  -0.5671649652090698274));

const t_lw0: array[0..9] of complex = ({LambertW(a[i])}
        (re:1.6500302455423464183;  im: +0.63285381594094686059   ),
        (re:1.5857453995245859548;  im: -0.21932452128183214270e-1),
        (re:1.1912199374030925745;  im: -0.95183986805984729218   ),
        (re:1.6324832596799731100;  im: +1.3568434583324572082    ),
        (re:1.7463633382224638511;  im: +0.18774001251720361220   ),
        (re:1.3759511264774292182;  im: +0.63075640749497837664   ),
        (re:1.4107531539716369498;  im: +0.28292337260596942574   ),
        (re:1.0757506625817754882;  im: +0.30953023287387862057   ),
        (re:1.5899183354915303226;  im: -0.86526848933486565100   ),
        (re:1.4754512147399511594;  im: +1.7506074010970930162    ));

const t_rstheta: array[0..9] of complex = ({RiemannSiegelTheta[i])}
        (re:-5.79698818509389387425155725624;  im: +0.9235156665128707632e-1),
        (re:-3.45561111728436843283685056550;  im: -0.2878103467837720381e-1),
        (re: 4.55489195845439136696415985662;  im: +2.81649548649679863683866774652),
        (re: 6.78396913212541274911019548810;  im: +0.55122400229321785158960328057),
        (re:-3.36721732278242532751640753826;  im: +0.6470381887719931678),
        (re:-4.69655129459561735774100804784;  im: -1.18966240603208875894606480234),
        (re:-3.82542684410296449663571285660;  im: -0.1947369102176586267),
        (re:-3.17518524280295903767485667042;  im: -0.7044598181015890073),
        (re:-6.91284854525642632370277130911;  im: +1.60184771831370571290423527617),
        (re: 4.00632228621792105905142220726;  im: +0.9298010638074239806));

const t_rgamma: array[0..9] of complex = ({1/GAMMA(a[i])}
        (re:  1.461015946798029606;       im: -6.164247291231658855),
        (re:  0.2868132441934709904e-3;   im: +0.1752005940511160382e-3),
        (re: -803.5952236584138679;       im: +3571.778232451101351),
        (re: -236018795112.0485665;       im: -462173547661.2789821),
        (re:  0.9553660631537348512e-5;   im: -0.2343999831037668495e-5),
        (re:  22.53395070937835015;       im: -9.833460177591359926),
        (re: -0.2015747167312651972e-1;   im: +0.5848507436864731148e-1),
        (re: -0.9068477307551588237e-1;   im: -1.238118469565954914),
        (re:  16819.71751092936972;       im: -8974.414231495764880),
        (re:  14996639870.22871418;       im: -46644073010.32659782));


const t_zeta: array[0..9] of complex = ({Zeta(a[i])}
        (re: 1.016722206058120990;   im: +0.2272412164955746070e-1),
        (re: 1.004814164986210683;   im: +0.9643332351795850125e-3),
        (re: 0.5912941011361299797;  im: -0.3275805823384829817),
        (re: 0.7364246061478961229;  im: +14.04087320815617425),
        (re: 0.9994187130773491259;  im: -0.1123962359732141394e-2),
        (re: 0.9179182857760878168;  im: +0.6450550545443942148e-1),
        (re: 0.9878797628592448237;  im: -0.2501126037571756665e-1),
        (re: 0.9789592230400530086;  im: -0.1899460465551051563),
        (re: 1.190610438115596570;   im: -0.9447047467589220939e-1),
        (re: 1.976991999153836946;   im: +1.158538220747971507));

const t_sinpi: array[0..9] of complex = ({sin(Pi*a[i])}
        (re:  1192648220.597843741;   im: -18061751794.36526843),
        (re: -1.025976263209661641;   im: -0.6708864930040381000),
        (re: -2621454.745740863065;   im: -2212290.322122437819),
        (re:  233897138369.2759192;   im: -7018757908370.935777),
        (re: -4472.591187550518056;   im: +2041.376525799207209),
        (re:  1562034.567531112468;   im: -6632635.563584526315),
        (re: -1737.362539929414407;   im: -1982.127470504619987),
        (re:  116.6726900598175811;   im: -101.5242811042482035),
        (re: -185028561287.7825978;   im: -302596199669.3737845),
        (re: -2591140.137690795383;   im: -1712857.667314416324));

const t_ei: array[0..9] of complex = ({Ei(a[i])}
        (re:  15.52190353698431639;      im:  +8.825135592692592481),
        (re:  343.5278861101520795;      im:  -81.33090327194121595),
        (re: -0.1429503954456805403;     im:  -3.131653660164947430),
        (re:  0.1950774472123783100e-3;  im:  +3.142144836280398877),
        (re: -1443.305132006726662;      im:  +895.0617746583547143),
        (re: -2.126050942940339015;      im:  +0.677293977343055228),
        (re: -18.91428940638775083;      im:  +34.90451925180938590),
        (re:  3.335500633980515984;      im:  +7.542419611304741738),
        (re:  0.4215967467288211034;     im:  -3.703305887729112545),
        (re: -0.1059090647680830425e-4;  im:  +3.141604086304144138));

const t_e1: array[0..9] of complex = ({E1(a[i])}
        (re: -0.5074702041403881986e-3;  im:  -0.4860084373399765336e-3),
        (re:  0.4798049905067506407e-4;  im:  +0.1532761060007119317e-4),
        (re:  0.2496686474997546865;     im:  +0.4333528386302011651e-1),
        (re:  8.0599666345425100786;     im:  +11.76314605013149177),
        (re: -0.5948259180674324973e-5;  im:  +0.3378939195304232291e-6),
        (re:  0.8125014417853437629e-2;  im:  +0.8815831418135842027e-3),
        (re: -0.7980513764176438105e-3;  im:  +0.9124903224743227215e-5),
        (re: -0.1096409517240477305e-1;  im:  -0.1194580561095832191e-1),
        (re: -0.1515173456858563187e-1;  im:  -0.8778301356837959188e-2),
        (re:  205.19896826531846196;     im:  -614.8083478662251415));

const t_li: array[0..9] of complex = ({Li(a[i])}
        (re:  4.730134144092319434;   im: +3.808517063810701758),
        (re:  5.128317440531150968;   im: -0.1352826950986204958),
        (re:  2.181827997540223393;   im: -4.073556479055652943),
        (re:  2.077530734647704580;   im: +6.471385093752115789),
        (re:  6.089322641820820993;   im: +1.276122721344672542),
        (re:  3.417667800145659768;   im: +3.233975991883970790),
        (re:  3.998339257902692962;   im: +1.567277320572251542),
        (re:  2.324489885678579870;   im: +1.564769662158663104),
        (re:  3.794312930622069468;   im: -4.742284540095005749),
        (re:  0.285279436777596181;   im: +6.259636828398731666));

{---------------------------------------------------------------------------}
procedure clbasexx(const z: complex; var w: complex);
begin
  cconj(z,w);
  clogbase(z,w,w);
end;


{---------------------------------------------------------------------------}
procedure cln1px(const z: complex; var w: complex);
begin
  w.re := 0.125*z.re;
  w.im := 0.125*z.im;
  cln1p(w,w);
end;


{---------------------------------------------------------------------------}
procedure cexpm1x(const z: complex; var w: complex);
begin
  w.re := 0.0625*z.re;
  w.im := 0.0625*z.im;
  cexpm1(w,w);
end;


{---------------------------------------------------------------------------}
procedure cpowxx(const z: complex; var w: complex);
const
  cxx: complex = (re: 2.0; im: -0.75);
begin
  cpow(cxx,z,w);
end;


{---------------------------------------------------------------------------}
procedure cpowxa(const z: complex; var w: complex);
begin
  cpowx(z,-0.75*csgn(z),w);
end;


{---------------------------------------------------------------------------}
procedure cnrootx2(const z: complex; var w: complex);
begin
  cnroot(z,2,w);
end;


{---------------------------------------------------------------------------}
procedure cnrootx3(const z: complex; var w: complex);
begin
  cnroot(z,3,w);
end;


{---------------------------------------------------------------------------}
procedure caddxx(const z: complex; var w: complex);
const
  cxx: complex = (re: 2.0; im: -0.75);
begin
  cadd(cxx,z,w);
end;


{---------------------------------------------------------------------------}
procedure csubxx(const z: complex; var w: complex);
const
  cxx: complex = (re: 2.0; im: -0.75);
begin
  csub(z,cxx,w);
end;


{---------------------------------------------------------------------------}
procedure cmulxx(const z: complex; var w: complex);
const
  cxx: complex = (re: 2.0; im: -0.75);
begin
  cmul(z,cxx,w);
end;


{---------------------------------------------------------------------------}
procedure cdivxx(const z: complex; var w: complex);
const
  cxx: complex = (re: 2.0; im: -0.75);
begin
  cdiv(cxx,z,w);
end;


{---------------------------------------------------------------------------}
procedure cagm2(const z: complex; var w: complex);
begin
  cexp(z,w);
  cagm(z,w,w);
end;


{---------------------------------------------------------------------------}
procedure celkx(const z: complex; var w: complex);
var
  t: complex;
begin
  cellke(z,w,t);
end;


{---------------------------------------------------------------------------}
procedure csnx(const z: complex; var w: complex);
var
  cn,dn: complex;
begin
  csncndn(z,0.5,w,cn,dn);
end;


{---------------------------------------------------------------------------}
procedure ccnx(const z: complex; var w: complex);
var
  sn,dn: complex;
begin
  csncndn(z,0.5,sn,w,dn);
end;


{---------------------------------------------------------------------------}
procedure cdnx(const z: complex; var w: complex);
var
  sn,cn: complex;
begin
  csncndn(z,0.75,sn,cn,w);
end;


{$ifdef FPC}
  {$ifndef DEBUG}
    {$ifndef VER1}
      {$warn 5036 OFF}  {Local variable "xx" does not seem to be initialized}
    {$endif}
  {$endif}
{$endif}


{---------------------------------------------------------------------------}
procedure gotest1(const fname: FNamStr; f1: cfunc1; const fv: array of complex);
var
  i: integer;
  w,d: complex;
  af,ad,r,ml: extended;
begin
  {$ifdef fullwrite}
    writeln('Test for function ', fname);
  {$else}
    write(fname:10);
  {$endif}
  ml := 0.0;
  for i:=low(zv) to high(zv) do begin
    f1(zv[i], w);
    csub(w, fv[i], d);
    ad := cabs(d);
    af := cabs(fv[i]);
    r := ad;
    {$ifdef fullwrite}
      if af>0.5 then begin
        r := r/af;
        writeln(i:4, '  ',r:20, ' r', '  ',r/eps_x:6:2);
      end
      else writeln(i:4, '  ',r:20, ' a', '  ',r/eps_x:6:2);
    {$else}
      if af>0.5 then r := r/af;
    {$endif}
    ml := maxx(ml,r);
  end;
  {$ifndef fullwrite}
     writeln(' ',ml/eps_x:6:2);
  {$endif}
  maxr := maxx(ml,maxr);
end;


{---------------------------------------------------------------------------}
procedure gotestx(const fname: FNamStr; fx: cfuncx; const fv: array of extended);
var
  i: integer;
  af,ad,r,ml: extended;
begin
  {$ifdef fullwrite}
    writeln('Test for function ', fname);
  {$else}
    write(fname:10);
  {$endif}
  ml := 0.0;
  for i:=low(zv) to high(zv) do begin
    ad := abs(fx(zv[i])- fv[i]);
    af := abs(fv[i]);
    r := ad;
    {$ifdef fullwrite}
      if af>0.5 then begin
        r := r/af;
        writeln(i:4, '  ',r:20, ' r', '  ',r/eps_x:6:2);
      end
      else writeln(i:4, '  ',r:20, ' a', '  ',r/eps_x:6:2);
    {$else}
      if af>0.5 then r := r/af;
    {$endif}
    ml := maxx(ml,r);
  end;
  {$ifndef fullwrite}
     writeln(' ',ml/eps_x:6:2);
  {$endif}
  maxr := maxx(ml,maxr);
end;


{---------------------------------------------------------------------------}
procedure testpoly(const fname: FNamStr; ronly: boolean; const fv: array of complex);
var
  i: integer;
  w,d,z: complex;
  af,ad,r,ml: extended;
  ra: array[0..20] of extended;
begin
  {$ifdef fullwrite}
    writeln('Test for function ', fname);
  {$else}
    write(fname:10);
  {$endif}
  ml := 0.0;
  z.re := 0.5;
  z.im := -1.25;
  for i:=low(zv) to high(zv) do begin
    if ronly then begin
      if i<20 then ra[i] := zv[i].im;
      cpolyr(z, ra, i+1, w);
    end
    else cpoly(z, zv, i+1, w);
    csub(w, fv[i], d);
    ad := cabs(d);
    af := cabs(fv[i]);
    r := ad;
    {$ifdef fullwrite}
      if af>0.5 then begin
        r := r/af;
        writeln(i:4, '  ',r:20, ' r', '  ',r/eps_x:6:2);
      end
      else writeln(i:4, '  ',r:20, ' a', '  ',r/eps_x:6:2);
    {$else}
      if af>0.5 then r := r/af;
    {$endif}
    ml := maxx(ml,r);
  end;
  {$ifndef fullwrite}
     writeln(' ',ml/eps_x:6:2);
  {$endif}
  maxr := maxx(ml,maxr);
end;


{---------------------------------------------------------------------------}
procedure test_complex;
var
  mrea,mref : extended;

const
  CNEA = 6;
  CNEF = 16;
  CNErr = 200;    {Error functions erf/erfc/rgamma}

begin

  maxr := 0;
  writeln('Test AMCmplx V', AMCmplx_Version, ' - AMath based Complex routines    (c) W.Ehrhardt 2013-2018');

  gotestx('cabs',      {$ifdef FPC_ProcVar}@{$endif}cabs,      t_abs);
  gotestx('carg',      {$ifdef FPC_ProcVar}@{$endif}carg,      t_arg);
  gotest1('cadd',      {$ifdef FPC_ProcVar}@{$endif}caddxx,    t_add);
  gotest1('cconj',     {$ifdef FPC_ProcVar}@{$endif}cconj,     t_conj);
  gotest1('cdiv',      {$ifdef FPC_ProcVar}@{$endif}cdivxx,    t_div);
  gotest1('cinv',      {$ifdef FPC_ProcVar}@{$endif}cinv,      t_inv);
  gotest1('cmul',      {$ifdef FPC_ProcVar}@{$endif}cmulxx,    t_mul);
  gotest1('cneg',      {$ifdef FPC_ProcVar}@{$endif}cneg,      t_neg);
  gotest1('csqr',      {$ifdef FPC_ProcVar}@{$endif}csqr,      t_sqr);
  gotest1('csqrt',     {$ifdef FPC_ProcVar}@{$endif}csqrt,     t_sqrt);
  gotest1('csub',      {$ifdef FPC_ProcVar}@{$endif}csubxx,    t_sub);
  testpoly('cpoly',  false, t_poly);
  testpoly('cpolyr', true,  t_polyr);
  mrea := maxr/eps_x;

  maxr := 0;
  gotest1('cbrt',      {$ifdef FPC_ProcVar}@{$endif}ccbrt,     t_cbrt);
  gotest1('cexp',      {$ifdef FPC_ProcVar}@{$endif}cexp,      t_exp);
  gotest1('cexpm1',    {$ifdef FPC_ProcVar}@{$endif}cexpm1x,   t_expm1);
  gotest1('cexp2',     {$ifdef FPC_ProcVar}@{$endif}cexp2,     t_exp2);
  gotest1('cexp10',    {$ifdef FPC_ProcVar}@{$endif}cexp10,    t_exp10);
  gotest1('cln',       {$ifdef FPC_ProcVar}@{$endif}cln,       t_log);
  gotest1('cnroot2',   {$ifdef FPC_ProcVar}@{$endif}cnrootx2,  t_sqrt);
  gotest1('cnroot3',   {$ifdef FPC_ProcVar}@{$endif}cnrootx3,  t_cbrt);
  gotest1('cpow',      {$ifdef FPC_ProcVar}@{$endif}cpowxx,    t_powxx);
  gotest1('cpowx',     {$ifdef FPC_ProcVar}@{$endif}cpowxa,    t_powxa);
  gotest1('cLambertW', {$ifdef FPC_ProcVar}@{$endif}cLambertW, t_lw0);
  gotest1('cln1p',     {$ifdef FPC_ProcVar}@{$endif}cln1px,    t_ln1p);
  gotest1('clog10',    {$ifdef FPC_ProcVar}@{$endif}clog10,    t_log10);
  gotest1('clogbase',  {$ifdef FPC_ProcVar}@{$endif}clbasexx,  t_lbxx);
  gotest1('clngamma',  {$ifdef FPC_ProcVar}@{$endif}clngamma,  t_lngam);
  gotest1('cpsi',      {$ifdef FPC_ProcVar}@{$endif}cpsi,      t_psi);
  gotest1('cagm1',     {$ifdef FPC_ProcVar}@{$endif}cagm1,     t_agm1);
  gotest1('cagm',      {$ifdef FPC_ProcVar}@{$endif}cagm2,     t_agm2);
  gotest1('cdilog',    {$ifdef FPC_ProcVar}@{$endif}cdilog,    t_dilog);
  gotest1('cellck',    {$ifdef FPC_ProcVar}@{$endif}cellck,    t_ellck);
  gotest1('celle',     {$ifdef FPC_ProcVar}@{$endif}celle,     t_elle);
  gotest1('cellk',     {$ifdef FPC_ProcVar}@{$endif}cellk,     t_ellk);
  gotest1('(cellk)',   {$ifdef FPC_ProcVar}@{$endif}celkx,     t_ellk);
  gotest1('(csn)',     {$ifdef FPC_ProcVar}@{$endif}csnx,      t_sn05);
  gotest1('(ccn)',     {$ifdef FPC_ProcVar}@{$endif}ccnx,      t_cn05);
  gotest1('(cdn)',     {$ifdef FPC_ProcVar}@{$endif}cdnx,      t_dn075);
  gotest1('crstheta',  {$ifdef FPC_ProcVar}@{$endif}crstheta,  t_rstheta);

  gotest1('ccos',      {$ifdef FPC_ProcVar}@{$endif}ccos ,     t_cos);
  gotest1('ccosh',     {$ifdef FPC_ProcVar}@{$endif}ccosh,     t_cosh);
  gotest1('ccsc' ,     {$ifdef FPC_ProcVar}@{$endif}ccsc,      t_csc);
  gotest1('ccsch',     {$ifdef FPC_ProcVar}@{$endif}ccsch,     t_csch);
  gotest1('cot',       {$ifdef FPC_ProcVar}@{$endif}ccot,      t_cot);
  gotest1('coth',      {$ifdef FPC_ProcVar}@{$endif}ccoth,     t_coth);
  gotest1('csec' ,     {$ifdef FPC_ProcVar}@{$endif}csec,      t_sec);
  gotest1('csech',     {$ifdef FPC_ProcVar}@{$endif}csech,     t_sech);
  gotest1('csin',      {$ifdef FPC_ProcVar}@{$endif}csin ,     t_sin);
  gotest1('csinh',     {$ifdef FPC_ProcVar}@{$endif}csinh,     t_sinh);
  gotest1('ctan',      {$ifdef FPC_ProcVar}@{$endif}ctan ,     t_tan);
  gotest1('ctanh',     {$ifdef FPC_ProcVar}@{$endif}ctanh,     t_tanh);

  gotest1('carccos',   {$ifdef FPC_ProcVar}@{$endif}carccos,   t_acos);
  gotest1('carccosh',  {$ifdef FPC_ProcVar}@{$endif}carccosh,  t_acosh);
  gotest1('carccot',   {$ifdef FPC_ProcVar}@{$endif}carccot,   t_acot);
  gotest1('carccotc',  {$ifdef FPC_ProcVar}@{$endif}carccotc,  t_acotc);
  gotest1('carccoth',  {$ifdef FPC_ProcVar}@{$endif}carccoth,  t_acoth);
  gotest1('carccothc', {$ifdef FPC_ProcVar}@{$endif}carccothc, t_acothc);
  gotest1('carccsc',   {$ifdef FPC_ProcVar}@{$endif}carccsc,   t_acsc);
  gotest1('carccsch',  {$ifdef FPC_ProcVar}@{$endif}carccsch,  t_acsch);
  gotest1('carcsec',   {$ifdef FPC_ProcVar}@{$endif}carcsec,   t_asec);
  gotest1('carcsech',  {$ifdef FPC_ProcVar}@{$endif}carcsech,  t_asech);
  gotest1('carcsin',   {$ifdef FPC_ProcVar}@{$endif}carcsin,   t_asin);
  gotest1('carcsinh',  {$ifdef FPC_ProcVar}@{$endif}carcsinh,  t_asinh);
  gotest1('carctan',   {$ifdef FPC_ProcVar}@{$endif}carctan,   t_atan);
  gotest1('carctanh',  {$ifdef FPC_ProcVar}@{$endif}carctanh,  t_atanh);

  mref := maxr/eps_x;
  writeln('*** Max err arithmetic/functions = ',mrea:1:2, ' / ', mref:1:2, ' [eps_x]');
  if (mrea <= CNEA) and (mref <= CNEF) then writeln('Passed.')
  else begin
    if mrea > CNEA then write('Failed: arithmetic');
    if mref > CNEF then write('Failed: functions');
    writeln;
  end;
  maxr := 0;
  gotest1('cerfc',     {$ifdef FPC_ProcVar}@{$endif}cerfc,     t_erfc);
  gotest1('cerf',      {$ifdef FPC_ProcVar}@{$endif}cerf,      t_erf);
  gotest1('crgamma',   {$ifdef FPC_ProcVar}@{$endif}crgamma,   t_rgamma);
  gotest1('csinpi',    {$ifdef FPC_ProcVar}@{$endif}csinpi,    t_sinpi);
  gotest1('czeta',     {$ifdef FPC_ProcVar}@{$endif}czeta,     t_zeta);
  gotest1('cei',       {$ifdef FPC_ProcVar}@{$endif}cei,       t_ei);
  gotest1('ce1',       {$ifdef FPC_ProcVar}@{$endif}ce1,       t_e1);
  gotest1('cli',       {$ifdef FPC_ProcVar}@{$endif}cli,       t_li);
  mref := maxr/eps_x;
  writeln('*** Max err erf/rgamma/zeta ... = ', mref:1:2, ' [eps_x]');
  if (mref <= CNErr) then writeln('Passed.')
  else writeln('Failed!');
  writeln;
end;


{---------------------------------------------------------------------------}
{---------------------------------------------------------------------------}

var
  z,w,u: complex;
  d: extended;

{---------------------------------------------------------------------------}
function portrand: double;
  {-Portable Pascal rand in [0,1)}
{$ifdef J_OPT}
{$J+}
{$endif}
const
  seed: longint = 12345;
begin
  seed := 134775813*seed + 1;
  portrand := (seed + 2147483648.0) / 4294967296.0;
end;


{---------------------------------------------------------------------------}
function error(x,y: extended): extended;
var
  r: extended;
begin
  if abs(y)>0.5 then r := abs(1-x/y)
  else r := abs(x-y);
  error := r/eps_x;
end;


{---------------------------------------------------------------------------}
procedure test_func_inv_complex;
const
  NF = 17;
  NT = 5000;
  MaxErr = 1000;
const
  {-0.5*MaxArg < im,re < 0.5*MaxArg. Note that some arc functions}
  {approach non-zero 'limits' for larger inputs and therefore the}
  {final result will have large errors. Thus MaxArg should not be}
  {too large or test the functions indiviually.}
  MaxArg = 32;
var
  z,w,u: complex;
  rr,ri: extended;
  k,cnt,n: integer;
  mi,mr: array[1..NF] of extended;
  s: string[20];
begin
  writeln('Function(inverse function) test: Error in eps_x for re and im');
  for k:=1 to NF do begin
    mi[k] := 0;
    mr[k] := 0;
  end;

  randseed := 0;
  for cnt:=1 to NT do begin
    z.re := (portrand-0.5)*MaxArg;
    z.im := (portrand-0.5)*MaxArg;
    for k:=1 to NF do begin
      case k of
         1: begin cln(z,u);       cexp(u,w);   end;
         2: begin csqrt(z,u);     csqr(u,w);   end;
         3: begin carccos(z,u);   ccos(u,w);   end;
         4: begin carccosh(z,u);  ccosh(u,w);  end;
         5: begin carccot(z,u);   ccot(u,w);   end;
         6: begin carccoth(z,u);  ccoth(u,w);  end;
         7: begin carccsc(z,u);   ccsc(u,w);   end;
         8: begin carccsch(z,u);  ccsch(u,w);  end;
         9: begin carcsec(z,u);   csec(u,w);   end;
        10: begin carcsech(z,u);  csech(u,w);  end;
        11: begin carcsin(z,u);   csin(u,w);   end;
        12: begin carcsinh(z,u);  csinh(u,w);  end;
        13: begin carctan(z,u);   ctan(u,w);   end;
        14: begin carctanh(z,u);  ctanh(u,w);  end;
        15: begin carccotc(z,u);  ccot(u,w);   end;
        16: begin carccothc(z,u); ccoth(u,w);  end;
        17: begin
              n := integer(random(20))-10;
              if n=0 then n := 10;
              cnroot(z,n,u);
              cpowi(u,n,w);
            end;
      end;
      rr := error(w.re,z.re);
      ri := error(w.im,z.im);
      mr[k] := maxx(mr[k],rr);
      mi[k] := maxx(mi[k],ri);
    end;
  end;

  cnt := 0;
  for k:=1 to NF do begin
    case k of
       1: s := 'exp(ln(z))';
       2: s := 'sqr(sqrt(z))';
       3: s := 'cos(arccos(z))';
       4: s := 'cosh(arccosh(z))';
       5: s := 'cot(arccot(z))';
       6: s := 'coth(arccoth(z))';
       7: s := 'csc(arccsc(z))';
       8: s := 'csch(arccsch(z))';
       9: s := 'sec(arcsec(z))';
      10: s := 'sech(arcsech(z))';
      11: s := 'sin(arcsin(z))';
      12: s := 'sinh(arcsinh(z))';
      13: s := 'tan(arctan(z))';
      14: s := 'tanh(arctanh(z))';
      15: s := 'cot(arccotc(z))';
      16: s := 'coth(arccothc(z))';
      17: s := 'powi(nroot(z))';
    end;
    write(s:20, mr[k]:10:2, mi[k]:10:2);
    if (mr[k]>MaxErr) or (mi[k]>MaxErr) then begin
      inc(cnt);
      writeln(' failed!');
    end
    else writeln;
  end;
  if cnt=0 then writeln('Passed.')
  else writeln('Failed for ',cnt, ' of ',NF);
  writeln;
end;


{---------------------------------------------------------------------------}
procedure test_branches;
begin
  writeln('Test branch cuts');
  write(' . ');
  chkres_err := 5*eps_x;
  test_arc_sin_cos_tanh;
  writeln;
  write(' . ');
  test_arc_tan_cotc_sinh;
  writeln;
  write(' . ');
  test_arc_sec_csc;
  test_arc_cot_csch;
  writeln;
  write(' . ');
  test_arccosh;
  test_arcsech;
  test_arccoth;
  test_arccothc;
  writeln;
  write(' . ');
  chkres_err := 16*eps_x;
  test_misc_branches;
  writeln;
  if fail=0 then writeln('Passed.')
  else writeln('Failed: ', fail);

  fail := 0;
  chkres_err := 5*eps_x;
  writeln('Test near branch points');
  write(' . ');
  test_branch_series;
  writeln;
  write(' o ');
  test_near_branch_points;
  writeln;
  if fail=0 then writeln('Passed.')
  else writeln('Failed: ', fail);
  writeln;
end;


{---------------------------------------------------------------------------}
procedure misc_tests;
  {-Simple test of miscellaneous remaining functions}
var
  st_cnt, st_fail: integer;
  eps: extended;

  procedure singletest(n: integer; const a: complex; x,y: extended);
    {-Return abs((a-b)/b), b=x+iy, special if b=0, or a-b=0}
  var
    b,c: complex;
    r: extended;
  begin
    inc(st_cnt);
    cset(b,x,y);
    csub(a,b,c);
    if (c.re=0.0) and (c.im=0.0) then r := 0.0
    else begin
      if (b.re<>0.0) or (b.im<>0.0) then cdiv(c,b,c);
      r := cabs(c);
    end;
    if r > eps then begin
      writeln('  Test ',n, ' failed: rel. error = ', r:20);
      inc(st_fail);
    end;
  end;

var
  a,b: complex;

begin
  st_cnt := 0;
  st_fail := 0;
  eps := 5*eps_x;

  writeln('Miscellaneous function test');

  cset(a,1,-2);
  cnroot(a,-4,b);
  singletest(1, b, 0.7866399385939558088, 0.2234679216024516087);

  cnroot1(1,a);
  singletest(2, a, 1, 0);

  cnroot1(-1,a);
  singletest(3, a, 1, 0);

  cnroot1(2,a);
  singletest(4, a, -1, 0);

  cnroot1(-2,a);
  singletest(5, a, -1, 0);

  cnroot1(4,a);
  singletest(6, a, 0, 1);

  cnroot1(-4,a);
  singletest(7, a, 0, -1);

  cnroot1(3,a);
  singletest(8, a, -0.5, +0.8660254037844386468);

  cnroot1(-3,a);
  singletest(9, a, -0.5, -0.8660254037844386468);

  cnroot1(5,a);
  singletest(10, a, 0.3090169943749474241, +0.9510565162951535721);

  cnroot1(-5,a);
  singletest(11, a, 0.3090169943749474241, -0.9510565162951535721);

  ccis(0.0,a);
  singletest(12, a, 1, 0);

  ccis(-0.5,a);
  singletest(13, a, 0.8775825618903727161, -0.4794255386042030003);

  ccis(1,a);
  singletest(14, a, 0.5403023058681397174,  0.8414709848078965067);

  ccis(-7,a);
  singletest(15, a, 0.7539022543433046381, -0.6569865987187890904);

  z.re := -2;
  z.im := 0;
  csurd(z,-3,w);
  u.re := -0.7937005259840997374;
  u.im :=  0.0;
  singletest(16, w,u.re, u.im);

  z.re := 2;
  z.im := 0;
  csurd(z,-3,w);
  u.re := 0.7937005259840997374;
  u.im := 0.0;
  singletest(17, w,u.re, u.im);

  z.re := 0;
  z.im := 8;
  csurd(z,-3,w);
  u.re :=  0;
  u.im :=  0.5;
  singletest(18, w,u.re, u.im);

  z.re := 0;
  z.im := -1;
  csurd(z,-11,w);
  u.re :=  0;
  u.im :=  -1;
  singletest(19, w,u.re, u.im);

  z.re := -4;
  z.im := 1;
  csurd(z,3,w);
  u.re := -1.598178223935887802;
  u.im :=  0.1307973822190896025;
  singletest(20, w,u.re, u.im);

  z.re := -4;
  z.im := 1;
  csurd(z,-3,w);
  u.re := -0.6215492810053379218;
  u.im := -0.5086855624615043438e-1;
  singletest(21, w,u.re, u.im);

  z.re := -1;
  z.im := 1;
  csurd(z,10,w);
  u.re := -0.5409244368078858570;
  u.im :=  0.8827084548141388820;
  singletest(22, w,u.re, u.im);
  cnroot(z,10,w);
  u.re := 1.006660471586146974;
  u.im := 0.2416777968334065769;
  singletest(23, w,u.re, u.im);

  z.re := -1;
  z.im := 1;
  csurd(z,-10,w);
  u.re := -0.6273254636314632701;
  u.im :=  0.7345037469042462754;
  singletest(24, w,u.re, u.im);
  cnroot(z,-10,w);
  u.re :=  0.9392474312658760314;
  u.im := -0.2254933577674981007;
  singletest(25, w,u.re, u.im);

  z.re := -2;
  z.im := 0;
  cagm1(z,w);
  u.re := -0.4229662084088016874;
  u.im := +0.6612661834618047645; {Alpha! Maple is < 0}
  singletest(26, w,u.re, u.im);

  z.re := -0.5;
  z.im := 0;
  cagm1(z,w);
  u.re := 0.2114831042044008437;
  u.im := 0.3306330917309023822;
  singletest(27, w,u.re, u.im);

  z.re := -2;
  z.im := 0;
  u.re := -1;
  u.im := 0;
  cagm(z,u,w);
  u.re := -1.456791031046906869;
  u.im := 0;
  singletest(28, w,u.re, u.im);

  z.re := 0.1;
  z.im := 1e-3;
  cagm1(z,w);
  u.re := 0.4250434525165737508;
  u.im := 0.0011373632973048872;
  singletest(29, w,u.re, u.im);

  z.re := 1;
  z.im := 1;
  cagm1(z,w);
  u.re := 1.049160528732780221;
  u.im := 4.781557460881612293e-1;
  singletest(30, w,u.re, u.im);

  z.re := -1;
  z.im := 1;
  cagm1(z,w);
  u.re := 0.1884110679886800206;
  u.im := 0.7780040787889582801;
  singletest(31, w,u.re, u.im);

  z.re := -1;
  z.im := -1;
  cagm1(z,w);
  u.re :=  0.1884110679886800206;
  u.im := -0.7780040787889582801;
  singletest(32, w,u.re, u.im);

  z.re := 1;
  z.im := 1e2500;
  cagm1(z,w);
  u.re := 0.7442505685951236623e2493;
  u.im := 0.2728095513731571636e2497;
  singletest(33, w,u.re, u.im);

  z.re := 1e-2500;
  z.im := 1e4800;
  cagm1(z,w);
  u.re := 0.2019374898737361107e4793;
  u.im := 0.1421047099134511900e4797;
  singletest(34, w,u.re, u.im);

  z.re := -1e4790;
  z.im := -1e4800;
  cagm1(z,w);
  u.re :=  0.2019373477818819366e4793;
  u.im := -0.1421047099134532090e4797;
  singletest(35, w,u.re, u.im);

  z.re := -1e-4790;
  z.im := -1e-4800;
  cagm1(z,w);
  u.re :=  0.1424013334950476484e-3;
  u.im := -0.4055628285066876934e-7;
  singletest(36, w,u.re, u.im);

  z.re := 1e3000;
  z.im := 0;
  u.im := 1e-3000;
  u.re := 0;
  cagm(z,u,w);
  u.re := 0.1136866203230388257e2997;
  u.im := 0.1292464780752130551e2993;
  singletest(37, w,u.re, u.im);

  z.re := 1e3000;
  z.im := 0;
  u.re := -1e-3000;
  u.im := 0;
  cagm(z,u,w);
  u.re := 0.1136866159149604124e2997;
  u.im := 0.2584929461276352419e2993;
  singletest(38, w,u.re, u.im);

  z.re := 1e3000;
  z.im := 0;
  u.re := 1e-3000;
  u.im := 0;
  cagm(z,u,w);
  u.re := 0.11368662179239837283e2997;
  u.im := 0;
  singletest(39, w,u.re, u.im);

  z.re := -1e-12;
  z.im := 1e-30;
  cln1p(z,w);
  u.re := -0.10000000000005e-11;
  u.im :=  0.1000000000001e-29;
  singletest(40, w,u.re, u.im);

  z.re := 1e-8;
  z.im := -1e-6;
  cln1p(z,w);
  u.re :=  0.1000049994999000008e-7;
  u.im := -0.1999999979999333533e-5*0.5;
  singletest(41, w,u.re, u.im);

  z.re := 1e-8;
  z.im := 1e-4;
  cln1p(z,w);
  u.re := 0.1499999982500000300e-7;
  u.im := 0.1999999973333333773e-3*0.5;
  singletest(42, w,u.re, u.im);

  z.re := -1e-6;
  z.im := 1e-3;
  cln1p(z,w);
  u.re := -0.4999997499996666665e-6;
  u.im :=  0.1000000666666866667e-2;
  singletest(43, w,u.re, u.im);

  {Test cases with 'separate' large errors for w.re}
  z.re := -0.5e-10;
  z.im := 1e-5;
  cln1p(z,w);
  u.re := 0.125e-20;
  {Complete relative error ~ 3.38e-19}
  u.im := 0.1000000000016666667e-4;
  singletest(44, w,u.re, u.im);    {relerr(w.re) ~ 1.44e-9}

  z.re := -0.5e-14;
  z.im := 1e-7;
  cln1p(z,w);
  u.re := 0.125e-28;
  u.im := 0.1000000000000001667e-6;
  singletest(45, w,u.re, u.im);    {relerr(w.re) ~ 6.61e-5}

  z.re := 1e-11;
  z.im := 1e-7;
  cexpm1(z,w);
  u.re := 0.9995000000049950004e-11;
  u.im := 0.1000000000009998333e-6;
  singletest(46, w,u.re, u.im);

  z.re := -1e-11;
  z.im := 1e-7;
  cexpm1(z,w);
  u.re := -0.1000499999994995e-10;
  u.im :=  0.9999999999899983333e-7;
  singletest(47, w,u.re, u.im);

  z.re := 1e-11;
  z.im := 0.125;
  cexpm1(z,w);
  u.re := -0.7802332760748970179e-2;
  u.im := +0.1246747333864744373;
  singletest(48, w,u.re, u.im);

  z.re := -0.125;
  z.im := 1e-11;
  cexpm1(z,w);
  u.re := -0.1175030974154045971;
  u.im := +0.8824969025845954029e-11;
  singletest(49, w,u.re, u.im);

  z.re := 0.125;
  z.im := 0.125;
  cexpm1(z,w);
  u.re := 0.1243072517574279285;
  u.im := 0.1412749812719897632;
  singletest(50, w,u.re, u.im);

  z.re := -0.5;
  z.im := +0.5;
  cexpm1(z,w);
  u.re := -0.4677192697843292852;
  u.im := +0.2907862882126918489;
  singletest(51, w,u.re, u.im);

  z.re := eps_x;
  z.im := -eps_x;
  cexpm1(z,w);
  u.re :=  0.1084202172485504434e-18;
  u.im := -0.1084202172485504434e-18;
  singletest(52, w,u.re, u.im);

  z.re := 0.5;
  z.im := 1;
  cexpm1(z,w);
  u.re := -0.1091920957068713804;
  u.im := +1.387351111329763356;
  singletest(53, w,u.re, u.im);

  {Note that the following cexpm1 test cases would fail the 5*eps_x test,}
  {if the real parts were compared separately, i.e. |1 - w.re/u.re| > eps}
  z.re := 0.005;
  z.im := 0.1;
  cexpm1(z,w);
  u.re := -0.8355588327186480356e-5;
  u.im := +0.1003338337302356558;
  singletest(54, w,u.re, u.im);

  z.re := 0.5e-4;
  z.im := 1e-2;
  cexpm1(z,w);
  u.re := -0.8333555558829398590e-9;
  u.im :=  0.1000033333833337302e-1;
  singletest(55, w,u.re, u.im);        {relerr(w.re) ~ 3.95e-15}

  z.re := 0.5e-10;
  z.im := 1e-5;
  cexpm1(z,w);
  u.re := -0.8333333333555555556e-21;
  u.im := +0.1000000000033333333e-4;
  singletest(56, w,u.re, u.im);        {relerr(w.re) ~ 2.07e-10}

  z.re := 0.5e-14;
  z.im := 1e-7;
  cexpm1(z,w);
  {Note: w.re = -0.833426924134132443e-29, but total rel err ~ 5.17e-19}
  u.re := -0.8333333333333355556e-29;
  u.im :=  0.1000000000000003333e-6;
  singletest(57, w,u.re, u.im);        {relerr(w.re) ~ 1.12e-4}

  if st_fail=0 then writeln('All ',st_cnt, ' tests passed.')
  else writeln('Failed tests: ', st_fail, ' of ',st_cnt);
  writeln;
end;


{---------------------------------------------------------------------------}
procedure test2(k,n: integer);
  {-test |u-w|/|u| against n*eps_x}
var
  v: complex;
  eps: extended;
begin
  inc(numtest);
  eps := n*eps_x;
  if u.re=0 then v.re := w.re-u.re else v.re := 1.0-w.re/u.re;
  if u.im=0 then v.im := w.im-u.im else v.im := 1.0-w.im/u.im;
  if (abs(v.re) > eps) or (abs(v.im) > eps) then begin
    writeln(k:6,v.re:29, v.im:29, maxx(abs(v.re), abs(v.im))/eps_x:14:2);
    inc(fail);
  end;
end;


{---------------------------------------------------------------------------}
procedure test2r(k: integer; eps: extended);
  {-test |u-w|/|u| against eps}
var
  v: complex;
begin
  inc(numtest);
  if u.re=0 then v.re := w.re-u.re else v.re := 1.0-w.re/u.re;
  if u.im=0 then v.im := w.im-u.im else v.im := 1.0-w.im/u.im;
  if (abs(v.re) > eps) or (abs(v.im) > eps) then begin
    writeln(k:6,v.re:29, v.im:29, maxx(abs(v.re), abs(v.im)):14);
    inc(fail);
  end;
end;


{---------------------------------------------------------------------------}
procedure test2a(k,n: integer);
  {-test |u-w| against n*eps_x}
var
  v: complex;
  eps: extended;
begin
  inc(numtest);
  eps := n*eps_x;
  v.re := w.re-u.re;
  v.im := w.im-u.im;
  if (abs(v.re) > eps) or (abs(v.im) > eps) then begin
    writeln(k:6,v.re:29, v.im:29, maxx(abs(v.re), abs(v.im))/eps_x:14:2);
    inc(fail);
  end;
end;


{---------------------------------------------------------------------------}
procedure test_lngamma;
{$ifdef FPC}
const
  NE = 9;
  NE1 = 18;
{$else}
const
  NE = 8;
  NE1 = 16;
{$endif}
  procedure test1(k: integer);
    {-test |u-w|/|u| against NE*eps}
  begin
    test2(k,NE);
  end;

begin
  writeln('Test lngamma');
  numtest := 0;
  fail := 0;

  z.re := 1e-100;
  z.im := 0;
  clngamma(z,w);
  u.re := 230.2585092994045684;
  u.im := 0;
  test1(1);

  z.re := -1e-100;
  z.im := 0;
  clngamma(z,w);
  u.re :=  230.2585092994045684;
  u.im := -3.141592653589793238;
  test1(2);

  z.re := 1.25;
  z.im := 0;
  {Power series}
  clngamma(z,w);
  u.re := -0.9827183642181316146e-1;
  u.im := 0;
  test1(3);

  z.re := 0.5;
  z.im := 0;
  {Recursion + Lanczos}
  clngamma(z,w);
  u.re := 0.5723649429247000871;
  u.im := 0;
  test1(4);

  z.re := -0.5;
  z.im := 0;
  {Reflection + recursion + Lanczos}
  clngamma(z,w);
  u.re :=  1.265512123484645396;
  u.im := -3.141592653589793238;
  test1(5);

  z.re := -0.5;
  z.im := 1;
  {Reflection + Lanczos}
  clngamma(z,w);
  u.re := -0.7643624198614777932;
  u.im := -2.989451660138271845;
  test1(6);

  z.re := 0.875;
  z.im := 0;
  {Power series}
  clngamma(z,w);
  u.re := 0.8585870722533432350e-1;
  u.im := 0;
  test1(7);

  z.re := -1.5;
  z.im := 0;
  {Reflection + Lanczos}
  clngamma(z,w);
  u.re := 0.8600470153764810145;
  u.im := -6.283185307179586477;
  test1(8);

  z.re := -1.5;
  z.im := 1e-10;
  clngamma(z,w);
  u.re := 0.8600470153764810145;
  u.im := -6.283185307109270813;
  test1(9);

  z.re := -1.5;
  z.im := -1e-10;
  clngamma(z,w);
  u.re := 0.8600470153764810145;
  u.im := 6.283185307109270813;
  test1(10);

  z.re := 0.75;
  z.im := 0.5;
  clngamma(z,w);
  u.re := -0.7410253140811996090e-1;
  u.im := -0.4529718950149241177;
  test1(11);

  z.re := 1;
  z.im := 0.1;
  clngamma(z,w);
  u.re := -0.8197780565405955933e-2;
  u.im := -0.5732294041671971735e-1;
  test1(12);

  z.re := 1;
  z.im := 0.5;
  clngamma(z,w);
  u.re := -0.1909454991867793643;
  u.im := -0.2440582989054277627;
  test1(13);

  z.re := 1;
  z.im := 0.25;
  clngamma(z,w);
  u.re := -0.5038680472200623928e-1;
  u.im := -0.1382373401412416032;
  test1(14);

  z.re := 1;
  z.im := 0.125;
  clngamma(z,w);
  u.re := -0.1278562704993734509e-1;
  u.im := -0.7137563001849706264e-1;
  test1(15);

  z.re := 0;
  z.im := 1e-100;
  clngamma(z,w);
  u.re :=  230.2585092994045684;
  u.im := -1.570796326794896619;
  test1(16);

  z.re := 1;
  z.im := 1e-100;
  clngamma(z,w);
  u.re := -0.8224670334241132182e-200;
  u.im := -0.5772156649015328606e-100;
  test1(17);

  z.re := 1;
  z.im := 1e-9;
  clngamma(z,w);
  u.re := -0.8224670334241132180e-18;
  u.im := -0.5772156649015328602e-9;
  test1(18);

  z.re := 1;
  z.im := 1e-5;
  clngamma(z,w);
  u.re := -0.8224670333970551374e-10;
  u.im := -0.5772156648614642972e-5;
  test1(19);

  z.re := 1;
  z.im := 3.5;
  clngamma(z,w);
  u.re := -3.952467126189068005;
  u.im :=  1.646192624268876207;
  test2(20,NE1);

  z.re := 1;
  z.im := 7;
  clngamma(z,w);
  u.re := -9.103680679831946940;
  u.im :=  7.394856298436270610;
  test2(21,NE1);

  z.re := 0;
  z.im := -7;
  clngamma(z,w);
  u.re := -11.04959082888726025;
  u.im := -5.824059971641373991;
  test2(22,NE1);

  z.re := 0.25;
  z.im := -1.0;
  clngamma(z,w);
  u.re := -0.6423663036589741786;
  u.im := 1.381181032966732516;
  test2(23,NE1);

  z.re := 0.25;
  z.im := -1e-100;
  clngamma(z,w);
  u.re := 1.288022524698077457;
  u.im := 0.4227453533376265408e-99;
  test1(24);

  z.re := -1;
  z.im := 1e-10;
  clngamma(z,w);
  u.re :=  23.02585092994045684;
  u.im := -4.712388980342411424;
  test1(25);

  z.re := -1;
  z.im := 120;
  clngamma(z,w);
  u.re := -194.7578930173726359;
  u.im := +452.1337870571610518;
  test1(26);

  z.re := -100;
  z.im := 10;
  clngamma(z,w);
  u.re := -392.8207343748496356;
  u.im := -269.6119911037104157;
  test1(27);

  z.re := -1.25;
  z.im := 3600;
  clngamma(z,w);
  u.re := -5668.278043959496223;
  u.im :=  25876.53154065409978;
  test1(28);

  z.re := -1000;
  z.im := 3600;
  clngamma(z,w);
  u.re := -13859.32275942924851;
  u.im :=  24170.40790932544573;
  test1(29);

  z.re := -10000;
  z.im := 3600;
  clngamma(z,w);
  u.re := -92782.17182630208753;
  u.im :=  1814.811045803448471;
  test2(30,NE1);

  d := ldexp(1,-30);
  z.re := -1+d;
  z.im := 0;
  clngamma(z,w);
  u.re :=  20.79441541719210788;
  u.im := -3.141592653589793238;
  test1(31);

  d := ldexp(1,-30);
  z.re := -1+d;
  z.im := d;
  clngamma(z,w);
  u.re :=  20.44784182691213522;
  u.im := -3.926990816593492950;
  test1(32);

  z.re := -2.5;
  z.im := 0;
  clngamma(z,w);
  u.re := -0.5624371649767405067e-1;
  u.im := -9.424777960769379715;
  test2(33,NE1);

  z.re := -18;
  z.im := 100;
  clngamma(z,w);
  u.re := -241.4607289510316850;
  u.im := +329.7560694559841089;
  test1(34);

  z.re := -4;
  z.im := 1;
  clngamma(z,w);
  u.re := -4.370114964324010063;
  u.im := -12.62303227169984200;
  test1(35);

  z.re := -5.5;
  z.im := 0;
  clngamma(z,w);
  u.re := -4.517832174007741354;
  u.im := -18.84955592153875943;
  test1(36);

  z.re := 1.5;
  z.im := 4.0;
  clngamma(z,w);
  u.re := -3.970200319593121268;
  u.im :=  3.002074211507645501;
  test2(37,NE1);

  z.re := 0.5;
  z.im := 1.0;
  clngamma(z,w);
  u.re := -0.6527906442043729153;
  u.im := -0.9550077243425691096;
  test1(38);

  z.re := 0.5;
  z.im := 100;
  clngamma(z,w);
  u.re := -156.1606941462849892;
  u.im :=  360.5174352679064359;
  test1(39);

  z.re := -0.5;
  z.im := -1;
  clngamma(z,w);
  u.re := -0.7643624198614777932;
  u.im :=  2.989451660138271845;
  test1(40);

  z.re := 1.5;
  z.im := -1;
  clngamma(z,w);
  u.re := -0.5412188685472680374;
  u.im := -0.1521409934515213935;
  test2(41,NE1);

  z.re := -0.5;
  z.im := 100;
  clngamma(z,w);
  u.re := -160.7658768321168332;
  u.im :=  358.9416389827775810;
  test1(42);

  z.re := -1.5;
  z.im := 100;
  clngamma(z,w);
  u.re := -165.3711595054505726;
  u.im :=  357.3558437808308338;
  test1(43);

  z.re := -2.5;
  z.im := 100;
  clngamma(z,w);
  u.re := -169.9766420938230850;
  u.im :=  355.7600526604170170;
  test1(44);

  z.re := -3.5;
  z.im := 100;
  clngamma(z,w);
  u.re := -174.5824244049610228;
  u.im :=  354.1542706147935946;
  test1(45);

  z.re := -1e300;
  z.im := 0.5;
  clngamma(z,w);
  u.re := -0.6897755278982137052e303;
  u.im := -0.3141592653589793238e301;
  test1(46);

  z.re := 0;
  z.im := 1e300;
  clngamma(z,w);
  u.re := -0.1570796326794896619e301;
  u.im := +0.6897755278982137052e303;
  test1(47);

  z.re := -1e4000;
  z.im := 0.5;
  clngamma(z,w);
  u.re := -0.9209340371976182736e4004;
  u.im := -0.3141592653589793238e4001;
  test1(48);

  z.re := 0;
  z.im := 1e4000;
  clngamma(z,w);
  u.re := -0.1570796326794896619e4001;
  u.im :=  0.9209340371976182736e4004;
  test1(49);

  z.re := 3;
  z.im := 1e-10;
  clngamma(z,w);
  u.re := 0.6931471805599453094;
  u.im := 0.9227843350984671394e-10;
  test1(50);

  z.re := 0.0;
  z.im := 1e-10;
  clngamma(z,w);
  u.re :=  23.02585092994045684;
  u.im := -1.570796326852618186;
  test1(51);

  z.re := -0.25;
  z.im := 0.75;
  clngamma(z,w);
  u.re := -0.1136308716138283871;
  u.im := -2.455775210170196224;
  test1(52);

  z.re := 2.0;
  z.im := 1e-10;
  clngamma(z,w);
  u.re := -0.3224670334241132182e-20;
  u.im := +0.4227843350984671394e-10;
  test1(53);

  z.re := 2.25;
  z.im := 0.75;
  clngamma(z,w);
  u.re := -0.2784099911175068660e-1;
  u.im := +0.4498218296764783266;
  test1(54);

  z.re := 1.25;
  z.im := 0.75;
  clngamma(z,w);
  u.re := -0.4047269002999407626;
  u.im := -0.9059767059410582882e-1;
  test1(55);

  if fail=0 then writeln('All ',numtest, ' tests passed.')
  else writeln('Failed for ',fail, ' of ',numtest);
  writeln;

end;


{---------------------------------------------------------------------------}
procedure test_gamma;
const
  NE = 10;
  NE0 = 20;
  NE1 = 100;
  NE2 = 540;  {AMD, Intel 500}
begin
  writeln('Test gamma');
  numtest := 0;
  fail := 0;

  {10eps}
  z.re := 1.0;
  z.im := 1.0;
  cgamma(z,w);
  u.re :=  0.4980156681183560427;
  u.im := -0.1549498283018106851;
  test2(1,NE);

  z.re := -1.0;
  z.im := 1.0;
  cgamma(z,w);
  u.re := -0.1715329199082726788;
  u.im :=  0.3264827482100833639;
  test2(2,NE);

  z.re := 0.75;
  z.im := 0.5;
  cgamma(z,w);
  u.re :=  0.8349299659737468482;
  u.im := -0.4063818800581324333;
  test2(3,NE);

  z.re := 1.25;
  z.im := 0.5;
  cgamma(z,w);
  u.re :=  0.7825440858496799699;
  u.im := -0.6906923659042179930e-1;
  test2(4,NE);

  z.re := 0.75;
  z.im := -1.25;
  cgamma(z,w);
  u.re := 0.3113990908610612819;
  u.im := 0.1996628704155690747;
  test2(5,NE0);

  z.re := 0;
  z.im := 0.5;
  cgamma(z,w);
  u.re := -0.3992794763291927125;
  u.im := -1.603388194139434445;
  test2(6,NE);

  z.re := 0.0;
  z.im := -1;
  cgamma(z,w);
  u.re := -0.1549498283018106851;
  u.im := +0.4980156681183560427;
  test2(7,NE0);

  z.re := 3.5;
  z.im := 5;
  cgamma(z,w);
  u.re := 0.11529822818307598204;
  u.im := 0.84060905844712868998e-1;
  test2(8,NE1);

  z.re := -3.5;
  z.im := 0;
  cgamma(z,w);
  u.re := 0.27008820585226910892;
  u.im := 0;
  test2(9,NE1);

  z.re := 0.0;
  z.im := -3.0;
  cgamma(z,w);
  u.re := 0.1129867018106983219e-1;
  u.im := 0.6430919654672202004e-2;
  test2(10,NE1);

  z.re := -5.0;
  z.im := 2.0;
  cgamma(z,w);
  u.re :=  0.4291285735146767906e-4;
  u.im := -0.1327050288886505571e-3;
  test2(11,NE1);

  z.re := -5.125;
  z.im := 0.015625;
  cgamma(z,w);
  u.re := 0.5417363347507066007e-1;
  u.im := 0.7903603665855718018e-2;
  test2(12,NE1);

  z.re := 10;
  z.im := -7;
  cgamma(z,w);
  u.re := -27545.58157793888591;
  u.im :=  19000.31115042267416;
  test2(13,NE1);

  z.re := 20;
  z.im := 0;
  cgamma(z,w);
  u.re := 0.121645100408832000e18;
  u.im := 0;
  test2(14,NE1);

  z.re := 20;
  z.im := 1;
  cgamma(z,w);
  u.re := -0.1168457785301653562e18;
  u.im :=  0.2013328373223809056e17;
  test2(15,NE1);

  z.re := -20;
  z.im := 1;
  cgamma(z,w);
  u.re := 0.1379212013935227881e-19;
  u.im := 0.1137384115495041332e-18;
  test2(16,NE1);

  z.re := 80;
  z.im := 20;
  cgamma(z,w);
  u.re :=  0.7202083564562651223e116;
  u.im := -0.1779706457088457513e116;
  test2(17,NE2);

  z.re := 125;
  z.im := 0;
  cgamma(z,w);
  u.re := 0.1506141741511140880e208;
  u.im := 0;
  test2(18,NE2);

  z.re := 10;
  z.im := -10;
  cgamma(z,w);
  u.re := 1423.851941789183074;
  u.im := 3496.081973307944589;
  test2(19,NE2);

  z.re := 0;
  z.im := 16;
  cgamma(z,w);
  u.re := -0.5811632781784915725e-11;
  u.im := +0.4930160033768149296e-11;
  test2(20,NE2);

  z.re := 10;
  z.im := 25;
  cgamma(z,w);
  u.re :=  0.4645993867695768817e-3;
  u.im := -0.2436568090351513820e-3;
  test2(21,NE2);

  if fail=0 then writeln('All ',numtest, ' tests passed.')
  else writeln('Failed for ',fail, ' of ',numtest);
  writeln;

end;


{---------------------------------------------------------------------------}
procedure test_psi;
const
  NE = 4;
  NE1 = 6;
  NEA = 4;

  procedure test1(k: integer);
    {-test |u-w|/|u| against NE*eps}
  begin
    test2(k,NE);
  end;

begin
  writeln('Test psi');
  numtest := 0;
  fail := 0;

  d := ldexp(1,-30);

  z.re := -10-d;
  z.im := d;
  cpsi(z,w);
  u.re := 536870914.3517525861;
  u.im := 536870912.0000000030;
  test1(1);

  z.re := -10+d;
  z.im := d;
  cpsi(z,w);
  u.re := -536870909.6482474080;
  u.im := +536870912.0000000030;
  test1(2);

  z.re := 11.00000001;
  z.im := -1e-8;
  cpsi(z,w);
  u.re :=  2.351752590018384464;
  u.im := -0.9516633559118739647e-9;
  test2(3,NE1);

  z.re := 1e10;
  z.im := 1;
  cpsi(z,w);
  u.re := 23.02585092989045684;
  u.im := 0.1000000000050000000e-9;
  test1(4);

  z.re := -10;
  z.im := 1e-10;
  cpsi(z,w);
  u.re := 2.351752589066721108;
  u.im := 10000000000.00000000;
  test1(5);

  z.re := -10;
  z.im := 1e-5;
  cpsi(z,w);
  u.re := 2.351752589067173599;
  u.im := 100000.0000319470180;
  test1(6);

  z.re := -10;
  z.im := -1;
  cpsi(z,w);
  u.re :=  2.356257214367387967;
  u.im := -3.058466869803756166;
  test1(7);

  z.re := 0;
  z.im := -1;
  cpsi(z,w);
  u.re :=  0.189300641244953955*0.5;
  u.im := -2.076674047468581174;
  test2a(8,NEA);

  z.re := 12;
  z.im := 0;
  cpsi(z,w);
  u.re := 2.442661679975812017;
  u.im := 0;
  test1(9);

  z.re := 12;
  z.im := 1;
  cpsi(z,w);
  u.re := 2.446421148793617475;
  u.im := 0.866845038219307720495e-1;
  test1(10);

  z.re := 12;
  z.im := -1e10;
  cpsi(z,w);
  u.re :=  23.02585092994045684;
  u.im := -1.570796325644896619;
  test1(11);

  z.re := 13;
  z.im := 1;
  cpsi(z,w);
  u.re := 2.529179769483272648;
  u.im := 0.7978795209779284102e-1;
  test1(12);

  z.re := -1;
  z.im := 0.5;
  cpsi(z,w);
  u.re := 0.4711136427705406497;
  u.im := 3.112688574959647756;
  test1(13);

  z.re := -1;
  z.im := 50;
  cpsi(z,w);
  u.re := 3.912456180159041211;
  u.im := 1.600788329993617131;
  test1(14);

  {near positive real zero of psi}
  z.re := 1.4616241455078125;
  z.im := 0;
  cpsi(z,w);
  u.re := -0.774088428578824791e-5;
  u.im := 0;
  test2a(15,NEA);

  z.re := 1.4616241455078125 + 7.999460549841262660e-6;
  z.im := 0;
  cpsi(z,w);
  u.re := 0.44287869692570149446e-24;
  u.im := 0;
  test2a(16,NEA);

  z.re := 1.4616241455078125 + 7.999460549841262660e-6;
  z.im := -d;
  cpsi(z,w);
  u.re :=  0.3840362746455585860e-18;
  u.im := -0.9012150070142198077e-9;
  test2a(17,NEA);

  z.re := 1e3000;
  z.im := 1e2600;
  cpsi(z,w);
  u.re := 6907.75527898213705;
  u.im := 0.1e-399;
  test1(18);

  if fail=0 then writeln('All ',numtest, ' tests passed.')
  else writeln('Failed for ',fail, ' of ',numtest);
  writeln;
end;


{---------------------------------------------------------------------------}
procedure test_dilog;
const
  NE = 4;

  procedure test1(k: integer);
    {-test |u-w|/|u| against NE*eps}
  begin
    test2(k,NE);
  end;

begin
  writeln('Test dilog');
  numtest := 0;
  fail := 0;

  z.re := 0.25;
  z.im := 0;
  cdilog(z,w);
  u.re := 0.2676526390827326069;
  u.im := 0.0;
  test1(1);

  z.re := 0.75;
  z.im := 0;
  cdilog(z,w);
  u.re := 1.956938785860612207*0.5;
  u.im := 0;
  test1(2);

  z.re := 0.75;
  z.im := 1;
  cdilog(z,w);
  u.re := 0.4134811815712257482;
  u.im := 1.280110212455068520;
  test1(3);

  z.re := 1;
  z.im := 1e-10;
  cdilog(z,w);
  u.re := 1.644934066691146804;
  u.im := 0.2402585093001899666e-8;
  test1(4);

  z.re := 1.5;
  z.im := 0;
  cdilog(z,w);
  u.re :=  2.374395270272480201;
  u.im := -1.273806204919600531;
  test1(5);

  z.re := 0.25;
  z.im := -0.25;
  cdilog(z,w);
  u.re :=  0.2454094040383964320;
  u.im := -0.2845028670488036955;
  test1(6);

  z.re := 0;
  z.im := 0.5;
  cdilog(z,w);
  u.re := -0.5897507442156586346e-1;
  u.im := +0.4872223582945223571;
  test1(7);

  z.re := 2;
  z.im := 1;
  cdilog(z,w);
  u.re := 1.186688537000057831;
  u.im := 2.407740769345772002;
  test1(8);

  z.re := 2;
  z.im := -1;
  cdilog(z,w);
  u.re :=  1.186688537000057831;
  u.im := -2.407740769345772002;
  test1(9);

  z.re := 4;
  z.im := 0;
  cdilog(z,w);
  u.re :=  2.061309466777317417;
  u.im := -4.355172180607204261;
  test1(10);

  z.re := 1.5;
  z.im := 1e-7;
  cdilog(z,w);
  u.re := 2.374395060832978168;
  u.im := 1.273806251129419550;
  test1(11);

  z.re := 1.75;
  z.im := 0;
  cdilog(z,w);
  u.re :=  2.448686765338204056;
  u.im := -1.7580848482107875575;
  test1(12);

  z.re := -0.75;
  z.im := 0;
  cdilog(z,w);
  u.re := -0.6427612688399788791;
  u.im := 0;
  test1(13);

  z.re := 1;
  z.im := 0;
  cdilog(z,w);
  u.re := 1.644934066848226436; {Pi^2/6}
  u.im := 0;
  test1(14);

  z.re := -1;
  z.im := 0;
  cdilog(z,w);
  u.re := -0.8224670334241132182; {-Pi^2/12}
  u.im := 0;
  test1(15);

  z.re := predx(1);
  z.im := 0;
  cdilog(z,w);
  {li2(1-0.5^64)}
  u.re := 1.644934066848226434;
  u.im := 0;
  test1(16);

  z.re := succx(1);
  z.im := 0;
  cdilog(z,w);
  {li2(1+0.5^63)}
  u.re :=  1.644934066848226441;
  u.im := -0.3406121580086554589e-18;
  test1(17);

  z.re := 1e-300;
  z.im := -1e-200;
  cdilog(z,w);
  u.re := z.re;
  u.im := z.im;
  test1(18);

  z.re := 1e300;
  z.im := 1e200;
  cdilog(z,w);
  u.re := -238582.1251033942141;  {MPMath}
  u.im :=  2170.135323724639444;
  test1(19);

  z.re := 1e4000;
  z.im := 1e3000;
  cdilog(z,w);
  u.re := -42415181.59395905039;  {Pari}
  u.im :=  28935.13764966185925;
  test1(20);

  if fail=0 then writeln('All ',numtest, ' tests passed.')
  else writeln('Failed for ',fail, ' of ',numtest);
  writeln;
end;


{---------------------------------------------------------------------------}
procedure test_ellkck;
const
  NE = 4;
  NE1 = 5;   {FPC AMD}

  procedure test1(k: integer);
    {-test |u-w|/|u| against NE*eps}
  begin
    test2(k,NE);
  end;

begin
  writeln('Test ellk/ellck');
  numtest := 0;
  fail := 0;

  {Maple: ElllipticCK(k)}
  z.re := 1e-100;
  z.im := 1e-250;
  cellck(z,w);
  u.re := 231.6448036605244590;
  u.im := -1e-150;
  test1(1);

  z.re := 1e100;
  z.im := 1e250;
  cellck(z,w);
  u.re :=  0.1570796326794896619e-249;
  u.im := -0.5770325676096313116e-247;
  test1(2);

  z.re := 1;
  z.im := -1e20;
  cellck(z,w);
  u.re := 0.15707963267948966197e-19;
  u.im := 0.47437996221000804299e-18;
  test1(3);

  z.re := 0;
  z.im := -1;
  cellck(z,w);
  u.re := 1.311028777146059905;
  u.im := 1.311028777146059905;
  test1(4);

  z.re := 1;
  z.im := 0;
  cellck(z,w);
  u.re := Pi_2;
  u.im := 0;
  test1(5);

  {Maple: ElllipticK(k)}
  z.re := 0.25;
  z.im := -1;
  cellk(z,w);
  u.re := 1.309053717584664880;
  u.im := -0.8992040177188418683e-1;
  test1(6);

  z.re := -0.25;
  z.im := 0;
  cellk(z,w);
  u.re := 1.596242222131783510;
  u.im := 0;
  test1(7);

  z.re := 0;
  z.im := 1;
  cellk(z,w);
  u.re := 1.311028777146059905;
  u.im := 0;
  test1(8);

  z.re := 1.25;
  z.im := 0;
  cellk(z,w);
  u.re :=  1.596242222131783510;
  u.im := -1.400603042332602023;
  test1(9);

  z.re := 1.25;
  z.im := 1e-12;
  cellk(z,w);
  u.re := 1.596242222132374924;
  u.im := 1.400603042330332957;
  test1(10);

  z.re := 1.25;
  z.im := -1e-12;
  cellk(z,w);
  u.re :=  1.596242222132374924;
  u.im := -1.400603042330332957;
  test1(11);

  z.re := 1;
  z.im := 1e-50;
  cellk(z,w);
  u.re := 58.60434809569106006;
  u.im := 0.7853981633974483096;
  test1(12);

  z.re := 4e150;
  z.im := -1e200;
  cellk(z,w);
  u.re :=  0.4619033129599290274e-197;
  u.im := -0.1843613251839716110e-246;
  test2(13,NE1);

  z.re := 2e2900;
  z.im := -1e3000;
  cellk(z,w);
  u.re :=  0.690914157334325694270e-2996;
  u.im := -0.13816283146686513885e-3095;
  test1(14);

  if fail=0 then writeln('All ',numtest, ' tests passed.')
  else writeln('Failed for ',fail, ' of ',numtest);
  writeln;
end;


{---------------------------------------------------------------------------}
procedure test_elleke;
var
  e,v: complex;
const
  NE = 4;
  NE1 = 10;

  procedure test1(k: integer);
    {-test |u-w|/|u| against NE*eps}
  begin
    test2(k,NE);
  end;

  procedure test_ek(k,n: integer);
    {-test u vs. w, and e vs. v  against NE*eps}
  begin
    {test u vs. w, and e vs v}
    test2(k,n);
    w := e;
    u := v;
    test2(k+1,n);
  end;

begin
  writeln('Test elle/ellke');
  numtest := 0;
  fail := 0;

  z.re := 1e19;
  z.im := 0;
  celle(z, w);
  u.re := 0.7853981633974483096e-19;
  u.im := 1e19;
  test1(1);

  z.re := 0;
  z.im := 1e19;
  celle(z, w);
  u.re := 1e19;
  u.im := 0;
  test1(2);

  z.re := 1e5;
  z.im := 0;
  celle(z, w);
  u.re := 0.7853981634072657867e-5;
  u.im := 99999.9999330039009;
  test1(3);

  z.re := 0;
  z.im := 1e5;
  celle(z, w);
  u.re := 100000.0000669960991;
  u.im := 0;
  test1(4);

  z.re := 1000;
  z.im := 0;
  celle(z, w);
  u.re := 0.7853982615722555499e-3;
  u.im := 999.995602974708446;
  test1(5);

  z.re := 0;
  z.im := 1000;
  celle(z, w);
  u.re := 1000.004397024348548;
  u.im := 0;
  test1(6);

  z.re := 300;
  z.im := 0;
  celle(z, w);
  u.re := 0.2617997514109253202e-2;
  u.im := 299.9873498572642107;
  test1(7);

  z.re := 0;
  z.im := 300;
  celle(z, w);
  u.re := 300.0126501133835818;
  u.im := 0;
  test1(8);

  z.re := 100;
  z.im := 0;
  celle(z, w);
  u.re := 0.7854079812426653427e-2;
  u.im := 99.96754234966122655;
  test1(9);

  z.re := 0;
  z.im := 100;
  celle(z, w);
  u.re := 100.0324569951557039;
  u.im := 0;
  test1(10);

  z.re := 90;
  z.im := 0;
  celle(z, w);
  u.re := 0.8726780936673767524e-2;
  u.im := 89.96452120391218928;
  test1(11);

  z.re := 0;
  z.im := 90;
  celle(z, w);
  u.re := 90.03547791541153403;
  u.im := 0;
  test1(12);

  z.re := 50;
  z.im := 0;
  celle(z, w);
  u.re := 0.1570874878394663786e-1;
  u.im := 49.9420145518533970724039176380;
  test1(13);

  z.re := 40;
  z.im := 0;
  celle(z, w);
  u.re := 0.1963648842536791881e-1;
  u.im := 39.93030610257399430;
  test1(14);

  z.re := 30;
  z.im := 0;
  celle(z, w);
  u.re := 0.2618357639844337663e-1;
  u.im := 29.91186578791948424;
  test1(15);

  z.re := 20;
  z.im := 0;
  celle(z, w);
  u.re := 0.3928219153603466822e-1;
  u.im := 19.87792093412309931;
  test1(16);

  z.re := 15;
  z.im := 0;
  celle(z, w);
  u.re := 0.5238901497459638147e-1;
  u.im := 14.84679315323418779;
  test1(17);

  z.re := 10;
  z.im := 0;
  celle(z, w);
  u.re :=  0.7863836119485898078e-1;
  u.im :=  9.79037171395325189;
  test1(18);

  z.re := 6;
  z.im := 0;
  celle(z, w);
  u.re := 0.1313590109188582372;
  u.im := 5.692786295661321149;
  test1(19);

  z.re := 4;
  z.im := 0;
  celle(z, w);
  u.re := 0.1979206914276719767;
  u.im := 3.588909366412116100;
  test1(20);

  z.re := 2;
  z.im := 0;
  celle(z, w);
  u.re := 0.4062988864599602466;
  u.im := 1.343854231387097432;
  test1(21);

  z.re := 1.25;
  z.im := 0;
  celle(z, w);
  u.re := 0.6975511790132548047;
  u.im := 0.3720012007283032663;
  test1(22);

  z.re := 1;
  z.im := 0;
  celle(z, w);
  u.re := 1;
  u.im := 0;
  test1(23);

  z.re := 10;
  z.im := 1;
  celle(z, w);
  u.re :=  1.093730311797144028;
  u.im := -9.799519324313652300;
  test1(24);

  z.re := 1e20;
  z.im := 0;
  cellke(z, w, e);
  u.re :=  0.1570796326794896619e-19;
  u.im := -0.4743799622100080430e-18;
  v.re :=  0.7853981633974483096e-20;
  v.im :=  1e20;
  test_ek(25,NE);

  z.re := -1e20;
  z.im := 0;
  cellke(z, w, e);
  u.re :=  0.1570796326794896619e-19;
  u.im := -0.4743799622100080430e-18;
  v.re :=  0.7853981633974483096e-20;
  v.im :=  1e20;
  test_ek(27,NE);

  z.re := -1e5;
  z.im := 0;
  celle(z, w);
  u.re := 0.7853981634072657867e-5;
  u.im := +99999.9999330039009;
  test1(29);

  z.re := -100;
  z.im := 0;
  celle(z, w);
  u.re := 0.7854079812426653427e-2;
  u.im := 99.96754234966122655;
  test1(30);

  z.re := 100;
  z.im := 0;
  celle(z, w);
  u.re := 0.7854079812426653427e-2;
  u.im := 99.96754234966122655;
  test1(31);

  z.re := 1e10;
  z.im := 0;
  celle(z, w);
  u.re := 0.7853981633974483096e-10;
  u.im := 1e10;
  test1(32);

  z.re := 10;
  z.im := -8;
  cellke(z, w, e);
  u.re :=  0.2469154764862229121;
  u.im := -0.1960538554962205691;
  v.re := 8.135592884441531407;
  v.im := 9.886669854735887450;
  test_ek(33,NE);

  z.re := 100;
  z.im := -8;
  cellke(z, w, e);
  u.re :=  0.1958072648573387601e-1;
  u.im := -0.5838125150434572642e-1;
  v.re :=  8.009988932032562706;
  v.im := 99.96832553595655373;
  test_ek(35,NE);

  z.re := 1000;
  z.im := -10;
  cellke(z, w, e);
  u.re :=  0.1643573743807227037e-2;
  u.im := -0.8277665715340634927e-2;
  v.re := 10.00082428651123396;
  v.im := 999.995611192576897;
  test_ek(37,NE);

  z.re := 1e4;
  z.im := -10;
  cellke(z, w, e);
  u.re :=  0.1580391385966385424e-3;
  u.im := -0.1059505486569352424e-2;
  v.re := 10.00007904456917346;
  v.im := 9999.99944524728230;
  test_ek(39,NE1);

  z.re := 1e5;
  z.im := -10;
  cellke(z, w, e);
  u.re :=  0.1571986233097833284e-4;
  u.im := -0.1289906263276428186e-3;
  v.re := 10.00000786018116539;
  v.im := 99999.99993300468686;
  test_ek(41,NE1);

  z.re := 1e6;
  z.im := -10;
  cellke(z, w, e);
  u.re :=  0.1570938344687387263e-5;
  u.im := -0.1520178920975426829e-4;
  v.re := 10.00000078547167234;
  v.im := 999999.9999921491054;
  test_ek(43,NE1);                      {FPC264/AMD}

  z.re := 1e10;
  z.im := 1e8;
  cellke(z, w, e);
  u.re :=  0.18047381391799185303e-9;
  u.im :=  0.24394147907168714928e-8;
  v.re :=  0.1000000000000000001e9;
  v.im := -0.9999999999999999999e10;
  test_ek(45,NE1);

  z.re := 1e8;
  z.im := -10;
  cellke(z, w, e);
  u.re :=  0.1570798207492391458e-7;
  u.im := -0.1980697494799244081e-6;
  v.re := 10.00000000785399129;
  v.im :=  0.999999999999998985e8;
  test_ek(47,NE);

  z.re := 1e10;
  z.im := 1e20;
  cellke(z, w, e);
  u.re := 0.4743799622100080430e-18;
  u.im := 0.4643799622100080430e-28;
  v.re := 1e20;
  v.im := -1e10;
  test_ek(49,NE);

  z.re := 1e-10;
  z.im := -1e20;
  cellke(z, w, e);
  u.re :=  0.4743799622100080430e-18;
  u.im := -0.4643799622100080430e-48;
  v.re := 1e20;
  v.im := 1e-10;
  test_ek(51,NE);

  z.re := 1e20;
  z.im := 1e-10;
  cellke(z, w, e);
  u.re := 0.1570796326794896619e-19;
  u.im := 0.4743799622100080430e-18;
  v.re := 0.1000000000078539816e-9;
  v.im := -1e20;
  test_ek(53,NE);

  z.re := 1e-10;
  z.im := -1e20;
  cellke(z, w, e);
  u.re :=  0.4743799622100080430e-18;
  u.im := -0.4643799622100080430e-48;
  v.re := 1e20;
  v.im := 1e-10;
  test_ek(55,NE);

  z.re := 1e1500;
  z.im := 1e2000;
  cellke(z, w, e);
  u.re :=  0.4606556480349211259e-1996;
  u.im :=  0.4605556480349211259e-2496;
  v.re :=  0.1e2001;
  v.im := -0.1e1501;
  test_ek(57,NE1);     {FPC264/AMD}

  if fail=0 then writeln('All ',numtest, ' tests passed.')
  else writeln('Failed for ',fail, ' of ',numtest);
  writeln;
end;


{---------------------------------------------------------------------------}
procedure test_sncndn;
var
  sn,cn,dn: complex;
  s,c,d: complex;
  k: extended;
const
  NE = 8;
  NE1 = 16;
  NE2 = 32;
  NEP = 2500; {near pole}

  procedure test3(j,n: integer);
    {-test u vs. w, and e vs. v  against NE*eps}
  begin
    w := sn;
    u := s;
    test2(j,n);
    w := cn;
    u := c;
    test2(j+1,n);
    w := dn;
    u := d;
    test2(j+2,n);
  end;
begin
  writeln('Test sn/cn/dn');
  numtest := 0;
  fail := 0;
  u.re := 0;
  u.im := 10;
  k    := 0.5;
  csncndn(u, k, sn,cn,dn);
  s.re := 0;
  s.im := 2.233734682928285047;
  c.re := 2.447359931378448905;
  c.im := 0;
  d.re := 1.499130634210768683;
  d.im := 0;
  test3(1,NE);

  u.re := 0;
  u.im := 10;
  k    := -5;
  csncndn(u, k, sn,cn,dn);
  s.re :=  0;
  s.im :=  0.5935374933932876288;
  c.re :=  1.162878650618191956;
  c.im :=  0;
  d.re :=  3.131639969982129649;
  d.im :=  0;
  test3(4,NE1);

  u.re := -5;
  u.im := 0;
  k    := 0.75;
  csncndn(u, k, sn,cn,dn);
  s.re :=  0.8735277873244746640;
  s.im := 0;
  c.re := -0.4867742852411242158;
  c.im := 0;
  d.re :=  0.7555024339366843763;
  d.im := 0;
  test3(7,NE);

  u.re := 1;
  u.im := 0;
  k    := 8;
  csncndn(u, k, sn,cn,dn);
  s.re :=  0.1241862447451724838;
  s.im := 0;
  c.re :=  0.9922589261962283400;
  c.im := 0;
  d.re := -0.1139197236210466680;
  d.im := 0;
  test3(10,NE);

  u.re := -5;
  u.im := 1;
  k    := 0.5;
  csncndn(u, k, sn,cn,dn);
  s.re :=  1.359328358812106323;
  s.im := -0.3872617587507437014e-1;
  c.re := -0.5711341713624647760e-1;
  c.im := -0.9217026704908075580;
  d.re :=  0.7339979619935256768;
  d.im :=  0.1792974634165202248e-1;
  test3(13,NE2);

  u.re := 1;
  u.im := -2;
  k    := 4;
  csncndn(u, k, sn,cn,dn);
  s.re := -1.134998400350689203;
  s.im :=  0.4115473983209855288;
  c.re := -0.6414401237457710991;
  c.im := -0.7282139384032975151;
  d.re :=  1.682466040911703175;
  d.im :=  4.442104647862623690;
  test3(16,NE);

  u.re := 1;
  u.im := 2;
  k    := 0.75;
  csncndn(u, k, sn,cn,dn);
  s.re :=  1.622368385945781630;
  s.im := -0.1881569111894591105;
  c.re := -0.2374253332393162469;
  c.im := -1.285708732704170063;
  d.re := -0.2386699256923466426;
  d.im := -0.7194398317124714637;
  test3(19,NE1);


  {Near pole of sn/cn/dn at i*K'(k)}
  u.re := 0;
  u.im := 2.15625;
  k    := 0.5;
  csncndn(u, k, sn,cn,dn);
  s.re := 0;
  s.im := 7528.773932683043966;
  c.re := 7528.773999094919560;
  c.im := 0;
  d.re := 3764.387099165271414;
  d.im := 0;
  test3(22,NEP);

  if fail=0 then writeln('All ',numtest, ' tests passed.')
  else writeln('Failed for ',fail, ' of ',numtest);
  writeln;

end;


{---------------------------------------------------------------------------}
const
  full : boolean = false;
  neps = 6;

{---------------------------------------------------------------------------}
procedure lwtest1;
var
  k: integer;
  z,w,d: complex;
  f,y,e: extended;
const
  tv1 : array[-10..10] of complex = (
          (re: -3.3034107896711766395;   im:  -60.743079327080358473),
          (re: -3.1943848607152768516;   im:  -54.455630651701962866),
          (re: -3.0719920518566060385;   im:  -48.167347303801997239),
          (re: -2.9324860364463647631;   im:  -41.877942736444621008),
          (re: -2.7702816695778795991;   im:  -35.586979210151369220),
          (re: -2.5765084540402852146;   im:  -29.293754164764326576),
          (re: -2.3357797764658847331;   im:  -22.997075857544883689),
          (re: -2.0176308088471429274;   im:  -16.694841716194482496),
          (re: -1.5465242161553322229;   im:  -10.384081182223073624),
          (re: -0.61730321060822314664;  im:  -4.0992760722955144226),
          (re:  0.89068406920200682056;  im:  0.22072564954715954748),
          (re: -0.82069322764636878931;  im:  +5.0137881918681247226),
          (re: -1.6317898063354515032;   im:  +11.316007223215920684),
          (re: -2.0714821483632814743;   im:  +17.625415766417384841),
          (re: -2.3751769015359529507;   im:  +23.926647568608242285),
          (re: -2.6075829806150925159;   im:  +30.222712034324218825),
          (re: -2.7959418795564940559;   im:  +36.515543694652135984),
          (re: -2.9543409468498421156;   im:  +42.806241108746824786),
          (re: -3.0910255852164072308;   im:  +49.095457227750002190),
          (re: -3.2112427292015304724;   im:  +55.383602059963523874),
          (re: -3.3185396575484797035;   im:  +61.670945778436828587));

begin
  write(' Test 1 ... ');
  z.re := 2.0;
  z.im := 1.0;
  e := 0.0;
  for k:=-10 to 10 do begin
    cLambertWk(k,z,w);
    csub(w,tv1[k],d);
    y := cabs(d);
    f := cabs(tv1[k]);
    if f > 0.25 then y := y/f;
    y := y/eps_x;
    if full then writeln('k=', k:3, '   err= ', y:1:2);
    if y>e then e := y;
  end;
  write('Max err = ',e:1:2, ' - ');
  if e>NEPS then writeln(' failed!')
  else writeln(' passed.');
end;

{---------------------------------------------------------------------------}
procedure lwtest2;
var
  k: integer;
  z,w,d: complex;
  f,y,e: extended;
const
  tv2 : array[-10..10] of complex = (
          (re: -4.9235435469517161352;  im:  -61.769519211665282383),
          (re: -4.8167310705422968812;  im:  -55.479270829774092065),
          (re: -4.6971449940626987958;  im:  -49.187482713877954267),
          (re: -4.5613109840646091542;  im:  -42.893561344036171111),
          (re: -4.4041100783772886016;  im:  -36.596551851305598083),
          (re: -4.2175410411883531651;  im:  -30.294805253525256739),
          (re: -3.9880385491269739913;  im:  -23.985183905393918695),
          (re: -3.6896753780632780567;  im:  -17.660805705342888058),
          (re: -3.2620031532219641164;  im:  -11.302605531175492324),
          (re: -2.4885735489951188381;  im:  -4.8241376245991792584),
          (re: 0.30109720111366942941;  im: -0.14343458821380105403),
          (re: -2.2336273711166388556;  im:  +3.5646314200480112864),
          (re: -3.1565313984137834705;  im:  +10.104796590482900416),
          (re: -3.6223771910961886369;  im:  +16.474320946497745495),
          (re: -3.9385531392296186449;  im:  +22.802908251931776092),
          (re: -4.1783998769146584378;  im:  +29.114585231362832679),
          (re: -4.3717334660075611842;  im:  +35.417499849643458628),
          (re: -4.5337047186707356626;  im:  +41.715240910831582970),
          (re: -4.6730838360134278284;  im:  +48.009652852507147910),
          (re: -4.7954082293594197293;  im:  +54.301787014192460619),
          (re: -4.9043995451985231821;  im:  +60.592289225413769686));
begin
  write(' Test 2 ... ');
  z.re := 0.375;
  z.im := -0.25;
  e := 0.0;
  for k:=-10 to 10 do begin
    cLambertWk(k,z,w);
    csub(w,tv2[k],d);
    y := cabs(d);
    f := cabs(tv2[k]);
    if f > 0.25 then y := y/f;
    y := y/eps_x;
    if full then writeln('k=', k:3, '   err= ', y:1:2);
    if y>e then e := y;
  end;
  write('Max err = ',e:1:2, ' - ');
  if e>NEPS then writeln(' failed!')
  else writeln(' passed.');
end;


{---------------------------------------------------------------------------}
procedure lwtest3;
var
  k: integer;
  z,w,d: complex;
  f,y,e: extended;
const
  tv3 : array[-10..10] of complex = (
          (re: -4.6647169032989843166;  im:  -59.147910422207056788),
          (re: -4.5528710175277815318;  im:  -52.857504768173266445),
          (re: -4.4269331882897863851;  im:  -46.565458031154820552),
          (re: -4.2828330441828404689;  im:  -40.271105114530279974),
          (re: -4.1144320936277814199;  im:  -33.973350888963366317),
          (re: -3.9118276347540683403;  im:  -27.670243900445067441),
          (re: -3.6574487843450988234;  im:  -21.357900339592113234),
          (re: -3.3151974677174752141;  im:  -15.027180339658749755),
          (re: -2.7884912097646236295;  im:  -8.6492548484953361533),
          (re: -1.5136605701504904063;  im:  -2.0394640209123989186),
          (re:0.038987172240648575613;  im:  0.53622644428807562354),
          (re: -2.5053949740886733295;  im:  +6.3722245718796412133),
          (re: -3.1596961155183179066;  im:  +12.787782993970440565),
          (re: -3.5497458074414324156;  im:  +19.129728664689104415),
          (re: -3.8293706862641783547;  im:  +25.447025555188481083),
          (re: -4.0476151974174916308;  im:  +31.752785177347683261),
          (re: -4.2266638076554774355;  im:  +38.052137313652049724),
          (re: -4.3784827942714497371;  im:  +44.347532553187222737),
          (re: -4.5102737283653920446;  im:  +50.640299545917203301),
          (re: -4.6267107889939929321;  im:  +56.931225160654351840),
          (re: -4.7310010516654410284;  im:  +63.220806926089798477));
begin
  write(' Test 3 ... ');
  z.re := -0.25;
  z.im := 0.5;
  e := 0.0;
  for k:=-10 to 10 do begin
    cLambertWk(k,z,w);
    csub(w,tv3[k],d);
    y := cabs(d);
    f := cabs(tv3[k]);
    if f > 0.25 then y := y/f;
    y := y/eps_x;
    if full then writeln('k=', k:3, '   err= ', y:1:2);
    if y>e then e := y;
  end;
  write('Max err = ',e:1:2, ' - ');
  if e>NEPS then writeln(' failed!')
  else writeln(' passed.');
end;


{---------------------------------------------------------------------------}
procedure lwtest4;
var
  k: integer;
  z,w,d: complex;
  f,y,e: extended;
const
  tv4 : array[-10..10] of complex = (
          (re: -2.9643116504614428703;  im:  -58.068459798823439321),
          (re: -2.8499290137643555911;  im:  -51.781296448962663544),
          (re: -2.7207392201965830822;  im:  -45.493359430664196902),
          (re: -2.5723243379125429749;  im:  -39.204388911602119167),
          (re: -2.3979325853957746409;  im:  -32.913996858257665349),
          (re: -2.1864717193643913913;  im:  -26.621589964102194493),
          (re: -1.9177335312791965626;  im:  -20.326283229038054053),
          (re: -1.5484436794735302153;  im:  -14.027223610049539105),
          (re:-0.95420835845684201336;  im:  -7.7311792937569602184),
          (re: 0.46699785792566026446;  im:  -1.8217398230084244320),
          (re: 0.46699785792566026446;  im:  +1.8217398230084244320),
          (re:-0.95420835845684201336;  im:  +7.7311792937569602184),
          (re: -1.5484436794735302153;  im:  +14.027223610049539105),
          (re: -1.9177335312791965626;  im:  +20.326283229038054053),
          (re: -2.1864717193643913913;  im:  +26.621589964102194493),
          (re: -2.3979325853957746409;  im:  +32.913996858257665349),
          (re: -2.5723243379125429749;  im:  +39.204388911602119167),
          (re: -2.7207392201965830822;  im:  +45.493359430664196902),
          (re: -2.8499290137643555911;  im:  +51.781296448962663544),
          (re: -2.9643116504614428703;  im:  +58.068459798823439321),
          (re: -3.0669370761766696255;  im:  +64.355028902287266443));
begin
  write(' Test 4 ... ');
  z.re := -3;
  z.im := 0;
  e := 0.0;
  for k:=-10 to 10 do begin
    cLambertWk(k,z,w);
    csub(w,tv4[k],d);
    y := cabs(d);
    f := cabs(tv4[k]);
    if f > 0.25 then y := y/f;
    y := y/eps_x;
    if full then writeln('k=', k:3, '   err= ', y:1:2);
    if y>e then e := y;
  end;
  write('Max err = ',e:1:2, ' - ');
  if e>NEPS then writeln(' failed!')
  else writeln(' passed.');
end;


{---------------------------------------------------------------------------}
procedure test_lambertw;
begin
  writeln('Test of cLambertWk(k,z), k = -10 .. 10');
  lwtest1;
  lwtest2;
  lwtest3;
  lwtest4;
end;


{---------------------------------------------------------------------------}
procedure test_rstheta;
const
  NE  = 6;
  NE1 = 24;
  NE2 = 240;

  procedure test1(k: integer);
    {-test |u-w|/|u| against NE*eps}
  begin
    test2(k,NE);
  end;

begin
  writeln('Test crstheta');
  numtest := 0;
  fail := 0;

  z.re := 1;
  z.im := 1;
  crstheta(z,w);
  u.re := -2.042558805837475573;
  u.im := -0.8631526453761203028;
  test1(1);

  z.re := 0;
  z.im := 1;
  crstheta(z,w);
  u.re := -1.570796326794896619;
  u.im := -1.265512123484645396;
  test1(2);

  {Near the real zero z = +- 17.84559954041086}
  z.re := -18;
  z.im := 0;
  crstheta(z,w);
  u.re := -0.08091075767494962671;
  u.im := 0;
  test2(3,NE2);

  z.re := 10;
  z.im := 5;
  crstheta(z,w);
  u.re := -3.668752272278904033;
  u.im := +1.258103360107223826;
  test2(4,NE1);

  z.re := 1/1024;
  z.im := 1/512;
  crstheta(z,w);
  u.re := -0.2623164037574439976e-2;
  u.im := -0.5246277888698303127e-2;
  test1(5);

  z.re := 0.01;
  z.im := -0.012;
  crstheta(z,w);
  u.re := -0.26869860319563649366e-1;
  u.im := 0.3222805110553010270e-1;
  test1(6);

  z.re := 1e8;
  z.im := 0;
  crstheta(z,w);
  u.re :=  0.7791401834844519179e9;
  u.im := 0;
  test1(7);

  z.re := 0;
  z.im := 10;
  crstheta(z,w);
  u.re := -7.853981633974483096;
  u.im := -2.505255193807195645;
  test1(8);

  z.re := 0;
  z.im := 1/16;
  crstheta(z,w);
  u.re := 0;
  u.im := -0.1685447013067388420;
  test2(9, NE1);

  z.re := 100;
  z.im := 80;
  crstheta(z,w);
  u.re := 73.34985228646598118;
  u.im := 114.3225951045131812;
  test1(10);

  if fail=0 then writeln('All ',numtest, ' tests passed.')
  else writeln('Failed for ',fail, ' of ',numtest);
  writeln;

end;


{---------------------------------------------------------------------------}
procedure test_zeta;
const
  NE  = 60;
  NE1 = 600;
  NE2 = 6000;

  procedure test1(k: integer);
    {-test |u-w|/|u| against NE*eps}
  begin
    test2(k,NE);
  end;

begin
  writeln('Test czeta');
  numtest := 0;
  fail := 0;

  z.re := 0.5;
  z.im := 10.0;
  czeta(z,w);
  u.re := 1.544895220296752767;
  u.im := -0.1153364652712733754;
  test1(1);

  z.re := 20;
  z.im := 1e8;
  czeta(z,w);
  u.re := 1.0000009523802358832;
  u.im := -4.551086871310296847e-8;
  test2r(2, 4e-11);

  {n=35068}
  z.re := 0.5;
  z.im := 1e5;
  czeta(z,w);
  u.re := 1.073032014857753132;
  u.im := 5.780848544363503984;
  test2r(3,2e-14);

  z.re := 0.5;
  z.im := 1e4;
  czeta(z,w);
  u.re := -0.3393738026388344576;
  u.im := -0.03709150597320603147;
  test2r(4,2e-15);

  z.re := 20;
  z.im := 1e5;
  czeta(z,w);
  u.re := 1.000000179021530230;
  u.im := 9.368493415153838931e-7;
  test2(5,NE2);

  z.re := -1;
  z.im := 2;
  czeta(z,w);
  u.re :=  0.1689156697708344181;
  u.im := -0.7051598890825442300e-1;
  test1(6);

  z.re := 0;
  z.im := -20;
  czeta(z,w);
  u.re := -0.5387338122970365313e-1;
  u.im := 1.730661043830943476;
  test2(7,NE2);

  z.re := -0.125;
  z.im := 1e-10;
  czeta(z,w);
  u.re := -0.3990696689450450355;
  u.im := -0.7083051840964734768e-10;
  test1(8);

  z.re := 2.0;
  z.im := 1.0;
  czeta(z,w);
  u.re := 1.150355703254902672;
  u.im := -0.4375308659196078811;
  test1(9);

  z.re := 0.5;
  z.im := 10.0;
  czeta(z,w);
  u.re := 1.544895220296752767;
  u.im := -0.1153364652712733754;
  test1(10);

  z.re := 0.5;
  z.im := 100.0;
  czeta(z,w);
  u.re := 2.692619885681324090;
  u.im := -0.2038602960259816177e-1;
  test2(11,NE1);

  z.re := 0.5;
  z.im := 1000.0;
  czeta(z,w);
  u.re := 0.3563343671943960551;
  u.im := 0.9319978312329936651;
  test2(12,NE1);

  z.re := 0.5;
  z.im := 200.0;
  czeta(z,w);
  u.re :=  4.590577374969052659;
  u.im := -3.189401247579144134;
  test1(13);

  if fail=0 then writeln('All ',numtest, ' tests passed.')
  else writeln('Failed for ',fail, ' of ',numtest);
  writeln;

end;


{---------------------------------------------------------------------------}
procedure test_ei;
const
  NE  = 10;
  NE1 = 30;

  procedure test1(k: integer);
    {-test |u-w|/|u| against NE*eps}
  begin
    test2(k,NE);
  end;

begin
  writeln('Test cei');
  numtest := 0;
  fail := 0;

  z.re := 11.5;
  z.im := -3/2;
  cei(z,w);
  u.re :=  2024.7532126821454822;
  u.im := -9191.7127969448228733;
  test1(1);

  z.re := 10;
  z.im := -3/2;
  cei(z,w);
  u.re :=  590.4802739759283417;
  u.im := -2380.919141125069907;
  test1(2);

  z.re := 47.5;
  z.im := -1;
  cei(z,w);
  u.re :=  5.110956458836676434e18;
  u.im := -7.595185632414580930e18;
  test1(3);

  z.re := -40;
  z.im := 40;
  cei(z,w);
  u.re := 7.400104300289923218e-20;
  u.im := 3.141592653589793238;
  test1(4);

  z.re := 35;
  z.im := 35;
  cei(z,w);
  u.re := -0.3044356732013047709e14;
  u.im := +0.1138404276852949573e14;
  test1(5);

  z.re := -40;
  z.im := 1;
  cei(z,w);
  u.re := -5.385476503753944427e-20;
  u.im :=  3.141592653589793238;
  test1(6);

  z.re := -35;
  z.im := 0;
  cei(z,w);
  u.re := -1.752705938994737200e-17;
  u.im := 0;
  test1(7);

  z.re := 35;
  z.im := 0;
  cei(z,w);
  u.re := 4.669055014466159545e13;
  u.im := 0;
  test1(8);

  z.re := 35;
  z.im := 1;
  cei(z,w);
  u.re := 2.636185685226067986e13;
  u.im := 3.851187561942324094e13;
  test1(9);

  z.re := 50;
  z.im := 1;
  cei(z,w);
  u.re := 5.898929306705539470e19;
  u.im := 8.787011034411322749e19;
  test1(10);

  z.re := 50;
  z.im := 0;
  cei(z,w);
  u.re := 1.058563689713169096e20;
  u.im := 0;
  test1(11);

  z.re := 0.25;
  z.im := 0.25;
  cei(z,w);
  u.re := -0.2144104732671032325;
  u.im := 1.068377298158999600;
  test1(12);

  z.re := 1;
  z.im := -1;
  cei(z,w);
  u.re :=  1.764625985563854068;
  u.im := -2.387769851510522419;
  test1(13);

  z.re := -2;
  z.im := 2;
  cei(z,w);
  u.re := 0.3376708960656200425e-1;
  u.im := 3.122993239420042697;
  test2(14, NE1);

  z.re := 3;
  z.im := -3;
  cei(z,w);
  u.re := -2.074761357955481381;
  u.im := -7.979041779872600937;
  test1(15);

  z.re := 10;
  z.im := 10;
  cei(z,w);
  u.re := -1576.150426576851745;
  u.im :=  436.9192317011328140;
  test1(16);

  z.re := 50;
  z.im := 50;
  cei(z,w);
  u.re :=  0.3612852861664926886e20;
  u.im := -0.6464880186133874196e20;
  test1(17);

  z.re := -30;
  z.im := 30;
  cei(z,w);
  u.re := -0.1731604584174406162e-14;
  u.im := 3.141592653589794545;
  test1(18);

  if fail=0 then writeln('All ',numtest, ' tests passed.')
  else writeln('Failed for ',fail, ' of ',numtest);
  writeln;
end;


{---------------------------------------------------------------------------}
procedure test_e1;
const
  NE  = 16;
  NE1 = 50;
  NE2 = 700;

  procedure test1(k: integer);
    {-test |u-w|/|u| against NE*eps}
  begin
    test2(k,NE);
  end;

begin
  writeln('Test ce1');
  numtest := 0;
  fail := 0;

  z.re := 2;
  z.im := 1;
  ce1(z,w);
  u.re :=  0.9388161310484466717e-2;
  u.im := -0.4446299414138538559e-1;
  test2(1, NE1);

  z.re := 10;
  z.im := -3/2;
  ce1(z,w);
  u.re := -0.2736761626232343727e-6;
  u.im := +0.4108305885154132799e-5;
  test1(2);

  z.re := 11.5;
  z.im := -3/2;
  ce1(z,w);
  u.re := -0.4033703212992415651e-7;
  u.im :=  0.8079971729961438577e-6;
  test1(3);

  z.re := 10;
  z.im := -3/2;
  ce1(z,w);
  u.re := -0.2736761626232343727e-6;
  u.im :=  0.4108305885154132799e-5;
  test1(4);

  z.re := 47.5;
  z.im := -1;
  ce1(z,w);
  u.re := 0.2533457483589319009e-22;
  u.im := 0.4130652352860421638e-22;
  test1(5);

  z.re := -40;
  z.im := 40;
  ce1(z,w);
  u.re := -0.2875121803214484541e15;
  u.im :=  0.4203502407932314974e16;
  test1(6);

  z.re := 35;
  z.im := 35;
  ce1(z,w);
  u.re := -0.4384012757668572738e-17;
  u.im := +0.1176776537628531959e-16;
  test1(7);

  z.re := -40;
  z.im := 1;
  ce1(z,w);
  u.re := -0.3391536480963796701e16;
  u.im := +0.4995157996910317707e16;
  test1(8);

  z.re := -35;
  z.im := 0;
  ce1(z,w);
  u.re := -0.4669055014466159545e14;
  u.im := -3.141592653589793238;
  test1(9);

  z.re := 35;
  z.im := 0;
  ce1(z,w);
  u.re := 0.1752705938994737200e-16;
  u.im := 0;
  test1(10);

  z.re := 35;
  z.im := 1;
  ce1(z,w);
  u.re :=  0.9052633766430873920e-17;
  u.im := -0.1500032622046164998e-16;
  test1(11);

  z.re := 50;
  z.im := 1;
  ce1(z,w);
  u.re :=  0.1980876181072082178e-23;
  u.im := -0.3222375468953165034e-23;
  test1(12);

  z.re := 50;
  z.im := 0;
  ce1(z,w);
  u.re := 0.3783264029550459019e-23;
  u.im := 0;
  test1(13);

  z.re := 0.25;
  z.im := 0.25;
  ce1(z,w);
  u.re :=  0.7109252579292328789;
  u.im := -0.5649181244130419471;
  test1(14);

  z.re := 1;
  z.im := -1;
  ce1(z,w);
  u.re := 0.2816244519814183255e-3;
  u.im := 0.1793245350393589401;
  test2(15,NE2);

  z.re := -2;
  z.im := 2;
  ce1(z,w);
  u.re := -1.892078162185547409;
  u.im :=  2.175369784242864724;
  test1(16);

  z.re := 3;
  z.im := -3;
  ce1(z,w);
  u.re := -0.8688577675618630370e-2;
  u.im := -0.5102390130415805831e-2;
  test1(17);

  z.re := 10;
  z.im := 10;
  ce1(z,w);
  u.re := -0.7669897841555348836e-6;
  u.im := +0.2958145827823562429e-5;
  test1(18);

  z.re := 50;
  z.im := 50;
  ce1(z,w);
  u.re :=  0.2356612832464464122e-23;
  u.im := -0.1318832672620161478e-23;
  test1(19);

  z.re := -30;
  z.im := 30;
  ce1(z,w);
  u.re := 0.1545964842736932253e12;
  u.im :=-0.2041793578374138970e12;
  ce1(z,w);
  test1(20);

  z.re := 1;
  z.im := 0;
  ce1(z,w);
  u.re := 0.2193839343955202737;
  u.im := 0.0;
  test1(21);

  z.re := 5;
  z.im := 0;
  ce1(z,w);
  u.re := 0.1148295591275325797e-2;
  u.im := 0.0;
  test1(22);

  z.re := 50;
  z.im := 0;
  ce1(z,w);
  u.re := 0.3783264029550459019e-23;
  u.im := 0.0;
  test1(23);

  {Branch cut}
  z.re := -1;
  z.im := 0;
  ce1(z,w);
  u.re := -1.895117816355936755;
  u.im := -3.141592653589793238;
  test1(24);

  z.re := -5;
  z.im := 0;
  ce1(z,w);
  u.re := -40.18527535580317746;
  u.im := -3.141592653589793238;
  test1(25);

  z.re := -50;
  z.im := 0;
  ce1(z,w);
  u.re := -0.10585636897131690963e21;
  u.im := -3.141592653589793238;
  test1(26);

  if fail=0 then writeln('All ',numtest, ' tests passed.')
  else writeln('Failed for ',fail, ' of ',numtest);
  writeln;
end;


{---------------------------------------------------------------------------}
procedure test_all_complex;
begin
  test_complex;
  test_func_inv_complex;
  test_branches;
  misc_tests;
  test_lngamma;
  test_gamma;
  test_psi;
  test_dilog;
  test_rstheta;
  test_zeta;
  test_ei;
  test_e1;
  test_ellkck;
  test_elleke;
  test_sncndn;
  test_lambertw;
end;

end.
